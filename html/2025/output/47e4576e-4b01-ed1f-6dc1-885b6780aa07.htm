<html><head><title>StairsEditScope Class</title><meta name="Title" content="StairsEditScope Class" /><meta name="Microsoft.Help.Id" content="T:Autodesk.Revit.DB.StairsEditScope" /><meta name="Microsoft.Help.ContentType" content="Reference" /><meta name="System.Keywords" content="Autodesk.Revit.DB.StairsEditScope class" /><meta name="System.Keywords" content="StairsEditScope class" /><meta name="Microsoft.Help.F1" content="Autodesk.Revit.DB.StairsEditScope" /><meta name="Microsoft.Help.F1" content="StairsEditScope" /><meta name="container" content="Autodesk.Revit.DB" /><meta name="file" content="47e4576e-4b01-ed1f-6dc1-885b6780aa07" /><meta name="guid" content="47e4576e-4b01-ed1f-6dc1-885b6780aa07" /><meta name="Microsoft.Help.Category" content="CSharp" /><meta name="Microsoft.Help.Category" content="VB" /><meta name="Description" content="StairsEditScope allows user to maintain a stairs-editing session." /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /></head><body onload="SetDefaultLanguage('cs');"><div class="pageBody"><div id="TopicContent" class="topicContent"><table class="titleTable"><tr><td class="titleColumn"><h1>Stairs<wbr />Edit<wbr />Scope Class</h1></td></tr></table><div class="summary">
   StairsEditScope allows user to maintain a stairs-editing session.
</div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDDA')" onkeypress="SectionExpandCollapse_CheckKey('IDDA', event)" tabindex="0"><img id="IDDAToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Inheritance Hierarchy</span></div><div id="IDDASection" class="collapsibleSection"><a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">System<span id="LST6C1789A8_0" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>Object</a><br />  <a href="bac11282-3a3b-953e-8bc4-960c62da4946.htm">Autodesk.Revit.DB<span id="LST6C1789A8_1" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>EditScope</a><br />    <span class="selflink">Autodesk.Revit.DB<span id="LST6C1789A8_2" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>StairsEditScope</span><br /></div><br /><strong>Namespace:</strong> <a href="87546ba7-461b-c646-cbb1-2cb8f5bff8b2.htm">Autodesk.Revit.DB</a><br /><strong>Assembly:</strong> RevitAPI (in RevitAPI.dll) Version: 25.0.0.0 (25.0.0.0)<div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDB')" onkeypress="SectionExpandCollapse_CheckKey('IDB', event)" tabindex="0"><img id="IDBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Syntax</span></div><div id="IDBSection" class="collapsibleSection"><div id="IDAB" class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="IDAB_tab1" class="codeSnippetContainerTab"><a href="#" onclick="ChangeTab('IDAB','cs','1','4');return false;">C#</a></div><div id="IDAB_tab2" class="codeSnippetContainerTab"><a href="#" onclick="ChangeTab('IDAB','vb','2','4');return false;">VB</a></div><div id="IDAB_tab3" class="codeSnippetContainerTab"><a href="#" onclick="ChangeTab('IDAB','cpp','3','4');return false;">C++</a></div><div id="IDAB_tab4" class="codeSnippetContainerTab"><a href="#" onclick="ChangeTab('IDAB','fs','4','4');return false;">F#</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="IDAB_copyCode" href="#" class="copyCodeSnippet" onclick="CopyToClipboard('IDAB');return false;" title="Copy">Copy</a></div></div><div id="IDAB_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">class</span> <span class="identifier">StairsEditScope</span> : <span class="identifier">EditScope</span></pre></div><div id="IDAB_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">Public</span> <span class="keyword">Class</span> <span class="identifier">StairsEditScope</span>
	<span class="keyword">Inherits</span> <span class="identifier">EditScope</span></pre></div><div id="IDAB_code_Div3" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">ref class</span> <span class="identifier">StairsEditScope</span> : <span class="keyword">public</span> <span class="identifier">EditScope</span></pre></div><div id="IDAB_code_Div4" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">type</span> <span class="identifier">StairsEditScope</span> = 
    <span class="keyword">class</span>
        <span class="keyword">inherit</span> <span class="identifier">EditScope</span>
    <span class="keyword">end</span></pre></div></div></div></div><p>The <span class="selflink">StairsEditScope</span> type exposes the following members.</p><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDDEA')" onkeypress="SectionExpandCollapse_CheckKey('IDDEA', event)" tabindex="0"><img id="IDDEAToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Constructors</span></div><div id="IDDEASection" class="collapsibleSection"><table id="ConstructorList" class="members"><tr><th class="iconColumn"> </th><th>Name</th><th>Description</th></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /></td><td><a href="1c753d29-0eab-16f1-de61-12d8ea09803e.htm">StairsEditScope</a></td><td>
   Instantiates a StairsEditScope object.
</td></tr></table><a href="#PageHeader">Top</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDJEA')" onkeypress="SectionExpandCollapse_CheckKey('IDJEA', event)" tabindex="0"><img id="IDJEAToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Properties</span></div><div id="IDJEASection" class="collapsibleSection"><table id="PropertyList" class="members"><tr><th class="iconColumn"> </th><th>Name</th><th>Description</th></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public property" title="Public property" /></td><td><a href="b4387ada-7b23-edd0-3836-f7faf47d021e.htm">IsActive</a></td><td>
   Tells if the EditScope is active. In other words, the EditScope has started but not committed/canceled yet.
<br />(Inherited from <a href="bac11282-3a3b-953e-8bc4-960c62da4946.htm">EditScope</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public property" title="Public property" /></td><td><a href="addcb3c7-f761-723c-de17-d9abbefde247.htm">IsPermitted</a></td><td>
   Tells if the edit scope is permitted to start.
<br />(Inherited from <a href="bac11282-3a3b-953e-8bc4-960c62da4946.htm">EditScope</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public property" title="Public property" /></td><td><a href="2ae83145-b34a-1830-68a0-e488e216fdb0.htm">IsValidObject</a></td><td>
   Specifies whether the .NET object represents a valid Revit entity.
<br />(Inherited from <a href="bac11282-3a3b-953e-8bc4-960c62da4946.htm">EditScope</a>)</td></tr></table><a href="#PageHeader">Top</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDAEA')" onkeypress="SectionExpandCollapse_CheckKey('IDAEA', event)" tabindex="0"><img id="IDAEAToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Methods</span></div><div id="IDAEASection" class="collapsibleSection"><table id="MethodList" class="members"><tr><th class="iconColumn"> </th><th>Name</th><th>Description</th></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /></td><td><a href="7d36a76e-dc13-c17e-b999-891c9c6fe4df.htm">Cancel</a></td><td>
   Cancels the edit scope.
<br />(Inherited from <a href="bac11282-3a3b-953e-8bc4-960c62da4946.htm">EditScope</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /></td><td><a href="c82741e1-58b8-ee1f-7deb-1764af63f37a.htm">Commit</a></td><td>
   Finishes the edit scope.
<br />(Inherited from <a href="bac11282-3a3b-953e-8bc4-960c62da4946.htm">EditScope</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /></td><td><a href="a42bd333-2276-0df4-2ecc-17f04671a840.htm">Dispose</a></td><td><br />(Inherited from <a href="bac11282-3a3b-953e-8bc4-960c62da4946.htm">EditScope</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /></td><td><a href="https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)" target="_blank" rel="noopener noreferrer">Equals</a></td><td>Determines whether the specified object is equal to the current object.<br />(Inherited from <a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /></td><td><a href="https://learn.microsoft.com/dotnet/api/system.object.gethashcode#system-object-gethashcode" target="_blank" rel="noopener noreferrer">GetHashCode</a></td><td>Serves as the default hash function.<br />(Inherited from <a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /></td><td><a href="https://learn.microsoft.com/dotnet/api/system.object.gettype#system-object-gettype" target="_blank" rel="noopener noreferrer">GetType</a></td><td>Gets the <a href="https://learn.microsoft.com/dotnet/api/system.type" target="_blank" rel="noopener noreferrer">Type</a> of the current instance.<br />(Inherited from <a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /></td><td><a href="2293899c-c7f5-d62f-61ff-1dc28f2ee76a.htm">Start(ElementId)</a></td><td>
   Starts an stairs edit mode for an existing Stairs element
</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /></td><td><a href="3cc137bd-4b9c-e0c8-f93a-14536a11bd18.htm">Start(ElementId, ElementId)</a></td><td>
   Creates a new empty stairs element with a default stairs type in the specified levels
   and then starts stairs edit mode and editing the new stairs.
</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /></td><td><a href="https://learn.microsoft.com/dotnet/api/system.object.tostring#system-object-tostring" target="_blank" rel="noopener noreferrer">ToString</a></td><td>Returns a string that represents the current object.<br />(Inherited from <a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>)</td></tr></table><a href="#PageHeader">Top</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDBC')" onkeypress="SectionExpandCollapse_CheckKey('IDBC', event)" tabindex="0"><img id="IDBCToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Remarks</span></div><div id="IDBCSection" class="collapsibleSection">
   Start/end of a StairsEditScope will start/end a transaction group. After a StairsEditScope is started, user can start transactions and edit the stairs.
   Individual transactions the user creates inside StairsEditScope will not appear in the undo menu.
   All transactions committed during the edit mode will be merged into a single one which will bear the given name passed into StairsEditScope constructor.
</div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDDC')" onkeypress="SectionExpandCollapse_CheckKey('IDDC', event)" tabindex="0"><img id="IDDCToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Example</span></div><div id="IDDCSection" class="collapsibleSection"><div id="IDADC" class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="IDADC_tab1" class="codeSnippetContainerTab"><a href="#" onclick="ChangeTab('IDADC','cs','1','4');return false;">C#</a></div><div id="IDADC_tab2" class="codeSnippetContainerTab"><a href="#" onclick="ChangeTab('IDADC','vb','2','4');return false;">VB</a></div><div id="IDADC_tab3" class="codeSnippetContainerTabPhantom"><a href="#" onclick="ChangeTab('IDADC','cpp','3','4');return false;">C++</a></div><div id="IDADC_tab4" class="codeSnippetContainerTabPhantom"><a href="#" onclick="ChangeTab('IDADC','fs','4','4');return false;">F#</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="IDADC_copyCode" href="#" class="copyCodeSnippet" onclick="CopyToClipboard('IDADC');return false;" title="Copy">Copy</a></div></div><div id="IDADC_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">private</span> ElementId CreateStairs(Document document, Level levelBottom, Level levelTop)
{
    ElementId newStairsId = <span class="highlight-keyword">null</span>;

    <span class="highlight-keyword">using</span> (StairsEditScope newStairsScope = <span class="highlight-keyword">new</span> StairsEditScope(document, <span class="highlight-literal">"New Stairs"</span>))
    {
        newStairsId = newStairsScope.Start(levelBottom.Id, levelTop.Id);

        <span class="highlight-keyword">using</span> (Transaction stairsTrans = <span class="highlight-keyword">new</span> Transaction(document, <span class="highlight-literal">"Add Runs and Landings to Stairs"</span>))
        {
            stairsTrans.Start();

            <span class="highlight-comment">// Create a sketched run for the stairs</span>
            IList&lt;Curve&gt; bdryCurves = <span class="highlight-keyword">new</span> List&lt;Curve&gt;();
            IList&lt;Curve&gt; riserCurves = <span class="highlight-keyword">new</span> List&lt;Curve&gt;();
            IList&lt;Curve&gt; pathCurves = <span class="highlight-keyword">new</span> List&lt;Curve&gt;();
            XYZ pnt1 = <span class="highlight-keyword">new</span> XYZ(<span class="highlight-number">0</span>, <span class="highlight-number">0</span>, <span class="highlight-number">0</span>);
            XYZ pnt2 = <span class="highlight-keyword">new</span> XYZ(<span class="highlight-number">15</span>, <span class="highlight-number">0</span>, <span class="highlight-number">0</span>);
            XYZ pnt3 = <span class="highlight-keyword">new</span> XYZ(<span class="highlight-number">0</span>, <span class="highlight-number">10</span>, <span class="highlight-number">0</span>);
            XYZ pnt4 = <span class="highlight-keyword">new</span> XYZ(<span class="highlight-number">15</span>, <span class="highlight-number">10</span>, <span class="highlight-number">0</span>);

            <span class="highlight-comment">// boundaries       </span>
            bdryCurves.Add(Line.CreateBound(pnt1, pnt2));
            bdryCurves.Add(Line.CreateBound(pnt3, pnt4));

            <span class="highlight-comment">// riser curves</span>
            <span class="highlight-keyword">const</span> <span class="highlight-keyword">int</span> riserNum = <span class="highlight-number">20</span>;
            <span class="highlight-keyword">for</span> (<span class="highlight-keyword">int</span> ii = <span class="highlight-number">0</span>; ii &lt;= riserNum; ii++)
            {
                XYZ end0 = (pnt1 + pnt2) * ii / (<span class="highlight-keyword">double</span>)riserNum;
                XYZ end1 = (pnt3 + pnt4) * ii / (<span class="highlight-keyword">double</span>)riserNum;
                XYZ end2 = <span class="highlight-keyword">new</span> XYZ(end1.X, <span class="highlight-number">10</span>, <span class="highlight-number">0</span>);
                riserCurves.Add(Line.CreateBound(end0, end2));
            }

            <span class="highlight-comment">//stairs path curves</span>
            XYZ pathEnd0 = (pnt1 + pnt3) / <span class="highlight-number">2.0</span>;
            XYZ pathEnd1 = (pnt2 + pnt4) / <span class="highlight-number">2.0</span>;
            pathCurves.Add(Line.CreateBound(pathEnd0, pathEnd1));

            StairsRun newRun1 = StairsRun.CreateSketchedRun(document, newStairsId, levelBottom.Elevation, bdryCurves, riserCurves, pathCurves);

            <span class="highlight-comment">// Add a straight run</span>
            Line locationLine = Line.CreateBound(<span class="highlight-keyword">new</span> XYZ(<span class="highlight-number">20</span>, <span class="highlight-number">-5</span>, newRun1.TopElevation), <span class="highlight-keyword">new</span> XYZ(<span class="highlight-number">35</span>, <span class="highlight-number">-5</span>, newRun1.TopElevation));
            StairsRun newRun2 = StairsRun.CreateStraightRun(document, newStairsId, locationLine, StairsRunJustification.Center);
            newRun2.ActualRunWidth = <span class="highlight-number">10</span>;

            <span class="highlight-comment">// Add a landing between the runs</span>
            CurveLoop landingLoop = <span class="highlight-keyword">new</span> CurveLoop();
            XYZ p1 = <span class="highlight-keyword">new</span> XYZ(<span class="highlight-number">15</span>, <span class="highlight-number">10</span>, <span class="highlight-number">0</span>); 
            XYZ p2 = <span class="highlight-keyword">new</span> XYZ(<span class="highlight-number">20</span>, <span class="highlight-number">10</span>, <span class="highlight-number">0</span>);
            XYZ p3 = <span class="highlight-keyword">new</span> XYZ(<span class="highlight-number">20</span>, <span class="highlight-number">-10</span>, <span class="highlight-number">0</span>);
            XYZ p4 = <span class="highlight-keyword">new</span> XYZ(<span class="highlight-number">15</span>, <span class="highlight-number">-10</span>, <span class="highlight-number">0</span>);
            Line curve_1 = Line.CreateBound(p1, p2);
            Line curve_2 = Line.CreateBound(p2, p3);
            Line curve_3 = Line.CreateBound(p3, p4);
            Line curve_4 = Line.CreateBound(p4, p1);

            landingLoop.Append(curve_1);
            landingLoop.Append(curve_2);
            landingLoop.Append(curve_3);
            landingLoop.Append(curve_4);
            StairsLanding newLanding = StairsLanding.CreateSketchedLanding(document, newStairsId, landingLoop, newRun1.TopElevation);

            stairsTrans.Commit();
        }
        <span class="highlight-comment">// A failure preprocessor is to handle possible failures during the edit mode commitment process.</span>
        newStairsScope.Commit(<span class="highlight-keyword">new</span> StairsFailurePreprocessor());
    }

    <span class="highlight-keyword">return</span> newStairsId;
}</pre></div><div id="IDADC_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="highlight-keyword">Private</span> <span class="highlight-keyword">Function</span> CreateStairs(document <span class="highlight-keyword">As</span> Document, levelBottom <span class="highlight-keyword">As</span> Level, levelTop <span class="highlight-keyword">As</span> Level) <span class="highlight-keyword">As</span> ElementId
    <span class="highlight-keyword">Dim</span> newStairsId <span class="highlight-keyword">As</span> ElementId = <span class="highlight-keyword">Nothing</span>

    <span class="highlight-keyword">Using</span> newStairsScope <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> StairsEditScope(document, <span class="highlight-literal">"New Stairs"</span>)
        newStairsId = newStairsScope.Start(levelBottom.Id, levelTop.Id)

        <span class="highlight-keyword">Using</span> stairsTrans <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> Transaction(document, <span class="highlight-literal">"Add Runs and Landings to Stairs"</span>)
            stairsTrans.Start()

            <span class="highlight-comment">' Create a sketched run for the stairs</span>
            <span class="highlight-keyword">Dim</span> bdryCurves <span class="highlight-keyword">As</span> IList(<span class="highlight-keyword">Of</span> Curve) = <span class="highlight-keyword">New</span> List(<span class="highlight-keyword">Of</span> Curve)()
            <span class="highlight-keyword">Dim</span> riserCurves <span class="highlight-keyword">As</span> IList(<span class="highlight-keyword">Of</span> Curve) = <span class="highlight-keyword">New</span> List(<span class="highlight-keyword">Of</span> Curve)()
            <span class="highlight-keyword">Dim</span> pathCurves <span class="highlight-keyword">As</span> IList(<span class="highlight-keyword">Of</span> Curve) = <span class="highlight-keyword">New</span> List(<span class="highlight-keyword">Of</span> Curve)()
            <span class="highlight-keyword">Dim</span> pnt1 <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> XYZ(<span class="highlight-number">0</span>, <span class="highlight-number">0</span>, <span class="highlight-number">0</span>)
            <span class="highlight-keyword">Dim</span> pnt2 <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> XYZ(<span class="highlight-number">15</span>, <span class="highlight-number">0</span>, <span class="highlight-number">0</span>)
            <span class="highlight-keyword">Dim</span> pnt3 <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> XYZ(<span class="highlight-number">0</span>, <span class="highlight-number">10</span>, <span class="highlight-number">0</span>)
            <span class="highlight-keyword">Dim</span> pnt4 <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> XYZ(<span class="highlight-number">15</span>, <span class="highlight-number">10</span>, <span class="highlight-number">0</span>)

            <span class="highlight-comment">' boundaries       </span>
            bdryCurves.Add(Line.CreateBound(pnt1, pnt2))
            bdryCurves.Add(Line.CreateBound(pnt3, pnt4))

            <span class="highlight-comment">' riser curves</span>
            <span class="highlight-keyword">Const</span> riserNum <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">20</span>
            <span class="highlight-keyword">For</span> ii <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">0</span> <span class="highlight-keyword">To</span> riserNum
                <span class="highlight-keyword">Dim</span> end0 <span class="highlight-keyword">As</span> XYZ = (pnt1 + pnt2) * ii / <span class="highlight-keyword">CDbl</span>(riserNum)
                <span class="highlight-keyword">Dim</span> end1 <span class="highlight-keyword">As</span> XYZ = (pnt3 + pnt4) * ii / <span class="highlight-keyword">CDbl</span>(riserNum)
                <span class="highlight-keyword">Dim</span> end2 <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> XYZ(end1.X, <span class="highlight-number">10</span>, <span class="highlight-number">0</span>)
                riserCurves.Add(Line.CreateBound(end0, end2))
            <span class="highlight-keyword">Next</span>

            <span class="highlight-comment">'stairs path curves</span>
            <span class="highlight-keyword">Dim</span> pathEnd0 <span class="highlight-keyword">As</span> XYZ = (pnt1 + pnt3) / <span class="highlight-number">2.0</span>
            <span class="highlight-keyword">Dim</span> pathEnd1 <span class="highlight-keyword">As</span> XYZ = (pnt2 + pnt4) / <span class="highlight-number">2.0</span>
            pathCurves.Add(Line.CreateBound(pathEnd0, pathEnd1))

            <span class="highlight-keyword">Dim</span> newRun1 <span class="highlight-keyword">As</span> StairsRun = StairsRun.CreateSketchedRun(document, newStairsId, levelBottom.Elevation, bdryCurves, riserCurves, pathCurves)

            <span class="highlight-comment">' Add a straight run</span>
            <span class="highlight-keyword">Dim</span> locationLine <span class="highlight-keyword">As</span> Line = Line.CreateBound(<span class="highlight-keyword">New</span> XYZ(<span class="highlight-number">20</span>, <span class="highlight-number">-5</span>, newRun1.TopElevation), <span class="highlight-keyword">New</span> XYZ(<span class="highlight-number">35</span>, <span class="highlight-number">-5</span>, newRun1.TopElevation))
            <span class="highlight-keyword">Dim</span> newRun2 <span class="highlight-keyword">As</span> StairsRun = StairsRun.CreateStraightRun(document, newStairsId, locationLine, StairsRunJustification.Center)
            newRun2.ActualRunWidth = <span class="highlight-number">10</span>

            <span class="highlight-comment">' Add a landing between the runs</span>
            <span class="highlight-keyword">Dim</span> landingLoop <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> CurveLoop()
            <span class="highlight-keyword">Dim</span> p1 <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> XYZ(<span class="highlight-number">15</span>, <span class="highlight-number">10</span>, <span class="highlight-number">0</span>)
            <span class="highlight-keyword">Dim</span> p2 <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> XYZ(<span class="highlight-number">20</span>, <span class="highlight-number">10</span>, <span class="highlight-number">0</span>)
            <span class="highlight-keyword">Dim</span> p3 <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> XYZ(<span class="highlight-number">20</span>, <span class="highlight-number">-10</span>, <span class="highlight-number">0</span>)
            <span class="highlight-keyword">Dim</span> p4 <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> XYZ(<span class="highlight-number">15</span>, <span class="highlight-number">-10</span>, <span class="highlight-number">0</span>)
            <span class="highlight-keyword">Dim</span> curve_1 <span class="highlight-keyword">As</span> Line = Line.CreateBound(p1, p2)
            <span class="highlight-keyword">Dim</span> curve_2 <span class="highlight-keyword">As</span> Line = Line.CreateBound(p2, p3)
            <span class="highlight-keyword">Dim</span> curve_3 <span class="highlight-keyword">As</span> Line = Line.CreateBound(p3, p4)
            <span class="highlight-keyword">Dim</span> curve_4 <span class="highlight-keyword">As</span> Line = Line.CreateBound(p4, p1)

            landingLoop.Append(curve_1)
            landingLoop.Append(curve_2)
            landingLoop.Append(curve_3)
            landingLoop.Append(curve_4)
            <span class="highlight-keyword">Dim</span> newLanding <span class="highlight-keyword">As</span> StairsLanding = StairsLanding.CreateSketchedLanding(document, newStairsId, landingLoop, newRun1.TopElevation)

            stairsTrans.Commit()
        <span class="highlight-keyword">End</span> <span class="highlight-keyword">Using</span>
        <span class="highlight-comment">' A failure preprocessor is to handle possible failures during the edit mode commitment process.</span>
        newStairsScope.Commit(<span class="highlight-keyword">New</span> StairsFailurePreprocessor())
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Using</span>

    <span class="highlight-keyword">Return</span> newStairsId
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Function</span></pre></div><div id="IDADC_code_Div3" class="codeSnippetContainerCode" style="display: none"><p>No code example is currently available or this language may not be supported.</p></div><div id="IDADC_code_Div4" class="codeSnippetContainerCode" style="display: none"><p>No code example is currently available or this language may not be supported.</p></div></div></div></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('seeAlso')" onkeypress="SectionExpandCollapse_CheckKey('seeAlso', event)" tabindex="0"><img id="seeAlsoToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />See Also</span></div><div id="seeAlsoSection" class="collapsibleSection"><h4>Reference</h4><div><a href="87546ba7-461b-c646-cbb1-2cb8f5bff8b2.htm">Autodesk.Revit.DB Namespace</a></div></div></div></div>
        </div></body></html>