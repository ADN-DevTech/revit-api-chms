<html><head><title>LoadUsage.Create Method</title><meta name="Title" content="Create Method" /><meta name="Microsoft.Help.Id" content="M:Autodesk.Revit.DB.Structure.LoadUsage.Create(Autodesk.Revit.DB.Document,System.String)" /><meta name="Microsoft.Help.ContentType" content="Reference" /><meta name="System.Keywords" content="LoadUsage.Create method" /><meta name="System.Keywords" content="Create method" /><meta name="Microsoft.Help.F1" content="Autodesk.Revit.DB.Structure.LoadUsage.Create" /><meta name="Microsoft.Help.F1" content="LoadUsage.Create" /><meta name="Microsoft.Help.F1" content="Create" /><meta name="container" content="Autodesk.Revit.DB.Structure" /><meta name="file" content="32ab758e-72e1-b024-3c9c-a21b7ed2d575" /><meta name="guid" content="32ab758e-72e1-b024-3c9c-a21b7ed2d575" /><meta name="Microsoft.Help.Category" content="CSharp" /><meta name="Microsoft.Help.Category" content="VB" /><meta name="Description" content="Creates a new LoadUsage." /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /></head><body onload="SetDefaultLanguage('cs');"><div class="pageBody"><div id="TopicContent" class="topicContent"><table class="titleTable"><tr><td class="titleColumn"><h1>Load<wbr />Usage<span id="LST61704852_0" data-languageSpecificText="cpp=::|nu=."></span>Create Method</h1></td></tr></table><div class="summary">
   Creates a new LoadUsage.
</div><br /><strong>Namespace:</strong> <a href="d586b341-f687-9d90-e96d-255806b7d4fc.htm">Autodesk.Revit.DB.Structure</a><br /><strong>Assembly:</strong> RevitAPI (in RevitAPI.dll) Version: 25.0.0.0 (25.0.0.0)<div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDB')" onkeypress="SectionExpandCollapse_CheckKey('IDB', event)" tabindex="0"><img id="IDBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Syntax</span></div><div id="IDBSection" class="collapsibleSection"><div id="IDAB" class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="IDAB_tab1" class="codeSnippetContainerTab"><a href="#" onclick="ChangeTab('IDAB','cs','1','4');return false;">C#</a></div><div id="IDAB_tab2" class="codeSnippetContainerTab"><a href="#" onclick="ChangeTab('IDAB','vb','2','4');return false;">VB</a></div><div id="IDAB_tab3" class="codeSnippetContainerTab"><a href="#" onclick="ChangeTab('IDAB','cpp','3','4');return false;">C++</a></div><div id="IDAB_tab4" class="codeSnippetContainerTab"><a href="#" onclick="ChangeTab('IDAB','fs','4','4');return false;">F#</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="IDAB_copyCode" href="#" class="copyCodeSnippet" onclick="CopyToClipboard('IDAB');return false;" title="Copy">Copy</a></div></div><div id="IDAB_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">static</span> <span class="identifier">LoadUsage</span> <span class="identifier">Create</span>(
	<span class="identifier">Document</span> <span class="parameter">document</span>,
	<span class="identifier">string</span> <span class="parameter">name</span>
)</pre></div><div id="IDAB_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">Public</span> <span class="keyword">Shared</span> <span class="keyword">Function</span> <span class="identifier">Create</span> ( 
	<span class="parameter">document</span> <span class="keyword">As</span> <span class="identifier">Document</span>,
	<span class="parameter">name</span> <span class="keyword">As</span> <span class="identifier">String</span>
) <span class="keyword">As</span> <span class="identifier">LoadUsage</span></pre></div><div id="IDAB_code_Div3" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">public</span>:
<span class="keyword">static</span> <span class="identifier">LoadUsage</span>^ <span class="identifier">Create</span>(
	<span class="identifier">Document</span>^ <span class="parameter">document</span>, 
	<span class="identifier">String</span>^ <span class="parameter">name</span>
)</pre></div><div id="IDAB_code_Div4" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">static</span> <span class="keyword">member</span> <span class="identifier">Create</span> : 
        <span class="parameter">document</span> : <span class="identifier">Document</span> * 
        <span class="parameter">name</span> : <span class="identifier">string</span> <span class="keyword">-&gt;</span> <span class="identifier">LoadUsage</span> </pre></div></div></div><h4>Parameters</h4><dl><dt class="has-text-weight-normal"><span class="parameter">document</span>  <a href="db03274b-a107-aa32-9034-f3e0df4bb1ec.htm">Document</a></dt><dd>
   The Document to which new load usage element will be added.
</dd><dt class="has-text-weight-normal"><span class="parameter">name</span>  <a href="https://learn.microsoft.com/dotnet/api/system.string" target="_blank" rel="noopener noreferrer">String</a></dt><dd>
   The name of the load usage.
</dd></dl><h4>Return Value</h4><a href="0b44bcfe-4c5e-85c2-adb5-aeb6ad097ee6.htm">LoadUsage</a><br />
   The newly created load usage element if successful, <span class="keyword"><span id="LST61704852_1" data-languageSpecificText="cpp=nullptr|vb=Nothing|nu=null"></span></span> otherwise.
</div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDEC')" onkeypress="SectionExpandCollapse_CheckKey('IDEC', event)" tabindex="0"><img id="IDECToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Exceptions</span></div><div id="IDECSection" class="collapsibleSection"><table><tr><th>Exception</th><th>Condition</th></tr><tr><td><a href="2e6e4206-97a8-dd4b-df5d-4269f4bb6088.htm">ArgumentException</a></td><td>
   The given name is not unique
</td></tr><tr><td><a href="631e1424-60f4-929b-4e52-dda9dcd26316.htm">ArgumentNullException</a></td><td>
   A non-optional argument was null
</td></tr></table></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDHC')" onkeypress="SectionExpandCollapse_CheckKey('IDHC', event)" tabindex="0"><img id="IDHCToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Example</span></div><div id="IDHCSection" class="collapsibleSection"><div id="IDAHC" class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="IDAHC_tab1" class="codeSnippetContainerTab"><a href="#" onclick="ChangeTab('IDAHC','cs','1','4');return false;">C#</a></div><div id="IDAHC_tab2" class="codeSnippetContainerTab"><a href="#" onclick="ChangeTab('IDAHC','vb','2','4');return false;">VB</a></div><div id="IDAHC_tab3" class="codeSnippetContainerTabPhantom"><a href="#" onclick="ChangeTab('IDAHC','cpp','3','4');return false;">C++</a></div><div id="IDAHC_tab4" class="codeSnippetContainerTabPhantom"><a href="#" onclick="ChangeTab('IDAHC','fs','4','4');return false;">F#</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="IDAHC_copyCode" href="#" class="copyCodeSnippet" onclick="CopyToClipboard('IDAHC');return false;" title="Copy">Copy</a></div></div><div id="IDAHC_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-preprocessor">#region</span> Autodesk.Revit.DB.Structure.LoadComponent.<span class="highlight-preprocessor">#ctor</span>(Autodesk.Revit.DB.ElementId,System.Double)
<span class="highlight-preprocessor">#region</span> Autodesk.Revit.DB.Structure.LoadCombination.SetComponents(System.Collections.Generic.IList{Autodesk.Revit.DB.Structure.LoadComponent})
<span class="highlight-preprocessor">#region</span> Autodesk.Revit.DB.Structure.LoadCombination.SetUsageIds(System.Collections.Generic.IList{Autodesk.Revit.DB.ElementId})
LoadCombination CreateLoadCombinationLoadCaseLoadUsageLoadNatureAndLoadComponent(Document document)
{
    <span class="highlight-comment">// Create a new load combination</span>
    LoadCombination loadCombination = LoadCombination.Create(document, <span class="highlight-literal">"DL1 + RAIN1"</span>, LoadCombinationType.Combination, LoadCombinationState.Ultimate);
    <span class="highlight-keyword">if</span> (loadCombination == <span class="highlight-keyword">null</span>)
       <span class="highlight-keyword">throw</span> <span class="highlight-keyword">new</span> Exception(<span class="highlight-literal">"Create new load combination failed."</span>);

    <span class="highlight-comment">// Get all existing LoadCase</span>
    FilteredElementCollector collector = <span class="highlight-keyword">new</span> FilteredElementCollector(document);
    ICollection&lt;Element&gt; collection = collector.OfClass(<span class="highlight-keyword">typeof</span>(LoadCase)).ToElements();

    <span class="highlight-comment">// Find LoadCase "DL1"</span>
    LoadCase case1 = <span class="highlight-keyword">null</span>;
    <span class="highlight-keyword">foreach</span> (Element e <span class="highlight-keyword">in</span> collection)
    {
       LoadCase loadCase = e <span class="highlight-keyword">as</span> LoadCase;
       <span class="highlight-keyword">if</span> (loadCase.Name == <span class="highlight-literal">"DL1"</span>)
       {
          case1 = loadCase;
          <span class="highlight-keyword">break</span>;
       }
    }

    <span class="highlight-comment">// Get all existing LoadNature</span>
    collector = <span class="highlight-keyword">new</span> FilteredElementCollector(document);
    collection = collector.OfClass(<span class="highlight-keyword">typeof</span>(LoadNature)).ToElements();

    <span class="highlight-comment">// Find LoadNature "Dead"</span>
    LoadNature nature1 = <span class="highlight-keyword">null</span>;
    <span class="highlight-keyword">foreach</span> (Element e <span class="highlight-keyword">in</span> collection)
    {
       LoadNature loadNature = e <span class="highlight-keyword">as</span> LoadNature;
       <span class="highlight-keyword">if</span> (loadNature.Name == <span class="highlight-literal">"Dead"</span>)
       {
          nature1 = loadNature;
          <span class="highlight-keyword">break</span>;
       }
    }

    <span class="highlight-comment">// Create LoadNature "Dead" if not exist</span>
    <span class="highlight-keyword">if</span> (nature1 == <span class="highlight-keyword">null</span>)
       nature1 = LoadNature.Create(document, <span class="highlight-literal">"Dead"</span>);

    <span class="highlight-comment">// Create LoadCase "DL1" if not exist</span>
    <span class="highlight-keyword">if</span> (case1 == <span class="highlight-keyword">null</span>)
       case1 = LoadCase.Create(document, <span class="highlight-literal">"DL1"</span>, nature1.Id, LoadCaseCategory.Dead);

    <span class="highlight-comment">// Create LoadNature "Rain"</span>
    LoadNature nature2 = LoadNature.Create(document, <span class="highlight-literal">"Rain"</span>);
    <span class="highlight-keyword">if</span> (nature2 == <span class="highlight-keyword">null</span>)
       <span class="highlight-keyword">throw</span> <span class="highlight-keyword">new</span> Exception(<span class="highlight-literal">"Create new load nature failed."</span>);

    <span class="highlight-comment">// Create LoadCase "RAIN1"</span>
    LoadCase case2 = LoadCase.Create(document, <span class="highlight-literal">"RAIN1"</span>, nature2.Id, LoadCaseCategory.Snow);
    <span class="highlight-keyword">if</span> (case1 == <span class="highlight-keyword">null</span> || case2 == <span class="highlight-keyword">null</span>)
       <span class="highlight-keyword">throw</span> <span class="highlight-keyword">new</span> Exception(<span class="highlight-literal">"Create new load case failed."</span>);

    <span class="highlight-comment">// Create LoadComponents - they consist of LoadCases or nested LoadCombination and Factors</span>
    List&lt;LoadComponent&gt; components = <span class="highlight-keyword">new</span> List&lt;LoadComponent&gt;();
    components.Add(<span class="highlight-keyword">new</span> LoadComponent(case1.Id, <span class="highlight-number">2.0</span>));
    components.Add(<span class="highlight-keyword">new</span> LoadComponent(case2.Id, <span class="highlight-number">1.5</span>));

    <span class="highlight-comment">// Add components to combination</span>
    loadCombination.SetComponents(components);

    <span class="highlight-comment">// Create LoadUsages</span>
    LoadUsage usage1 = LoadUsage.Create(document, <span class="highlight-literal">"Frequent"</span>);
    LoadUsage usage2 = LoadUsage.Create(document, <span class="highlight-literal">"Rare"</span>);

    <span class="highlight-keyword">if</span> (usage1 == <span class="highlight-keyword">null</span> || usage2 == <span class="highlight-keyword">null</span>)
       <span class="highlight-keyword">throw</span> <span class="highlight-keyword">new</span> Exception(<span class="highlight-literal">"Create new load usage failed."</span>);

    <span class="highlight-comment">// Add load usages to combination</span>
    loadCombination.SetUsageIds(<span class="highlight-keyword">new</span> List&lt;ElementId&gt;() {usage1.Id, usage2.Id});

    <span class="highlight-comment">// Give the user some information</span>
    TaskDialog.Show(<span class="highlight-literal">"Revit"</span>, <span class="highlight-keyword">string</span>.Format(<span class="highlight-literal">"Load Combination ID='{0}' created successfully."</span>, loadCombination.Id.ToString()));

    <span class="highlight-keyword">return</span> loadCombination;
}
<span class="highlight-preprocessor">#endregion</span>
<span class="highlight-preprocessor">#endregion</span>
<span class="highlight-preprocessor">#endregion</span></pre></div><div id="IDAHC_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="highlight-preprocessor">#Region</span> <span class="highlight-literal">"Autodesk.Revit.DB.Structure.LoadComponent.#ctor(Autodesk.Revit.DB.ElementId,System.Double)"</span>
<span class="highlight-preprocessor">#Region</span> <span class="highlight-literal">"Autodesk.Revit.DB.Structure.LoadCombination.SetComponents(System.Collections.Generic.IList{Autodesk.Revit.DB.Structure.LoadComponent})"</span>
<span class="highlight-preprocessor">#Region</span> <span class="highlight-literal">"Autodesk.Revit.DB.Structure.LoadCombination.SetUsageIds(System.Collections.Generic.IList{Autodesk.Revit.DB.ElementId})"</span>
        <span class="highlight-keyword">Private</span> <span class="highlight-keyword">Function</span> CreateLoadCombinationLoadCaseLoadUsageLoadNatureAndLoadComponent(document <span class="highlight-keyword">As</span> Document) <span class="highlight-keyword">As</span> LoadCombination
            <span class="highlight-comment">' Create a new load combination</span>
            <span class="highlight-keyword">Dim</span> loadCombination__1 <span class="highlight-keyword">As</span> LoadCombination = LoadCombination.Create(document, <span class="highlight-literal">"DL1 + RAIN1"</span>, LoadCombinationType.Combination, LoadCombinationState.Ultimate)
            <span class="highlight-keyword">If</span> loadCombination__1 <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
                <span class="highlight-keyword">Throw</span> <span class="highlight-keyword">New</span> Exception(<span class="highlight-literal">"Create new load combination failed."</span>)
            <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

            <span class="highlight-comment">' Get all existing LoadCase</span>
            <span class="highlight-keyword">Dim</span> collector <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> FilteredElementCollector(document)
            <span class="highlight-keyword">Dim</span> collection <span class="highlight-keyword">As</span> ICollection(<span class="highlight-keyword">Of</span> Element) = collector.OfClass(<span class="highlight-keyword">GetType</span>(LoadCase)).ToElements()

            <span class="highlight-comment">' Find LoadCase "DL1"</span>
            <span class="highlight-keyword">Dim</span> case1 <span class="highlight-keyword">As</span> LoadCase = <span class="highlight-keyword">Nothing</span>
            <span class="highlight-keyword">For</span> <span class="highlight-keyword">Each</span> e <span class="highlight-keyword">As</span> Element <span class="highlight-keyword">In</span> collection
                <span class="highlight-keyword">Dim</span> loadCase__2 <span class="highlight-keyword">As</span> LoadCase = <span class="highlight-keyword">TryCast</span>(e, LoadCase)
                <span class="highlight-keyword">If</span> loadCase__2.Name = <span class="highlight-literal">"DL1"</span> <span class="highlight-keyword">Then</span>
                    case1 = loadCase__2
                    <span class="highlight-keyword">Exit</span> <span class="highlight-keyword">For</span>
                <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
            <span class="highlight-keyword">Next</span>

            <span class="highlight-comment">' Get all existing LoadNature</span>
            collector = <span class="highlight-keyword">New</span> FilteredElementCollector(document)
            collection = collector.OfClass(<span class="highlight-keyword">GetType</span>(LoadNature)).ToElements()

            <span class="highlight-comment">' Find LoadNature "Dead"</span>
            <span class="highlight-keyword">Dim</span> nature1 <span class="highlight-keyword">As</span> LoadNature = <span class="highlight-keyword">Nothing</span>
            <span class="highlight-keyword">For</span> <span class="highlight-keyword">Each</span> e <span class="highlight-keyword">As</span> Element <span class="highlight-keyword">In</span> collection
                <span class="highlight-keyword">Dim</span> loadNature__3 <span class="highlight-keyword">As</span> LoadNature = <span class="highlight-keyword">TryCast</span>(e, LoadNature)
                <span class="highlight-keyword">If</span> loadNature__3.Name = <span class="highlight-literal">"Dead"</span> <span class="highlight-keyword">Then</span>
                    nature1 = loadNature__3
                    <span class="highlight-keyword">Exit</span> <span class="highlight-keyword">For</span>
                <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
            <span class="highlight-keyword">Next</span>

            <span class="highlight-comment">' Create LoadNature "Dead" if not exist</span>
            <span class="highlight-keyword">If</span> nature1 <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
                nature1 = LoadNature.Create(document, <span class="highlight-literal">"Dead"</span>)
            <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

            <span class="highlight-comment">' Create LoadCase "DL1" if not exist</span>
            <span class="highlight-keyword">If</span> case1 <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
                case1 = LoadCase.Create(document, <span class="highlight-literal">"DL1"</span>, nature1.Id, LoadCaseCategory.Dead)
            <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

            <span class="highlight-comment">' Create LoadNature "Rain"</span>
            <span class="highlight-keyword">Dim</span> nature2 <span class="highlight-keyword">As</span> LoadNature = LoadNature.Create(document, <span class="highlight-literal">"Rain"</span>)
            <span class="highlight-keyword">If</span> nature2 <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
                <span class="highlight-keyword">Throw</span> <span class="highlight-keyword">New</span> Exception(<span class="highlight-literal">"Create new load nature failed."</span>)
            <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

            <span class="highlight-comment">' Create LoadCase "RAIN1"</span>
            <span class="highlight-keyword">Dim</span> case2 <span class="highlight-keyword">As</span> LoadCase = LoadCase.Create(document, <span class="highlight-literal">"RAIN1"</span>, nature2.Id, LoadCaseCategory.Snow)
            <span class="highlight-keyword">If</span> case1 <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">OrElse</span> case2 <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
                <span class="highlight-keyword">Throw</span> <span class="highlight-keyword">New</span> Exception(<span class="highlight-literal">"Create new load case failed."</span>)
            <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

            <span class="highlight-comment">' Create LoadComponents - they consist of LoadCases or nested LoadCombination and Factors</span>
            <span class="highlight-keyword">Dim</span> components <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> List(<span class="highlight-keyword">Of</span> LoadComponent)()
            components.Add(<span class="highlight-keyword">New</span> LoadComponent(case1.Id, <span class="highlight-number">2.0</span>))
            components.Add(<span class="highlight-keyword">New</span> LoadComponent(case2.Id, <span class="highlight-number">1.5</span>))

            <span class="highlight-comment">' Add components to combination</span>
            loadCombination__1.SetComponents(components)

            <span class="highlight-comment">' Create LoadUsages</span>
            <span class="highlight-keyword">Dim</span> usage1 <span class="highlight-keyword">As</span> LoadUsage = LoadUsage.Create(document, <span class="highlight-literal">"Frequent"</span>)
            <span class="highlight-keyword">Dim</span> usage2 <span class="highlight-keyword">As</span> LoadUsage = LoadUsage.Create(document, <span class="highlight-literal">"Rare"</span>)

            <span class="highlight-keyword">If</span> usage1 <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">OrElse</span> usage2 <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
                <span class="highlight-keyword">Throw</span> <span class="highlight-keyword">New</span> Exception(<span class="highlight-literal">"Create new load usage failed."</span>)
            <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

            <span class="highlight-comment">' Add load usages to combination</span>
            loadCombination__1.SetUsageIds(<span class="highlight-keyword">New</span> List(<span class="highlight-keyword">Of</span> ElementId)() From {
                usage1.Id,
                usage2.Id
            })

            <span class="highlight-comment">' Give the user some information</span>
            TaskDialog.Show(<span class="highlight-literal">"Revit"</span>, <span class="highlight-keyword">String</span>.Format(<span class="highlight-comment">"Load Combination ID='{0}' created successfully."</span>, loadCombination__1.Id.ToString()))

            <span class="highlight-keyword">Return</span> loadCombination__1
        <span class="highlight-keyword">End</span> <span class="highlight-keyword">Function</span>
<span class="highlight-preprocessor">#End Region</span>
<span class="highlight-preprocessor">#End Region</span>
<span class="highlight-preprocessor">#End Region</span></pre></div><div id="IDAHC_code_Div3" class="codeSnippetContainerCode" style="display: none"><p>No code example is currently available or this language may not be supported.</p></div><div id="IDAHC_code_Div4" class="codeSnippetContainerCode" style="display: none"><p>No code example is currently available or this language may not be supported.</p></div></div></div></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('seeAlso')" onkeypress="SectionExpandCollapse_CheckKey('seeAlso', event)" tabindex="0"><img id="seeAlsoToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />See Also</span></div><div id="seeAlsoSection" class="collapsibleSection"><h4>Reference</h4><div><a href="0b44bcfe-4c5e-85c2-adb5-aeb6ad097ee6.htm">LoadUsage Class</a></div><div><a href="d586b341-f687-9d90-e96d-255806b7d4fc.htm">Autodesk.Revit.DB.Structure Namespace</a></div></div></div></div>
        </div></body></html>