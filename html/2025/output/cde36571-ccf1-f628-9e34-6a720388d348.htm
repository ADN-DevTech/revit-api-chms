<html><head><title>IDockablePaneProvider Interface</title><meta name="Title" content="IDockablePaneProvider Interface" /><meta name="Microsoft.Help.Id" content="T:Autodesk.Revit.UI.IDockablePaneProvider" /><meta name="Microsoft.Help.ContentType" content="Reference" /><meta name="System.Keywords" content="Autodesk.Revit.UI.IDockablePaneProvider interface" /><meta name="System.Keywords" content="IDockablePaneProvider interface" /><meta name="Microsoft.Help.F1" content="Autodesk.Revit.UI.IDockablePaneProvider" /><meta name="Microsoft.Help.F1" content="IDockablePaneProvider" /><meta name="container" content="Autodesk.Revit.UI" /><meta name="file" content="cde36571-ccf1-f628-9e34-6a720388d348" /><meta name="guid" content="cde36571-ccf1-f628-9e34-6a720388d348" /><meta name="Microsoft.Help.Category" content="CSharp" /><meta name="Microsoft.Help.Category" content="VB" /><meta name="Description" content="Interface that the Revit UI will call during initialization of the user interface to gather information about add-in dockable pane windows." /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /></head><body onload="SetDefaultLanguage('cs');"><div class="pageBody"><div id="TopicContent" class="topicContent"><table class="titleTable"><tr><td class="titleColumn"><h1>IDockable<wbr />Pane<wbr />Provider Interface</h1></td></tr></table><div class="summary">
   Interface that the Revit UI will call during initialization of the user interface to gather information about add-in dockable pane windows.
</div><br /><strong>Namespace:</strong> <a href="e86fd90a-8957-02a6-da7f-ced248966e3e.htm">Autodesk.Revit.UI</a><br /><strong>Assembly:</strong> RevitAPIUI (in RevitAPIUI.dll) Version: 25.0.0.0 (25.0.0.0)<div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDB')" onkeypress="SectionExpandCollapse_CheckKey('IDB', event)" tabindex="0"><img id="IDBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Syntax</span></div><div id="IDBSection" class="collapsibleSection"><div id="IDAB" class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="IDAB_tab1" class="codeSnippetContainerTab"><a href="#" onclick="ChangeTab('IDAB','cs','1','4');return false;">C#</a></div><div id="IDAB_tab2" class="codeSnippetContainerTab"><a href="#" onclick="ChangeTab('IDAB','vb','2','4');return false;">VB</a></div><div id="IDAB_tab3" class="codeSnippetContainerTab"><a href="#" onclick="ChangeTab('IDAB','cpp','3','4');return false;">C++</a></div><div id="IDAB_tab4" class="codeSnippetContainerTab"><a href="#" onclick="ChangeTab('IDAB','fs','4','4');return false;">F#</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="IDAB_copyCode" href="#" class="copyCodeSnippet" onclick="CopyToClipboard('IDAB');return false;" title="Copy">Copy</a></div></div><div id="IDAB_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="identifier">IDockablePaneProvider</span></pre></div><div id="IDAB_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">Public</span> <span class="keyword">Interface</span> <span class="identifier">IDockablePaneProvider</span></pre></div><div id="IDAB_code_Div3" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">interface class</span> <span class="identifier">IDockablePaneProvider</span></pre></div><div id="IDAB_code_Div4" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">type</span> <span class="identifier">IDockablePaneProvider</span> = <span class="keyword">interface</span> <span class="keyword">end</span></pre></div></div></div></div><p>The <span class="selflink">IDockablePaneProvider</span> type exposes the following members.</p><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDADA')" onkeypress="SectionExpandCollapse_CheckKey('IDADA', event)" tabindex="0"><img id="IDADAToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Methods</span></div><div id="IDADASection" class="collapsibleSection"><table id="MethodList" class="members"><tr><th class="iconColumn"> </th><th>Name</th><th>Description</th></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /></td><td><a href="c0b6c6b7-6827-a788-1f19-e02ed3423db9.htm">SetupDockablePane</a></td><td>
   Method called during initialization of the user interface to gather information about a dockable pane window.
</td></tr></table><a href="#PageHeader">Top</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDCC')" onkeypress="SectionExpandCollapse_CheckKey('IDCC', event)" tabindex="0"><img id="IDCCToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Example</span></div><div id="IDCCSection" class="collapsibleSection"><div id="IDACC" class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="IDACC_tab1" class="codeSnippetContainerTab"><a href="#" onclick="ChangeTab('IDACC','cs','1','4');return false;">C#</a></div><div id="IDACC_tab2" class="codeSnippetContainerTab"><a href="#" onclick="ChangeTab('IDACC','vb','2','4');return false;">VB</a></div><div id="IDACC_tab3" class="codeSnippetContainerTabPhantom"><a href="#" onclick="ChangeTab('IDACC','cpp','3','4');return false;">C++</a></div><div id="IDACC_tab4" class="codeSnippetContainerTabPhantom"><a href="#" onclick="ChangeTab('IDACC','fs','4','4');return false;">F#</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="IDACC_copyCode" href="#" class="copyCodeSnippet" onclick="CopyToClipboard('IDACC');return false;" title="Copy">Copy</a></div></div><div id="IDACC_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-comment">// </span>
<span class="highlight-comment">// Provider class called by Revit to provide information about the pane</span>
<span class="highlight-comment">// to embed.</span>
<span class="highlight-comment">// </span>
<span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> PaneProvider : IDockablePaneProvider
{
   <span class="highlight-keyword">public</span> <span class="highlight-keyword">void</span> SetupDockablePane(DockablePaneProviderData data)
   {
      <span class="highlight-comment">// </span>
      <span class="highlight-comment">// SetupDockablePane is called to collect the properties for your pane</span>
      <span class="highlight-comment">// including the WPF FrameworkElement used for your pane.</span>
      <span class="highlight-comment">// </span>
      <span class="highlight-comment">// You have 2 choices when specifying the UI. </span>

      <span class="highlight-comment">// The typical example is to create your element as part of this setup and pass it back as the "FrameworkElement" </span>
      <span class="highlight-comment">// property of the provider Data. Most any container control will work, but we</span>
      <span class="highlight-comment">// we generally suggest using a descendant of the Page class:</span>
      data.FrameworkElement = <span class="highlight-keyword">new</span> Page();

      <span class="highlight-comment">// </span>
      <span class="highlight-comment">// A more advanced mechanism is to provided a callback that creates the UI element on demand</span>
      <span class="highlight-comment">// each time the containing view is created. Generally, this approach is needed for UI Elements</span>
      <span class="highlight-comment">// that CANNOT be cached/reused due to some underlying dependancies. A good example of this</span>
      <span class="highlight-comment">// is the WebBrowser control that embeds a browser window, that itself is not reusable:</span>
      data.FrameworkElement = <span class="highlight-keyword">null</span>;  <span class="highlight-comment">// Set Cached element to null as we are specifying a creator. </span>
      data.FrameworkElementCreator = <span class="highlight-keyword">new</span> BrowserCreator(); <span class="highlight-comment">// set a creator to call back into. </span>
   }
}</pre></div><div id="IDACC_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="highlight-comment">'</span>
<span class="highlight-comment">' Provider class called by Revit to provide information about the pane</span>
<span class="highlight-comment">' to embed.</span>
<span class="highlight-comment">'</span>
<span class="highlight-keyword">Public</span> <span class="highlight-keyword">Class</span> PaneProvider
    <span class="highlight-keyword">Implements</span> IDockablePaneProvider
    <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Sub</span> SetupDockablePane(data <span class="highlight-keyword">As</span> DockablePaneProviderData) <span class="highlight-keyword">Implements</span> IDockablePaneProvider.SetupDockablePane
        <span class="highlight-comment">' </span>
        <span class="highlight-comment">' SetupDockablePane is called to collect the properties for your pane</span>
        <span class="highlight-comment">' including the WPF FrameworkElement used for your pane.</span>
        <span class="highlight-comment">'</span>
        <span class="highlight-comment">' You have 2 choices when specifying the UI. </span>

        <span class="highlight-comment">' The typical example is to create your element as part of this setup and pass it back as the "FrameworkElement" </span>
        <span class="highlight-comment">' property of the provider Data. Most any container control will work, but we</span>
        <span class="highlight-comment">' we generally suggest using a descendant of the Page class:</span>
        data.FrameworkElement = <span class="highlight-keyword">New</span> Page()

        <span class="highlight-comment">'</span>
        <span class="highlight-comment">' A more advanced mechanism is to provided a callback that creates the UI element on demand</span>
        <span class="highlight-comment">' each time the containing view is created. Generally, this approach is needed for UI Elements</span>
        <span class="highlight-comment">' that CANNOT be cached/reused due to some underlying dependancies. A good example of this</span>
        <span class="highlight-comment">' is the WebBrowser control that embeds a browser window, that itself is not reusable:</span>
        data.FrameworkElement = <span class="highlight-keyword">Nothing</span>
        <span class="highlight-comment">' Set Cached element to null as we are specifying a creator. </span>
        data.FrameworkElementCreator = <span class="highlight-keyword">New</span> BrowserCreator()
        <span class="highlight-comment">' set a creator to call back into. </span>
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span>
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Class</span></pre></div><div id="IDACC_code_Div3" class="codeSnippetContainerCode" style="display: none"><p>No code example is currently available or this language may not be supported.</p></div><div id="IDACC_code_Div4" class="codeSnippetContainerCode" style="display: none"><p>No code example is currently available or this language may not be supported.</p></div></div></div></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('seeAlso')" onkeypress="SectionExpandCollapse_CheckKey('seeAlso', event)" tabindex="0"><img id="seeAlsoToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />See Also</span></div><div id="seeAlsoSection" class="collapsibleSection"><h4>Reference</h4><div><a href="e86fd90a-8957-02a6-da7f-ced248966e3e.htm">Autodesk.Revit.UI Namespace</a></div></div></div></div>
        </div></body></html>