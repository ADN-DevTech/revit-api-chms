<html><head><title>Document.Paint(ElementId, Face, ElementId) Method</title><meta name="Title" content="Paint(ElementId, Face, ElementId) Method" /><meta name="Microsoft.Help.Id" content="M:Autodesk.Revit.DB.Document.Paint(Autodesk.Revit.DB.ElementId,Autodesk.Revit.DB.Face,Autodesk.Revit.DB.ElementId)" /><meta name="Microsoft.Help.ContentType" content="Reference" /><meta name="container" content="Autodesk.Revit.DB" /><meta name="file" content="9268395e-a9cb-ff79-20ab-1ed261220513" /><meta name="guid" content="9268395e-a9cb-ff79-20ab-1ed261220513" /><meta name="Microsoft.Help.Category" content="CSharp" /><meta name="Microsoft.Help.Category" content="VB" /><meta name="Description" content="Paint the element's face with specified material." /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /></head><body onload="SetDefaultLanguage('cs');"><div class="pageBody"><div id="TopicContent" class="topicContent"><table class="titleTable"><tr><td class="titleColumn"><h1>Document<span id="LST977C1231_0" data-languageSpecificText="cpp=::|nu=."></span>Paint(Element<wbr />Id, Face, Element<wbr />Id) Method</h1></td></tr></table><div class="summary">
   Paint the element's face with specified material.
</div><br /><strong>Namespace:</strong> <a href="87546ba7-461b-c646-cbb1-2cb8f5bff8b2.htm">Autodesk.Revit.DB</a><br /><strong>Assembly:</strong> RevitAPI (in RevitAPI.dll) Version: 25.0.0.0 (25.0.0.0)<div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDB')" onkeypress="SectionExpandCollapse_CheckKey('IDB', event)" tabindex="0"><img id="IDBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Syntax</span></div><div id="IDBSection" class="collapsibleSection"><div id="IDAB" class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="IDAB_tab1" class="codeSnippetContainerTab"><a href="#" onclick="ChangeTab('IDAB','cs','1','4');return false;">C#</a></div><div id="IDAB_tab2" class="codeSnippetContainerTab"><a href="#" onclick="ChangeTab('IDAB','vb','2','4');return false;">VB</a></div><div id="IDAB_tab3" class="codeSnippetContainerTab"><a href="#" onclick="ChangeTab('IDAB','cpp','3','4');return false;">C++</a></div><div id="IDAB_tab4" class="codeSnippetContainerTab"><a href="#" onclick="ChangeTab('IDAB','fs','4','4');return false;">F#</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="IDAB_copyCode" href="#" class="copyCodeSnippet" onclick="CopyToClipboard('IDAB');return false;" title="Copy">Copy</a></div></div><div id="IDAB_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">void</span> <span class="identifier">Paint</span>(
	<span class="identifier">ElementId</span> <span class="parameter">elementId</span>,
	<span class="identifier">Face</span> <span class="parameter">face</span>,
	<span class="identifier">ElementId</span> <span class="parameter">materialId</span>
)</pre></div><div id="IDAB_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">Public</span> <span class="keyword">Sub</span> <span class="identifier">Paint</span> ( 
	<span class="parameter">elementId</span> <span class="keyword">As</span> <span class="identifier">ElementId</span>,
	<span class="parameter">face</span> <span class="keyword">As</span> <span class="identifier">Face</span>,
	<span class="parameter">materialId</span> <span class="keyword">As</span> <span class="identifier">ElementId</span>
)</pre></div><div id="IDAB_code_Div3" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">public</span>:
<span class="keyword">void</span> <span class="identifier">Paint</span>(
	<span class="identifier">ElementId</span>^ <span class="parameter">elementId</span>, 
	<span class="identifier">Face</span>^ <span class="parameter">face</span>, 
	<span class="identifier">ElementId</span>^ <span class="parameter">materialId</span>
)</pre></div><div id="IDAB_code_Div4" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">member</span> <span class="identifier">Paint</span> : 
        <span class="parameter">elementId</span> : <span class="identifier">ElementId</span> * 
        <span class="parameter">face</span> : <span class="identifier">Face</span> * 
        <span class="parameter">materialId</span> : <span class="identifier">ElementId</span> <span class="keyword">-&gt;</span> <span class="keyword">unit</span> </pre></div></div></div><h4>Parameters</h4><dl><dt class="has-text-weight-normal"><span class="parameter">elementId</span>  <a href="44f3f7b1-3229-3404-93c9-dc5e70337dd6.htm">ElementId</a></dt><dd>
   The element that the face belongs to.
</dd><dt class="has-text-weight-normal"><span class="parameter">face</span>  <a href="e32b3b1f-66fc-57cb-6e1c-aa81d1bf3e63.htm">Face</a></dt><dd>
   The painted element's face.
</dd><dt class="has-text-weight-normal"><span class="parameter">materialId</span>  <a href="44f3f7b1-3229-3404-93c9-dc5e70337dd6.htm">ElementId</a></dt><dd>
   The material to be painted on the face
</dd></dl></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDEC')" onkeypress="SectionExpandCollapse_CheckKey('IDEC', event)" tabindex="0"><img id="IDECToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Exceptions</span></div><div id="IDECSection" class="collapsibleSection"><table><tr><th>Exception</th><th>Condition</th></tr><tr><td><a href="2e6e4206-97a8-dd4b-df5d-4269f4bb6088.htm">ArgumentException</a></td><td>
   The element elementId does not exist in the document
   -or-
   The element materialId does not exist in the document
   -or-
   The face doesn't belong to the element
   -or-
   The materialId doesn't specify a material element.
   -or-
   The element's face cannot be painted.
</td></tr><tr><td><a href="631e1424-60f4-929b-4e52-dda9dcd26316.htm">ArgumentNullException</a></td><td>
   A non-optional argument was null
</td></tr><tr><td><a href="53205486-5917-7c33-8e67-e362106ddc97.htm">ModificationForbiddenException</a></td><td>
   The document is in failure mode: an operation has failed,
   and Revit requires the user to either cancel the operation
   or fix the problem (usually by deleting certain elements).
   -or-
   The document is being loaded, or is in the midst of another
   sensitive process.
</td></tr><tr><td><a href="8f025460-c283-ea99-aa8a-5a36e11528f4.htm">ModificationOutsideTransactionException</a></td><td>
   The document has no open transaction.
</td></tr></table></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDJC')" onkeypress="SectionExpandCollapse_CheckKey('IDJC', event)" tabindex="0"><img id="IDJCToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Example</span></div><div id="IDJCSection" class="collapsibleSection"><div id="IDAJC" class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="IDAJC_tab1" class="codeSnippetContainerTab"><a href="#" onclick="ChangeTab('IDAJC','cs','1','4');return false;">C#</a></div><div id="IDAJC_tab2" class="codeSnippetContainerTab"><a href="#" onclick="ChangeTab('IDAJC','vb','2','4');return false;">VB</a></div><div id="IDAJC_tab3" class="codeSnippetContainerTabPhantom"><a href="#" onclick="ChangeTab('IDAJC','cpp','3','4');return false;">C++</a></div><div id="IDAJC_tab4" class="codeSnippetContainerTabPhantom"><a href="#" onclick="ChangeTab('IDAJC','fs','4','4');return false;">F#</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="IDAJC_copyCode" href="#" class="copyCodeSnippet" onclick="CopyToClipboard('IDAJC');return false;" title="Copy">Copy</a></div></div><div id="IDAJC_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-comment">// Paint any unpainted faces of a given wall</span>
<span class="highlight-keyword">public</span> <span class="highlight-keyword">void</span> PaintWallFaces(Wall wall, ElementId matId)
{
    Document doc = wall.Document;
    GeometryElement geometryElement = wall.get_Geometry(<span class="highlight-keyword">new</span> Options());
    <span class="highlight-keyword">foreach</span> (GeometryObject geometryObject <span class="highlight-keyword">in</span> geometryElement)
    {
        <span class="highlight-keyword">if</span> (geometryObject <span class="highlight-keyword">is</span> Solid)
        {
            Solid solid = geometryObject <span class="highlight-keyword">as</span> Solid;
            <span class="highlight-keyword">foreach</span> (Face face <span class="highlight-keyword">in</span> solid.Faces)
            {
                <span class="highlight-keyword">if</span> (doc.IsPainted(wall.Id, face) == <span class="highlight-keyword">false</span>)
                {
                    doc.Paint(wall.Id, face, matId);
                }
            }
        }
    }
}</pre></div><div id="IDAJC_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="highlight-comment">' Paint any unpainted faces of a given wall</span>
<span class="highlight-keyword">Public</span> <span class="highlight-keyword">Sub</span> PaintWallFaces(wall <span class="highlight-keyword">As</span> Wall, matId <span class="highlight-keyword">As</span> ElementId)
   <span class="highlight-keyword">Dim</span> doc <span class="highlight-keyword">As</span> Document = wall.Document
   <span class="highlight-keyword">Dim</span> geometryElement <span class="highlight-keyword">As</span> GeometryElement = wall.Geometry(<span class="highlight-keyword">New</span> Options())
   <span class="highlight-keyword">For</span> <span class="highlight-keyword">Each</span> geometryObject <span class="highlight-keyword">As</span> GeometryObject <span class="highlight-keyword">In</span> geometryElement
      <span class="highlight-keyword">If</span> <span class="highlight-keyword">TypeOf</span> geometryObject <span class="highlight-keyword">Is</span> Solid <span class="highlight-keyword">Then</span>
         <span class="highlight-keyword">Dim</span> solid <span class="highlight-keyword">As</span> Solid = <span class="highlight-keyword">TryCast</span>(geometryObject, Solid)
         <span class="highlight-keyword">For</span> <span class="highlight-keyword">Each</span> face <span class="highlight-keyword">As</span> Face <span class="highlight-keyword">In</span> solid.Faces
            <span class="highlight-keyword">If</span> doc.IsPainted(wall.Id, face) = <span class="highlight-keyword">False</span> <span class="highlight-keyword">Then</span>
               doc.Paint(wall.Id, face, matId)
            <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
         <span class="highlight-keyword">Next</span>
      <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
   <span class="highlight-keyword">Next</span>
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span></pre></div><div id="IDAJC_code_Div3" class="codeSnippetContainerCode" style="display: none"><p>No code example is currently available or this language may not be supported.</p></div><div id="IDAJC_code_Div4" class="codeSnippetContainerCode" style="display: none"><p>No code example is currently available or this language may not be supported.</p></div></div></div><div id="IDBJC" class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="IDBJC_tab1" class="codeSnippetContainerTab"><a href="#" onclick="ChangeTab('IDBJC','cs','1','4');return false;">C#</a></div><div id="IDBJC_tab2" class="codeSnippetContainerTab"><a href="#" onclick="ChangeTab('IDBJC','vb','2','4');return false;">VB</a></div><div id="IDBJC_tab3" class="codeSnippetContainerTabPhantom"><a href="#" onclick="ChangeTab('IDBJC','cpp','3','4');return false;">C++</a></div><div id="IDBJC_tab4" class="codeSnippetContainerTabPhantom"><a href="#" onclick="ChangeTab('IDBJC','fs','4','4');return false;">F#</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="IDBJC_copyCode" href="#" class="copyCodeSnippet" onclick="CopyToClipboard('IDBJC');return false;" title="Copy">Copy</a></div></div><div id="IDBJC_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">public</span> <span class="highlight-keyword">void</span> ApplyPaintByMaterial(Document document, Wall wall, Material material)
{
   <span class="highlight-comment">// Before acquiring the geometry, make sure the detail level is set to 'Fine'</span>
   Options geoOptions = <span class="highlight-keyword">new</span> Options();
   geoOptions.DetailLevel = ViewDetailLevel.Fine;

   <span class="highlight-comment">// Obtain geometry for the given Wall element</span>
   GeometryElement geoElem = wall.get_Geometry(geoOptions);

   <span class="highlight-comment">// Find a face on the wall</span>
   Face wallFace = <span class="highlight-keyword">null</span>;
   IEnumerator&lt;GeometryObject&gt; geoObjectItor = geoElem.GetEnumerator();
   <span class="highlight-keyword">while</span> (geoObjectItor.MoveNext())
   {
      <span class="highlight-comment">// need to find a solid first</span>
      Solid theSolid = geoObjectItor.Current <span class="highlight-keyword">as</span> Solid;
      <span class="highlight-keyword">if</span> (<span class="highlight-keyword">null</span> != theSolid)
      {
         <span class="highlight-comment">// Examine faces of the solid to find one with at least</span>
         <span class="highlight-comment">// one region. Then take the geometric face of that region.</span>
         <span class="highlight-keyword">foreach</span> (Face face <span class="highlight-keyword">in</span> theSolid.Faces)
         {
            <span class="highlight-keyword">if</span> (face.HasRegions)
            {
               wallFace = face.GetRegions()[<span class="highlight-number">0</span>];
               <span class="highlight-keyword">break</span>;
            }
         }
      }
   }

   <span class="highlight-keyword">if</span> (<span class="highlight-keyword">null</span> == wallFace)
   {
      TaskDialog.Show(<span class="highlight-literal">"Failure"</span>, <span class="highlight-literal">"Could not find a face to paint on the given wall."</span>);
      <span class="highlight-keyword">return</span>;
   }

   <span class="highlight-comment">// Paint material to the wall face (modification must be inside a transaction)</span>

   <span class="highlight-keyword">using</span> (Transaction transaction = <span class="highlight-keyword">new</span> Transaction(document, <span class="highlight-literal">"Painting a wall"</span>))
   {
      transaction.Start();
      document.Paint(wall.Id, wallFace, material.Id);
      transaction.Commit();
   }

   <span class="highlight-comment">// For illustration purposes only, check if the painted material indeed got applied</span>

   <span class="highlight-keyword">bool</span> isPainted = document.IsPainted(wall.Id, wallFace);
   <span class="highlight-keyword">if</span> (isPainted)
   {
      ElementId paintedMatId = document.GetPaintedMaterial(wall.Id, wallFace);
      <span class="highlight-keyword">if</span> (paintedMatId == material.Id)
      {
         TaskDialog.Show(<span class="highlight-literal">"Painting material"</span>, <span class="highlight-literal">"Wall painted successfully."</span>);
      }
   }
}</pre></div><div id="IDBJC_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="highlight-keyword">Public</span> <span class="highlight-keyword">Sub</span> ApplyPaintByMaterial(document <span class="highlight-keyword">As</span> Document, wall <span class="highlight-keyword">As</span> Wall, material <span class="highlight-keyword">As</span> Material)
    <span class="highlight-comment">' Before acquiring the geometry, make sure the detail level is set to 'Fine'</span>
    <span class="highlight-keyword">Dim</span> geoOptions <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> Options()
    geoOptions.DetailLevel = ViewDetailLevel.Fine

    <span class="highlight-comment">' Obtain geometry for the given Wall element</span>
    <span class="highlight-keyword">Dim</span> geoElem <span class="highlight-keyword">As</span> GeometryElement = wall.Geometry(geoOptions)

    <span class="highlight-comment">' Find a face on the wall</span>
    <span class="highlight-keyword">Dim</span> wallFace <span class="highlight-keyword">As</span> Face = <span class="highlight-keyword">Nothing</span>
    <span class="highlight-keyword">Dim</span> geoObjectItor <span class="highlight-keyword">As</span> IEnumerator(<span class="highlight-keyword">Of</span> GeometryObject) = geoElem.GetEnumerator()
    <span class="highlight-keyword">While</span> geoObjectItor.MoveNext()
        <span class="highlight-comment">' need to find a solid first</span>
        <span class="highlight-keyword">Dim</span> theSolid <span class="highlight-keyword">As</span> Solid = <span class="highlight-keyword">TryCast</span>(geoObjectItor.Current, Solid)
        <span class="highlight-keyword">If</span> theSolid <span class="highlight-keyword">IsNot</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
            <span class="highlight-comment">' Examine faces of the solid to find one with at least</span>
            <span class="highlight-comment">' one region. Then take the geometric face of that region.</span>
            <span class="highlight-keyword">For</span> <span class="highlight-keyword">Each</span> face <span class="highlight-keyword">As</span> Face <span class="highlight-keyword">In</span> theSolid.Faces
                <span class="highlight-keyword">If</span> face.HasRegions <span class="highlight-keyword">Then</span>
                    wallFace = face.GetRegions()(<span class="highlight-number">0</span>)
                    <span class="highlight-keyword">Exit</span> <span class="highlight-keyword">For</span>
                <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
            <span class="highlight-keyword">Next</span>
        <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">While</span>

    <span class="highlight-keyword">If</span> wallFace <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
        TaskDialog.Show(<span class="highlight-literal">"Failure"</span>, <span class="highlight-literal">"Could not find a face to paint on the given wall."</span>)
        <span class="highlight-keyword">Return</span>
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

    <span class="highlight-comment">' Paint material to the wall face (modification must be inside a transaction)</span>

    <span class="highlight-keyword">Using</span> transaction <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> Transaction(document, <span class="highlight-literal">"Painting a wall"</span>)
        transaction.Start()
        document.Paint(wall.Id, wallFace, material.Id)
        transaction.Commit()
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Using</span>

    <span class="highlight-comment">' For illustration purposes only, check if the painted material indeed got applied</span>

    <span class="highlight-keyword">Dim</span> isPainted <span class="highlight-keyword">As</span> <span class="highlight-keyword">Boolean</span> = document.IsPainted(wall.Id, wallFace)
    <span class="highlight-keyword">If</span> isPainted <span class="highlight-keyword">Then</span>
        <span class="highlight-keyword">Dim</span> paintedMatId <span class="highlight-keyword">As</span> ElementId = document.GetPaintedMaterial(wall.Id, wallFace)
        <span class="highlight-keyword">If</span> paintedMatId = material.Id <span class="highlight-keyword">Then</span>
            TaskDialog.Show(<span class="highlight-literal">"Painting material"</span>, <span class="highlight-literal">"Wall painted successfully."</span>)
        <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span></pre></div><div id="IDBJC_code_Div3" class="codeSnippetContainerCode" style="display: none"><p>No code example is currently available or this language may not be supported.</p></div><div id="IDBJC_code_Div4" class="codeSnippetContainerCode" style="display: none"><p>No code example is currently available or this language may not be supported.</p></div></div></div></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('seeAlso')" onkeypress="SectionExpandCollapse_CheckKey('seeAlso', event)" tabindex="0"><img id="seeAlsoToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />See Also</span></div><div id="seeAlsoSection" class="collapsibleSection"><h4>Reference</h4><div><a href="db03274b-a107-aa32-9034-f3e0df4bb1ec.htm">Document Class</a></div><div><a href="f6a99488-ae33-46f8-849d-4c68869f68cd.htm">Paint Overload</a></div><div><a href="87546ba7-461b-c646-cbb1-2cb8f5bff8b2.htm">Autodesk.Revit.DB Namespace</a></div></div></div></div>
        </div></body></html>