<html><head><title>Duct.Create(Document, ElementId, ElementId, Connector, Connector) Method</title><meta name="Title" content="Create(Document, ElementId, ElementId, Connector, Connector) Method" /><meta name="Microsoft.Help.Id" content="M:Autodesk.Revit.DB.Mechanical.Duct.Create(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.ElementId,Autodesk.Revit.DB.ElementId,Autodesk.Revit.DB.Connector,Autodesk.Revit.DB.Connector)" /><meta name="Microsoft.Help.ContentType" content="Reference" /><meta name="container" content="Autodesk.Revit.DB.Mechanical" /><meta name="file" content="d4a329e7-ba33-21dd-c281-2e1fa7ab71c7" /><meta name="guid" content="d4a329e7-ba33-21dd-c281-2e1fa7ab71c7" /><meta name="Microsoft.Help.Category" content="CSharp" /><meta name="Microsoft.Help.Category" content="VB" /><meta name="Description" content="Creates a new duct that connects to two connectors." /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /></head><body onload="SetDefaultLanguage('cs');"><div class="pageBody"><div id="TopicContent" class="topicContent"><table class="titleTable"><tr><td class="titleColumn"><h1>Duct<span id="LST2D2E005C_0" data-languageSpecificText="cpp=::|nu=."></span>Create(Document, Element<wbr />Id, Element<wbr />Id, Connector, Connector) Method</h1></td></tr></table><div class="summary">
   Creates a new duct that connects to two connectors.
</div><br /><strong>Namespace:</strong> <a href="0eafd899-5912-56fd-94b1-d286156e26fc.htm">Autodesk.Revit.DB.Mechanical</a><br /><strong>Assembly:</strong> RevitAPI (in RevitAPI.dll) Version: 25.0.0.0 (25.0.0.0)<div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDB')" onkeypress="SectionExpandCollapse_CheckKey('IDB', event)" tabindex="0"><img id="IDBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Syntax</span></div><div id="IDBSection" class="collapsibleSection"><div id="IDAB" class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="IDAB_tab1" class="codeSnippetContainerTab"><a href="#" onclick="ChangeTab('IDAB','cs','1','4');return false;">C#</a></div><div id="IDAB_tab2" class="codeSnippetContainerTab"><a href="#" onclick="ChangeTab('IDAB','vb','2','4');return false;">VB</a></div><div id="IDAB_tab3" class="codeSnippetContainerTab"><a href="#" onclick="ChangeTab('IDAB','cpp','3','4');return false;">C++</a></div><div id="IDAB_tab4" class="codeSnippetContainerTab"><a href="#" onclick="ChangeTab('IDAB','fs','4','4');return false;">F#</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="IDAB_copyCode" href="#" class="copyCodeSnippet" onclick="CopyToClipboard('IDAB');return false;" title="Copy">Copy</a></div></div><div id="IDAB_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">static</span> <span class="identifier">Duct</span> <span class="identifier">Create</span>(
	<span class="identifier">Document</span> <span class="parameter">document</span>,
	<span class="identifier">ElementId</span> <span class="parameter">ductTypeId</span>,
	<span class="identifier">ElementId</span> <span class="parameter">levelId</span>,
	<span class="identifier">Connector</span> <span class="parameter">startConnector</span>,
	<span class="identifier">Connector</span> <span class="parameter">endConnector</span>
)</pre></div><div id="IDAB_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">Public</span> <span class="keyword">Shared</span> <span class="keyword">Function</span> <span class="identifier">Create</span> ( 
	<span class="parameter">document</span> <span class="keyword">As</span> <span class="identifier">Document</span>,
	<span class="parameter">ductTypeId</span> <span class="keyword">As</span> <span class="identifier">ElementId</span>,
	<span class="parameter">levelId</span> <span class="keyword">As</span> <span class="identifier">ElementId</span>,
	<span class="parameter">startConnector</span> <span class="keyword">As</span> <span class="identifier">Connector</span>,
	<span class="parameter">endConnector</span> <span class="keyword">As</span> <span class="identifier">Connector</span>
) <span class="keyword">As</span> <span class="identifier">Duct</span></pre></div><div id="IDAB_code_Div3" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">public</span>:
<span class="keyword">static</span> <span class="identifier">Duct</span>^ <span class="identifier">Create</span>(
	<span class="identifier">Document</span>^ <span class="parameter">document</span>, 
	<span class="identifier">ElementId</span>^ <span class="parameter">ductTypeId</span>, 
	<span class="identifier">ElementId</span>^ <span class="parameter">levelId</span>, 
	<span class="identifier">Connector</span>^ <span class="parameter">startConnector</span>, 
	<span class="identifier">Connector</span>^ <span class="parameter">endConnector</span>
)</pre></div><div id="IDAB_code_Div4" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">static</span> <span class="keyword">member</span> <span class="identifier">Create</span> : 
        <span class="parameter">document</span> : <span class="identifier">Document</span> * 
        <span class="parameter">ductTypeId</span> : <span class="identifier">ElementId</span> * 
        <span class="parameter">levelId</span> : <span class="identifier">ElementId</span> * 
        <span class="parameter">startConnector</span> : <span class="identifier">Connector</span> * 
        <span class="parameter">endConnector</span> : <span class="identifier">Connector</span> <span class="keyword">-&gt;</span> <span class="identifier">Duct</span> </pre></div></div></div><h4>Parameters</h4><dl><dt class="has-text-weight-normal"><span class="parameter">document</span>  <a href="db03274b-a107-aa32-9034-f3e0df4bb1ec.htm">Document</a></dt><dd>
   The document.
</dd><dt class="has-text-weight-normal"><span class="parameter">ductTypeId</span>  <a href="44f3f7b1-3229-3404-93c9-dc5e70337dd6.htm">ElementId</a></dt><dd>
   The ElementId of the new duct type.
</dd><dt class="has-text-weight-normal"><span class="parameter">levelId</span>  <a href="44f3f7b1-3229-3404-93c9-dc5e70337dd6.htm">ElementId</a></dt><dd>
   The level ElementId for the new duct.
</dd><dt class="has-text-weight-normal"><span class="parameter">startConnector</span>  <a href="11e07082-b3f2-26a1-de79-16535f44716c.htm">Connector</a></dt><dd>
   The first connector where the new duct starts.
</dd><dt class="has-text-weight-normal"><span class="parameter">endConnector</span>  <a href="11e07082-b3f2-26a1-de79-16535f44716c.htm">Connector</a></dt><dd>
   The second point of the new duct.
</dd></dl><h4>Return Value</h4><a href="72548466-370d-b010-eb4d-cde0c3f72482.htm">Duct</a><br />
   The created duct.
</div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDIC')" onkeypress="SectionExpandCollapse_CheckKey('IDIC', event)" tabindex="0"><img id="IDICToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Exceptions</span></div><div id="IDICSection" class="collapsibleSection"><table><tr><th>Exception</th><th>Condition</th></tr><tr><td><a href="2e6e4206-97a8-dd4b-df5d-4269f4bb6088.htm">ArgumentException</a></td><td>
   The duct type ductTypeId is not valid duct type.
   -or-
   The ElementId levelId is not a Level.
   -or-
   The connector's domain is not Domain.â€‹DomainHvac.
   -or-
   The points of startConnector and endConnector are too close: for MEPCurve, the minimum length is 1/10 inch.
</td></tr><tr><td><a href="631e1424-60f4-929b-4e52-dda9dcd26316.htm">ArgumentNullException</a></td><td>
   A non-optional argument was null
</td></tr><tr><td><a href="9e715f03-3884-e539-4dd6-8d7545733adc.htm">InvalidOperationException</a></td><td>
   Thrown when the new duct fails to connect with the connector.
</td></tr></table></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDBC')" onkeypress="SectionExpandCollapse_CheckKey('IDBC', event)" tabindex="0"><img id="IDBCToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Remarks</span></div><div id="IDBCSection" class="collapsibleSection">
   The new duct will have the same diameter and system type as the start connector. The creation will also connect the new duct
   to two component who owns the specified connectors. If necessary, additional fitting(s) are included to make a valid connection.
   If the new duct can not be connected to the next component (e.g., mismatched direction, no valid fitting, and etc), the new duct
   will still be created at the specified connector position, and an InvalidOperationException is thrown.
</div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDMC')" onkeypress="SectionExpandCollapse_CheckKey('IDMC', event)" tabindex="0"><img id="IDMCToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Example</span></div><div id="IDMCSection" class="collapsibleSection"><div id="IDAMC" class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="IDAMC_tab1" class="codeSnippetContainerTab"><a href="#" onclick="ChangeTab('IDAMC','cs','1','4');return false;">C#</a></div><div id="IDAMC_tab2" class="codeSnippetContainerTab"><a href="#" onclick="ChangeTab('IDAMC','vb','2','4');return false;">VB</a></div><div id="IDAMC_tab3" class="codeSnippetContainerTabPhantom"><a href="#" onclick="ChangeTab('IDAMC','cpp','3','4');return false;">C++</a></div><div id="IDAMC_tab4" class="codeSnippetContainerTabPhantom"><a href="#" onclick="ChangeTab('IDAMC','fs','4','4');return false;">F#</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="IDAMC_copyCode" href="#" class="copyCodeSnippet" onclick="CopyToClipboard('IDAMC');return false;" title="Copy">Copy</a></div></div><div id="IDAMC_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">public</span> Duct CreateDuctBetweenConnectors(UIDocument uiDocument)
{
    <span class="highlight-comment">// prior to running this example</span>
    <span class="highlight-comment">// select some mechanical equipment with a supply air connector</span>
    <span class="highlight-comment">// and an elbow duct fitting with a connector in line with that connector</span>
    ElementId levelId = ElementId.InvalidElementId;
    Connector connector1 = <span class="highlight-keyword">null</span>, connector2 = <span class="highlight-keyword">null</span>;
    ConnectorSetIterator csi = <span class="highlight-keyword">null</span>;
    ICollection&lt;ElementId&gt; selectedIds = uiDocument.Selection.GetElementIds();
    Document document = uiDocument.Document;
    <span class="highlight-comment">// First find the selected equipment and get the correct connector</span>
    <span class="highlight-keyword">foreach</span> (ElementId id <span class="highlight-keyword">in</span> selectedIds)
    {
        Element e = document.GetElement(id);
        <span class="highlight-keyword">if</span> (e <span class="highlight-keyword">is</span> FamilyInstance)
        {
            FamilyInstance fi = e <span class="highlight-keyword">as</span> FamilyInstance;
            Family family = fi.Symbol.Family;
            <span class="highlight-keyword">if</span> (family.FamilyCategory.Name == <span class="highlight-literal">"Mechanical Equipment"</span>)
            {
                csi = fi.MEPModel.ConnectorManager.Connectors.ForwardIterator();
                <span class="highlight-keyword">while</span> (csi.MoveNext())
                {
                    Connector conn = csi.Current <span class="highlight-keyword">as</span> Connector;
                    <span class="highlight-keyword">if</span> (conn.Direction == FlowDirectionType.Out &amp;&amp; 
                        conn.DuctSystemType == DuctSystemType.SupplyAir)
                    {
                        connector1 = conn;
                        levelId = family.LevelId;
                        <span class="highlight-keyword">break</span>;
                    }
                }
            }
        }
    }
    <span class="highlight-comment">// next find the second selected item to connect to</span>
    <span class="highlight-keyword">foreach</span> (ElementId id <span class="highlight-keyword">in</span> selectedIds)
    {
        Element e = document.GetElement(id);
        <span class="highlight-keyword">if</span> (e <span class="highlight-keyword">is</span> FamilyInstance)
        {
            FamilyInstance fi = e <span class="highlight-keyword">as</span> FamilyInstance;
            Family family = fi.Symbol.Family;
            <span class="highlight-keyword">if</span> (family.FamilyCategory.Name != <span class="highlight-literal">"Mechanical Equipment"</span>)
            {
                csi = fi.MEPModel.ConnectorManager.Connectors.ForwardIterator();
                <span class="highlight-keyword">while</span> (csi.MoveNext())
                {
                    <span class="highlight-keyword">if</span> (<span class="highlight-keyword">null</span> == connector2)
                    {
                        Connector conn = csi.Current <span class="highlight-keyword">as</span> Connector;

                        <span class="highlight-comment">// make sure to choose the connector in line with the first connector</span>
                        <span class="highlight-keyword">if</span> (Math.Abs(conn.Origin.Y - connector1.Origin.Y) &lt; <span class="highlight-number">0.001</span>)
                        {
                            connector2 = conn;
                            <span class="highlight-keyword">break</span>;
                        }
                    }
                }
            }
        }
    }

    Duct duct = <span class="highlight-keyword">null</span>;
    <span class="highlight-keyword">if</span> (<span class="highlight-keyword">null</span> != connector1 &amp;&amp; <span class="highlight-keyword">null</span> != connector2 &amp;&amp; levelId != ElementId.InvalidElementId)
    {
        <span class="highlight-comment">// find a duct type</span>
        FilteredElementCollector collector = <span class="highlight-keyword">new</span> FilteredElementCollector(uiDocument.Document);
        collector.OfClass(<span class="highlight-keyword">typeof</span>(DuctType));

        <span class="highlight-comment">// Use Linq query to make sure it is one of the rectangular duct types</span>
        <span class="highlight-keyword">var</span> query = <span class="highlight-keyword">from</span> element <span class="highlight-keyword">in</span> collector
                    <span class="highlight-keyword">where</span> element.Name.Contains(<span class="highlight-literal">"Mitered Elbows"</span>) == <span class="highlight-keyword">true</span>
                    <span class="highlight-keyword">select</span> element;

        <span class="highlight-comment">// use extension methods to get first duct type</span>
        DuctType ductType = collector.Cast&lt;DuctType&gt;().First&lt;DuctType&gt;();

        <span class="highlight-keyword">if</span> (<span class="highlight-keyword">null</span> != ductType)
        {
            duct = Duct.Create(document, ductType.Id, levelId, connector1, connector2);
        }
    }

    <span class="highlight-keyword">return</span> duct;
}</pre></div><div id="IDAMC_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="highlight-keyword">Public</span> <span class="highlight-keyword">Function</span> CreateDuctBetweenConnectors(uiDocument <span class="highlight-keyword">As</span> UIDocument) <span class="highlight-keyword">As</span> Duct
   <span class="highlight-comment">' prior to running this example</span>
   <span class="highlight-comment">' select some mechanical equipment with a supply air connector</span>
   <span class="highlight-comment">' and an elbow duct fitting with a connector in line with that connector</span>
   <span class="highlight-keyword">Dim</span> levelId <span class="highlight-keyword">As</span> ElementId = ElementId.InvalidElementId
   <span class="highlight-keyword">Dim</span> connector1 <span class="highlight-keyword">As</span> Connector = <span class="highlight-keyword">Nothing</span>, connector2 <span class="highlight-keyword">As</span> Connector = <span class="highlight-keyword">Nothing</span>
   <span class="highlight-keyword">Dim</span> csi <span class="highlight-keyword">As</span> ConnectorSetIterator = <span class="highlight-keyword">Nothing</span>
   <span class="highlight-keyword">Dim</span> selectedIds <span class="highlight-keyword">As</span> ICollection(<span class="highlight-keyword">Of</span> ElementId) = uiDocument.Selection.GetElementIds()
   <span class="highlight-keyword">Dim</span> document <span class="highlight-keyword">As</span> Document = uiDocument.Document
   <span class="highlight-comment">' First find the selected equipment and get the correct connector</span>
   <span class="highlight-keyword">For</span> <span class="highlight-keyword">Each</span> id <span class="highlight-keyword">As</span> ElementId <span class="highlight-keyword">In</span> selectedIds
      <span class="highlight-keyword">Dim</span> e <span class="highlight-keyword">As</span> Element = document.GetElement(id)
      <span class="highlight-keyword">If</span> <span class="highlight-keyword">TypeOf</span> e <span class="highlight-keyword">Is</span> FamilyInstance <span class="highlight-keyword">Then</span>
         <span class="highlight-keyword">Dim</span> fi <span class="highlight-keyword">As</span> FamilyInstance = <span class="highlight-keyword">TryCast</span>(e, FamilyInstance)
         <span class="highlight-keyword">Dim</span> family <span class="highlight-keyword">As</span> Family = fi.Symbol.Family
         <span class="highlight-keyword">If</span> family.FamilyCategory.Name = <span class="highlight-literal">"Mechanical Equipment"</span> <span class="highlight-keyword">Then</span>
            csi = fi.MEPModel.ConnectorManager.Connectors.ForwardIterator()
            <span class="highlight-keyword">While</span> csi.MoveNext()
               <span class="highlight-keyword">Dim</span> conn <span class="highlight-keyword">As</span> Connector = <span class="highlight-keyword">TryCast</span>(csi.Current, Connector)
               <span class="highlight-keyword">If</span> conn.Direction = FlowDirectionType.Out <span class="highlight-keyword">AndAlso</span> conn.DuctSystemType = DuctSystemType.SupplyAir <span class="highlight-keyword">Then</span>
                  levelId = fi.LevelId
                  connector1 = conn
                  <span class="highlight-keyword">Exit</span> <span class="highlight-keyword">While</span>
               <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
            <span class="highlight-keyword">End</span> <span class="highlight-keyword">While</span>
         <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
      <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
   <span class="highlight-keyword">Next</span>
   <span class="highlight-comment">' next find the second selected item to connect to</span>
   <span class="highlight-keyword">For</span> <span class="highlight-keyword">Each</span> id <span class="highlight-keyword">As</span> ElementId <span class="highlight-keyword">In</span> selectedIds
      <span class="highlight-keyword">Dim</span> e <span class="highlight-keyword">As</span> Element = document.GetElement(id)
      <span class="highlight-keyword">If</span> <span class="highlight-keyword">TypeOf</span> e <span class="highlight-keyword">Is</span> FamilyInstance <span class="highlight-keyword">Then</span>
         <span class="highlight-keyword">Dim</span> fi <span class="highlight-keyword">As</span> FamilyInstance = <span class="highlight-keyword">TryCast</span>(e, FamilyInstance)
         <span class="highlight-keyword">Dim</span> family <span class="highlight-keyword">As</span> Family = fi.Symbol.Family
         <span class="highlight-keyword">If</span> family.FamilyCategory.Name &lt;&gt; <span class="highlight-literal">"Mechanical Equipment"</span> <span class="highlight-keyword">Then</span>
            csi = fi.MEPModel.ConnectorManager.Connectors.ForwardIterator()
            <span class="highlight-keyword">While</span> csi.MoveNext()
               <span class="highlight-keyword">If</span> connector2 <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
                  <span class="highlight-keyword">Dim</span> conn <span class="highlight-keyword">As</span> Connector = <span class="highlight-keyword">TryCast</span>(csi.Current, Connector)

                  <span class="highlight-comment">' make sure to choose the connector in line with the first connector</span>
                  <span class="highlight-keyword">If</span> Math.Abs(conn.Origin.Y - connector1.Origin.Y) &lt; <span class="highlight-number">0.001</span> <span class="highlight-keyword">Then</span>
                     connector2 = conn
                     <span class="highlight-keyword">Exit</span> <span class="highlight-keyword">While</span>
                  <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
               <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
            <span class="highlight-keyword">End</span> <span class="highlight-keyword">While</span>
         <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
      <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
   <span class="highlight-keyword">Next</span>

   <span class="highlight-keyword">Dim</span> duct <span class="highlight-keyword">As</span> Duct = <span class="highlight-keyword">Nothing</span>
   <span class="highlight-keyword">If</span> connector1 <span class="highlight-keyword">IsNot</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">AndAlso</span> connector2 <span class="highlight-keyword">IsNot</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">AndAlso</span> levelId <span class="highlight-keyword">IsNot</span> ElementId.InvalidElementId <span class="highlight-keyword">Then</span>
      <span class="highlight-comment">' find a duct type</span>
      <span class="highlight-keyword">Dim</span> collector <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> FilteredElementCollector(uiDocument.Document)
      collector.OfClass(<span class="highlight-keyword">GetType</span>(DuctType))

      <span class="highlight-comment">' Use Linq query to make sure it is one of the rectangular duct types</span>
      <span class="highlight-keyword">Dim</span> query <span class="highlight-keyword">As</span> System.Collections.Generic.IEnumerable(<span class="highlight-keyword">Of</span> Autodesk.Revit.DB.Element)
      query = From element <span class="highlight-keyword">In</span> collector _
              Where element.Name.Contains(<span class="highlight-literal">"Mitered Elbows"</span>) = <span class="highlight-keyword">True</span> _
              <span class="highlight-keyword">Select</span> element

      <span class="highlight-comment">' use extension methods to get first duct type</span>
      <span class="highlight-keyword">Dim</span> ductType <span class="highlight-keyword">As</span> DuctType = collector.Cast(<span class="highlight-keyword">Of</span> DuctType)().First()

      <span class="highlight-keyword">If</span> ductType <span class="highlight-keyword">IsNot</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
         duct = duct.Create(document, ductType.Id, levelId, connector1, connector2)
      <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
   <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

   <span class="highlight-keyword">Return</span> duct
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Function</span></pre></div><div id="IDAMC_code_Div3" class="codeSnippetContainerCode" style="display: none"><p>No code example is currently available or this language may not be supported.</p></div><div id="IDAMC_code_Div4" class="codeSnippetContainerCode" style="display: none"><p>No code example is currently available or this language may not be supported.</p></div></div></div></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('seeAlso')" onkeypress="SectionExpandCollapse_CheckKey('seeAlso', event)" tabindex="0"><img id="seeAlsoToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />See Also</span></div><div id="seeAlsoSection" class="collapsibleSection"><h4>Reference</h4><div><a href="72548466-370d-b010-eb4d-cde0c3f72482.htm">Duct Class</a></div><div><a href="bd4f213f-0ff0-0b43-1c3c-4ae23c9061e7.htm">Create Overload</a></div><div><a href="0eafd899-5912-56fd-94b1-d286156e26fc.htm">Autodesk.Revit.DB.Mechanical Namespace</a></div></div></div></div>
        </div></body></html>