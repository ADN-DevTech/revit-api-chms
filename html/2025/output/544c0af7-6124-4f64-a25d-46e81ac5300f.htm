<html><head><title>RibbonPanel Class</title><meta name="Title" content="RibbonPanel Class" /><meta name="Microsoft.Help.Id" content="T:Autodesk.Revit.UI.RibbonPanel" /><meta name="Microsoft.Help.ContentType" content="Reference" /><meta name="System.Keywords" content="Autodesk.Revit.UI.RibbonPanel class" /><meta name="System.Keywords" content="RibbonPanel class" /><meta name="Microsoft.Help.F1" content="Autodesk.Revit.UI.RibbonPanel" /><meta name="Microsoft.Help.F1" content="RibbonPanel" /><meta name="container" content="Autodesk.Revit.UI" /><meta name="file" content="544c0af7-6124-4f64-a25d-46e81ac5300f" /><meta name="guid" content="544c0af7-6124-4f64-a25d-46e81ac5300f" /><meta name="Microsoft.Help.Category" content="CSharp" /><meta name="Microsoft.Help.Category" content="VB" /><meta name="Description" content="Represents a panel added by an External Application or External Command into the Add-Ins tab." /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /></head><body onload="SetDefaultLanguage('cs');"><div class="pageBody"><div id="TopicContent" class="topicContent"><table class="titleTable"><tr><td class="titleColumn"><h1>Ribbon<wbr />Panel Class</h1></td></tr></table><div class="summary">Represents a panel added by an External Application or External Command into the Add-Ins tab. </div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDDA')" onkeypress="SectionExpandCollapse_CheckKey('IDDA', event)" tabindex="0"><img id="IDDAToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Inheritance Hierarchy</span></div><div id="IDDASection" class="collapsibleSection"><a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">System<span id="LST84CEDF92_0" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>Object</a><br />  <span class="selflink">Autodesk.Revit.UI<span id="LST84CEDF92_1" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>RibbonPanel</span><br /></div><br /><strong>Namespace:</strong> <a href="e86fd90a-8957-02a6-da7f-ced248966e3e.htm">Autodesk.Revit.UI</a><br /><strong>Assembly:</strong> RevitAPIUI (in RevitAPIUI.dll) Version: 25.0.0.0 (25.0.0.0)<div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDB')" onkeypress="SectionExpandCollapse_CheckKey('IDB', event)" tabindex="0"><img id="IDBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Syntax</span></div><div id="IDBSection" class="collapsibleSection"><div id="IDAB" class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="IDAB_tab1" class="codeSnippetContainerTab"><a href="#" onclick="ChangeTab('IDAB','cs','1','4');return false;">C#</a></div><div id="IDAB_tab2" class="codeSnippetContainerTab"><a href="#" onclick="ChangeTab('IDAB','vb','2','4');return false;">VB</a></div><div id="IDAB_tab3" class="codeSnippetContainerTab"><a href="#" onclick="ChangeTab('IDAB','cpp','3','4');return false;">C++</a></div><div id="IDAB_tab4" class="codeSnippetContainerTab"><a href="#" onclick="ChangeTab('IDAB','fs','4','4');return false;">F#</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="IDAB_copyCode" href="#" class="copyCodeSnippet" onclick="CopyToClipboard('IDAB');return false;" title="Copy">Copy</a></div></div><div id="IDAB_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">class</span> <span class="identifier">RibbonPanel</span></pre></div><div id="IDAB_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">Public</span> <span class="keyword">Class</span> <span class="identifier">RibbonPanel</span></pre></div><div id="IDAB_code_Div3" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">ref class</span> <span class="identifier">RibbonPanel</span></pre></div><div id="IDAB_code_Div4" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">type</span> <span class="identifier">RibbonPanel</span> = <span class="keyword">class</span> <span class="keyword">end</span></pre></div></div></div></div><p>The <span class="selflink">RibbonPanel</span> type exposes the following members.</p><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDJEA')" onkeypress="SectionExpandCollapse_CheckKey('IDJEA', event)" tabindex="0"><img id="IDJEAToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Properties</span></div><div id="IDJEASection" class="collapsibleSection"><table id="PropertyList" class="members"><tr><th class="iconColumn"> </th><th>Name</th><th>Description</th></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public property" title="Public property" /></td><td><a href="ff32938a-b156-4a6e-c7a1-93c100c18612.htm">Enabled</a></td><td>Gets or sets a value indicating whether the RibbonPanel can respond to user interaction.</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public property" title="Public property" /></td><td><a href="9a65f728-409b-a1f9-d803-3aabacb7f51a.htm">Name</a></td><td>Gets or sets the name of the RibbonPanel.</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public property" title="Public property" /></td><td><a href="3872fc86-a3c1-e20d-81d2-307b4e303152.htm">Title</a></td><td>Gets or sets the text of the RibbonPanel.</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public property" title="Public property" /></td><td><a href="10ed39be-db78-2b0d-b1fd-6453bfb8e488.htm">Visible</a></td><td>Gets or sets a value indicating whether the RibbonPanel is displayed.</td></tr></table><a href="#PageHeader">Top</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDAEA')" onkeypress="SectionExpandCollapse_CheckKey('IDAEA', event)" tabindex="0"><img id="IDAEAToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Methods</span></div><div id="IDAEASection" class="collapsibleSection"><table id="MethodList" class="members"><tr><th class="iconColumn"> </th><th>Name</th><th>Description</th></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /></td><td><a href="8b74bcca-b764-4c57-5161-840afe14af4d.htm">AddItem</a></td><td> Adds a Ribbon item to the panel. </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /></td><td><a href="2fa98df9-0384-e3a6-65f9-a4529b87ed36.htm">AddSeparator</a></td><td>Adds a new Separator to the panel.</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="a456ce07-b3ef-9fe8-8234-b794d4db38da.htm">AddSlideOut</a></td><td> Adds a slideout to the current panel. </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /></td><td><a href="1fe0bbea-29a5-dff5-7330-ff07879b1cee.htm">AddStackedItems(RibbonItemData, RibbonItemData)</a></td><td> Adds two stacked items to the panel. </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /></td><td><a href="5e8e4141-58b8-c786-c43d-f1e043bb4c71.htm">AddStackedItems(RibbonItemData, RibbonItemData, RibbonItemData)</a></td><td> Adds three stacked items to the panel. </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /></td><td><a href="ca7ce9f5-df5d-298c-3760-34b2cbbcbd12.htm">Equals</a></td><td> Determines whether the specified <a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a> is equal to the current <a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>.  <br />(Overrides <a href="https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)" target="_blank" rel="noopener noreferrer">Object<span id="LST84CEDF92_2" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>Equals(Object)</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /></td><td><a href="https://learn.microsoft.com/dotnet/api/system.object.gethashcode#system-object-gethashcode" target="_blank" rel="noopener noreferrer">GetHashCode</a></td><td>Serves as the default hash function.<br />(Inherited from <a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /></td><td><a href="be85a04a-b901-3e28-6dfc-aa452be63dd2.htm">GetItems</a></td><td>Gets a copy of the collection of RibbonItems assigned to the RibbonPanel.</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /></td><td><a href="https://learn.microsoft.com/dotnet/api/system.object.gettype#system-object-gettype" target="_blank" rel="noopener noreferrer">GetType</a></td><td>Gets the <a href="https://learn.microsoft.com/dotnet/api/system.type" target="_blank" rel="noopener noreferrer">Type</a> of the current instance.<br />(Inherited from <a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /></td><td><a href="https://learn.microsoft.com/dotnet/api/system.object.tostring#system-object-tostring" target="_blank" rel="noopener noreferrer">ToString</a></td><td>Returns a string that represents the current object.<br />(Inherited from <a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>)</td></tr></table><a href="#PageHeader">Top</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDBC')" onkeypress="SectionExpandCollapse_CheckKey('IDBC', event)" tabindex="0"><img id="IDBCToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Remarks</span></div><div id="IDBCSection" class="collapsibleSection">The Panel class provides read and write access to the RibbonItems contained in the panel. Use of this class is not supported in Revit Macros.</div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDCC')" onkeypress="SectionExpandCollapse_CheckKey('IDCC', event)" tabindex="0"><img id="IDCCToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Example</span></div><div id="IDCCSection" class="collapsibleSection"><div id="IDACC" class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="IDACC_tab1" class="codeSnippetContainerTab"><a href="#" onclick="ChangeTab('IDACC','cs','1','4');return false;">C#</a></div><div id="IDACC_tab2" class="codeSnippetContainerTab"><a href="#" onclick="ChangeTab('IDACC','vb','2','4');return false;">VB</a></div><div id="IDACC_tab3" class="codeSnippetContainerTabPhantom"><a href="#" onclick="ChangeTab('IDACC','cpp','3','4');return false;">C++</a></div><div id="IDACC_tab4" class="codeSnippetContainerTabPhantom"><a href="#" onclick="ChangeTab('IDACC','fs','4','4');return false;">F#</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="IDACC_copyCode" href="#" class="copyCodeSnippet" onclick="CopyToClipboard('IDACC');return false;" title="Copy">Copy</a></div></div><div id="IDACC_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">public</span> Result OnStartup(UIControlledApplication application)
{
    <span class="highlight-comment">// add new ribbon panel</span>
    RibbonPanel ribbonPanel = application.CreateRibbonPanel(<span class="highlight-literal">"NewRibbonPanel"</span>);

    <span class="highlight-comment">//Create a push button in the ribbon panel �NewRibbonPanel"</span>
    <span class="highlight-keyword">string</span> assembly = <span class="highlight-literal">@"D:\Sample\HelloWorld\bin\Debug\HelloWorld.dll"</span>;
    PushButton pushButton = ribbonPanel.AddItem(<span class="highlight-keyword">new</span> PushButtonData(<span class="highlight-literal">"Hello Button"</span>, 
        <span class="highlight-literal">"Hello Button"</span>, assembly, <span class="highlight-literal">"Hello.HelloButton"</span>)) <span class="highlight-keyword">as</span> PushButton;

    <span class="highlight-comment">// create bitmap image for button</span>
    Uri uriImage = <span class="highlight-keyword">new</span> Uri(<span class="highlight-literal">@"D:\Sample\HelloWorld\bin\Debug\39-Globe_32x32.png"</span>);
    BitmapImage largeImage = <span class="highlight-keyword">new</span> BitmapImage(uriImage);

    <span class="highlight-comment">// assign bitmap to button</span>
    pushButton.LargeImage = largeImage;

    <span class="highlight-comment">// assign a small bitmap to button which is used if command</span>
    <span class="highlight-comment">// is moved to Quick Access Toolbar</span>
    Uri uriSmallImage = <span class="highlight-keyword">new</span> Uri(<span class="highlight-literal">@"D:\Sample\HelloWorld\bin\Debug\39-Globe_16x16.png"</span>);
    BitmapImage smallImage = <span class="highlight-keyword">new</span> BitmapImage(uriSmallImage);

    <span class="highlight-comment">// assign small image to button</span>
    pushButton.Image = smallImage;

    <span class="highlight-comment">// add a vertical separator bar to the panel</span>
    ribbonPanel.AddSeparator();

    <span class="highlight-comment">// define 3 new buttons to be added as stacked buttons</span>
    PushButtonData buttonRed = <span class="highlight-keyword">new</span> PushButtonData (<span class="highlight-literal">"Hello Red"</span>, <span class="highlight-literal">"Hello Red"</span>, 
        assembly, <span class="highlight-literal">"Hello.HelloRed"</span>);
    buttonRed.Image = <span class="highlight-keyword">new</span> BitmapImage(<span class="highlight-keyword">new</span> Uri(<span class="highlight-literal">@"D:\Sample\HelloWorld\bin\Debug\Red.bmp"</span>));
    PushButtonData buttonBlue = <span class="highlight-keyword">new</span> PushButtonData(<span class="highlight-literal">"Hello Blue"</span>, <span class="highlight-literal">"Hello Blue"</span>, 
        assembly, <span class="highlight-literal">"Hello.HelloBlue"</span>);
    buttonBlue.Image = <span class="highlight-keyword">new</span> BitmapImage(<span class="highlight-keyword">new</span> Uri(<span class="highlight-literal">@"D:\Sample\HelloWorld\bin\Debug\Blue.bmp"</span>));
    PushButtonData buttonGreen = <span class="highlight-keyword">new</span> PushButtonData(<span class="highlight-literal">"Hello Green"</span>, <span class="highlight-literal">"Hello Green"</span>, 
        assembly, <span class="highlight-literal">"Hello.HelloGreen"</span>);
    buttonGreen.Image =
        <span class="highlight-keyword">new</span> BitmapImage(<span class="highlight-keyword">new</span> Uri(<span class="highlight-literal">@"D:\Sample\HelloWorld\bin\Debug\Green.bmp"</span>));

    <span class="highlight-comment">// add 3 stacked buttons to the panel</span>
    ribbonPanel.AddStackedItems(buttonRed, buttonBlue, buttonGreen);

    <span class="highlight-comment">// add a pull-down button to the panel </span>
    PulldownButton pulldownButton = ribbonPanel.AddItem(<span class="highlight-keyword">new</span> PulldownButtonData(<span class="highlight-literal">"Hello"</span>, 
        <span class="highlight-literal">"Hello 123"</span>)) <span class="highlight-keyword">as</span> PulldownButton;
    pulldownButton.LargeImage =
        <span class="highlight-keyword">new</span> BitmapImage(<span class="highlight-keyword">new</span> Uri(<span class="highlight-literal">@"D:\Sample\HelloWorld\bin\Debug\Hello.bmp"</span>));

    <span class="highlight-comment">// add some menu items to the pull-down button and assign bitmaps to them</span>
    PushButton buttonOne = pulldownButton.AddPushButton(<span class="highlight-keyword">new</span> PushButtonData(<span class="highlight-literal">"Hello One"</span>, 
        <span class="highlight-literal">"Hello 123"</span>, assembly, <span class="highlight-literal">"Hello.HelloOne"</span>));
    buttonOne.LargeImage =
        <span class="highlight-keyword">new</span> BitmapImage(<span class="highlight-keyword">new</span> Uri(<span class="highlight-literal">@"D:\Sample\HelloWorld\bin\Debug\One.bmp"</span>));
    PushButton buttonTwo = pulldownButton.AddPushButton(<span class="highlight-keyword">new</span> PushButtonData(<span class="highlight-literal">"Hello Two"</span>, 
        <span class="highlight-literal">"Hello 123"</span>, assembly, <span class="highlight-literal">"Hello.HelloTwo"</span>));
    buttonTwo.LargeImage =
        <span class="highlight-keyword">new</span> BitmapImage(<span class="highlight-keyword">new</span> Uri(<span class="highlight-literal">@"D:\Sample\HelloWorld\bin\Debug\Two.bmp"</span>));
    PushButton buttonThree = pulldownButton.AddPushButton(<span class="highlight-keyword">new</span> PushButtonData(<span class="highlight-literal">"Hello Three"</span>, 
        <span class="highlight-literal">"Hello 123"</span>, assembly, <span class="highlight-literal">"Hello.HelloThree"</span>));
    buttonThree.LargeImage =
        <span class="highlight-keyword">new</span> BitmapImage(<span class="highlight-keyword">new</span> Uri(<span class="highlight-literal">@"D:\Sample\HelloWorld\bin\Debug\Three.bmp"</span>));

    <span class="highlight-keyword">return</span> Result.Succeeded;
}</pre></div><div id="IDACC_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="highlight-keyword">Public</span> <span class="highlight-keyword">Function</span> OnStartup(application <span class="highlight-keyword">As</span> UIControlledApplication) <span class="highlight-keyword">As</span> Autodesk.Revit.UI.Result <span class="highlight-keyword">Implements</span> IExternalApplication.OnStartup
    <span class="highlight-comment">' add new ribbon panel</span>
    <span class="highlight-keyword">Dim</span> ribbonPanel <span class="highlight-keyword">As</span> RibbonPanel = application.CreateRibbonPanel(<span class="highlight-literal">"NewRibbonPanel"</span>)

    <span class="highlight-comment">'Create a push button in the ribbon panel �NewRibbonPanel"</span>
    <span class="highlight-keyword">Dim</span> assembly <span class="highlight-keyword">As</span> <span class="highlight-keyword">String</span> = <span class="highlight-literal">"D:\Sample\HelloWorld\bin\Debug\HelloWorld.dll"</span>
    <span class="highlight-keyword">Dim</span> pushButton <span class="highlight-keyword">As</span> PushButton = <span class="highlight-keyword">TryCast</span>(ribbonPanel.AddItem(<span class="highlight-keyword">New</span> PushButtonData(<span class="highlight-literal">"Hello Button"</span>, <span class="highlight-literal">"Hello Button"</span>, assembly, <span class="highlight-literal">"Hello.HelloButton"</span>)), PushButton)

    <span class="highlight-comment">' create bitmap image for button</span>
    <span class="highlight-keyword">Dim</span> uriImage <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> Uri(<span class="highlight-literal">"D:\Sample\HelloWorld\bin\Debug\39-Globe_32x32.png"</span>)
    <span class="highlight-keyword">Dim</span> largeImage <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> BitmapImage(uriImage)

    <span class="highlight-comment">' assign bitmap to button</span>
    pushButton.LargeImage = largeImage

    <span class="highlight-comment">' assign a small bitmap to button which is used if command</span>
    <span class="highlight-comment">' is moved to Quick Access Toolbar</span>
    <span class="highlight-keyword">Dim</span> uriSmallImage <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> Uri(<span class="highlight-literal">"D:\Sample\HelloWorld\bin\Debug\39-Globe_16x16.png"</span>)
    <span class="highlight-keyword">Dim</span> smallImage <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> BitmapImage(uriSmallImage)

    <span class="highlight-comment">' assign small image to button</span>
    pushButton.Image = smallImage

    <span class="highlight-comment">' add a vertical separator bar to the panel</span>
    ribbonPanel.AddSeparator()

    <span class="highlight-comment">' define 3 new buttons to be added as stacked buttons</span>
    <span class="highlight-keyword">Dim</span> buttonRed <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> PushButtonData(<span class="highlight-literal">"Hello Red"</span>, <span class="highlight-literal">"Hello Red"</span>, assembly, <span class="highlight-literal">"Hello.HelloRed"</span>)
    buttonRed.Image = <span class="highlight-keyword">New</span> BitmapImage(<span class="highlight-keyword">New</span> Uri(<span class="highlight-literal">"D:\Sample\HelloWorld\bin\Debug\Red.bmp"</span>))
    <span class="highlight-keyword">Dim</span> buttonBlue <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> PushButtonData(<span class="highlight-literal">"Hello Blue"</span>, <span class="highlight-literal">"Hello Blue"</span>, assembly, <span class="highlight-literal">"Hello.HelloBlue"</span>)
    buttonBlue.Image = <span class="highlight-keyword">New</span> BitmapImage(<span class="highlight-keyword">New</span> Uri(<span class="highlight-literal">"D:\Sample\HelloWorld\bin\Debug\Blue.bmp"</span>))
    <span class="highlight-keyword">Dim</span> buttonGreen <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> PushButtonData(<span class="highlight-literal">"Hello Green"</span>, <span class="highlight-literal">"Hello Green"</span>, assembly, <span class="highlight-literal">"Hello.HelloGreen"</span>)
    buttonGreen.Image = <span class="highlight-keyword">New</span> BitmapImage(<span class="highlight-keyword">New</span> Uri(<span class="highlight-literal">"D:\Sample\HelloWorld\bin\Debug\Green.bmp"</span>))

    <span class="highlight-comment">' add 3 stacked buttons to the panel</span>
    ribbonPanel.AddStackedItems(buttonRed, buttonBlue, buttonGreen)

    <span class="highlight-comment">' add a pull-down button to the panel </span>
    <span class="highlight-keyword">Dim</span> pulldownButton <span class="highlight-keyword">As</span> PulldownButton = <span class="highlight-keyword">TryCast</span>(ribbonPanel.AddItem(<span class="highlight-keyword">New</span> PulldownButtonData(<span class="highlight-literal">"Hello"</span>, <span class="highlight-literal">"Hello 123"</span>)), PulldownButton)
    pulldownButton.LargeImage = <span class="highlight-keyword">New</span> BitmapImage(<span class="highlight-keyword">New</span> Uri(<span class="highlight-literal">"D:\Sample\HelloWorld\bin\Debug\Hello.bmp"</span>))

    <span class="highlight-comment">' add some menu items to the pull-down button and assign bitmaps to them</span>
    <span class="highlight-keyword">Dim</span> buttonOne <span class="highlight-keyword">As</span> PushButton = pulldownButton.AddPushButton(<span class="highlight-keyword">New</span> PushButtonData(<span class="highlight-literal">"Hello One"</span>, <span class="highlight-literal">"Hello 123"</span>, assembly, <span class="highlight-literal">"Hello.HelloOne"</span>))
    buttonOne.LargeImage = <span class="highlight-keyword">New</span> BitmapImage(<span class="highlight-keyword">New</span> Uri(<span class="highlight-literal">"D:\Sample\HelloWorld\bin\Debug\One.bmp"</span>))
    <span class="highlight-keyword">Dim</span> buttonTwo <span class="highlight-keyword">As</span> PushButton = pulldownButton.AddPushButton(<span class="highlight-keyword">New</span> PushButtonData(<span class="highlight-literal">"Hello Two"</span>, <span class="highlight-literal">"Hello 123"</span>, assembly, <span class="highlight-literal">"Hello.HelloTwo"</span>))
    buttonTwo.LargeImage = <span class="highlight-keyword">New</span> BitmapImage(<span class="highlight-keyword">New</span> Uri(<span class="highlight-literal">"D:\Sample\HelloWorld\bin\Debug\Two.bmp"</span>))
    <span class="highlight-keyword">Dim</span> buttonThree <span class="highlight-keyword">As</span> PushButton = pulldownButton.AddPushButton(<span class="highlight-keyword">New</span> PushButtonData(<span class="highlight-literal">"Hello Three"</span>, <span class="highlight-literal">"Hello 123"</span>, assembly, <span class="highlight-literal">"Hello.HelloThree"</span>))
    buttonThree.LargeImage = <span class="highlight-keyword">New</span> BitmapImage(<span class="highlight-keyword">New</span> Uri(<span class="highlight-literal">"D:\Sample\HelloWorld\bin\Debug\Three.bmp"</span>))

    <span class="highlight-keyword">Return</span> Result.Succeeded
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Function</span></pre></div><div id="IDACC_code_Div3" class="codeSnippetContainerCode" style="display: none"><p>No code example is currently available or this language may not be supported.</p></div><div id="IDACC_code_Div4" class="codeSnippetContainerCode" style="display: none"><p>No code example is currently available or this language may not be supported.</p></div></div></div></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('seeAlso')" onkeypress="SectionExpandCollapse_CheckKey('seeAlso', event)" tabindex="0"><img id="seeAlsoToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />See Also</span></div><div id="seeAlsoSection" class="collapsibleSection"><h4>Reference</h4><div><a href="e86fd90a-8957-02a6-da7f-ced248966e3e.htm">Autodesk.Revit.UI Namespace</a></div></div></div></div>
        </div></body></html>