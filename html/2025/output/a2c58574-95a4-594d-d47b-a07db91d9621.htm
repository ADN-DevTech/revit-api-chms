<html><head><title>FamilyItemFactory.NewSweptBlend(Boolean, Curve, SketchPlane, SweepProfile, SweepProfile) Method</title><meta name="Title" content="NewSweptBlend(Boolean, Curve, SketchPlane, SweepProfile, SweepProfile) Method" /><meta name="Microsoft.Help.Id" content="M:Autodesk.Revit.Creation.FamilyItemFactory.NewSweptBlend(System.Boolean,Autodesk.Revit.DB.Curve,Autodesk.Revit.DB.SketchPlane,Autodesk.Revit.DB.SweepProfile,Autodesk.Revit.DB.SweepProfile)" /><meta name="Microsoft.Help.ContentType" content="Reference" /><meta name="container" content="Autodesk.Revit.Creation" /><meta name="file" content="a2c58574-95a4-594d-d47b-a07db91d9621" /><meta name="guid" content="a2c58574-95a4-594d-d47b-a07db91d9621" /><meta name="Microsoft.Help.Category" content="CSharp" /><meta name="Microsoft.Help.Category" content="VB" /><meta name="Description" content="Add a new swept blend into the family document, using a curve as the path." /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /></head><body onload="SetDefaultLanguage('cs');"><div class="pageBody"><div id="TopicContent" class="topicContent"><table class="titleTable"><tr><td class="titleColumn"><h1>Family<wbr />Item<wbr />Factory<span id="LST52501A94_0" data-languageSpecificText="cpp=::|nu=."></span>New<wbr />Swept<wbr />Blend(Boolean, Curve, Sketch<wbr />Plane, Sweep<wbr />Profile, Sweep<wbr />Profile) Method</h1></td></tr></table><div class="summary">Add a new swept blend into the family document, using a curve as the path.</div><br /><strong>Namespace:</strong> <a href="ded320da-058a-4edd-0418-0582389559a7.htm">Autodesk.Revit.Creation</a><br /><strong>Assembly:</strong> RevitAPI (in RevitAPI.dll) Version: 25.0.0.0 (25.0.0.0)<div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDB')" onkeypress="SectionExpandCollapse_CheckKey('IDB', event)" tabindex="0"><img id="IDBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Syntax</span></div><div id="IDBSection" class="collapsibleSection"><div id="IDAB" class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="IDAB_tab1" class="codeSnippetContainerTab"><a href="#" onclick="ChangeTab('IDAB','cs','1','4');return false;">C#</a></div><div id="IDAB_tab2" class="codeSnippetContainerTab"><a href="#" onclick="ChangeTab('IDAB','vb','2','4');return false;">VB</a></div><div id="IDAB_tab3" class="codeSnippetContainerTab"><a href="#" onclick="ChangeTab('IDAB','cpp','3','4');return false;">C++</a></div><div id="IDAB_tab4" class="codeSnippetContainerTab"><a href="#" onclick="ChangeTab('IDAB','fs','4','4');return false;">F#</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="IDAB_copyCode" href="#" class="copyCodeSnippet" onclick="CopyToClipboard('IDAB');return false;" title="Copy">Copy</a></div></div><div id="IDAB_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="keyword">public</span> <span class="identifier">SweptBlend</span> <span class="identifier">NewSweptBlend</span>(
	<span class="identifier">bool</span> <span class="parameter">isSolid</span>,
	<span class="identifier">Curve</span> <span class="parameter">path</span>,
	<span class="identifier">SketchPlane</span> <span class="parameter">pathPlane</span>,
	<span class="identifier">SweepProfile</span> <span class="parameter">bottomProfile</span>,
	<span class="identifier">SweepProfile</span> <span class="parameter">topProfile</span>
)</pre></div><div id="IDAB_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">Public</span> <span class="keyword">Function</span> <span class="identifier">NewSweptBlend</span> ( 
	<span class="parameter">isSolid</span> <span class="keyword">As</span> <span class="identifier">Boolean</span>,
	<span class="parameter">path</span> <span class="keyword">As</span> <span class="identifier">Curve</span>,
	<span class="parameter">pathPlane</span> <span class="keyword">As</span> <span class="identifier">SketchPlane</span>,
	<span class="parameter">bottomProfile</span> <span class="keyword">As</span> <span class="identifier">SweepProfile</span>,
	<span class="parameter">topProfile</span> <span class="keyword">As</span> <span class="identifier">SweepProfile</span>
) <span class="keyword">As</span> <span class="identifier">SweptBlend</span></pre></div><div id="IDAB_code_Div3" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">public</span>:
<span class="identifier">SweptBlend</span>^ <span class="identifier">NewSweptBlend</span>(
	<span class="identifier">bool</span> <span class="parameter">isSolid</span>, 
	<span class="identifier">Curve</span>^ <span class="parameter">path</span>, 
	<span class="identifier">SketchPlane</span>^ <span class="parameter">pathPlane</span>, 
	<span class="identifier">SweepProfile</span>^ <span class="parameter">bottomProfile</span>, 
	<span class="identifier">SweepProfile</span>^ <span class="parameter">topProfile</span>
)</pre></div><div id="IDAB_code_Div4" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">member</span> <span class="identifier">NewSweptBlend</span> : 
        <span class="parameter">isSolid</span> : <span class="identifier">bool</span> * 
        <span class="parameter">path</span> : <span class="identifier">Curve</span> * 
        <span class="parameter">pathPlane</span> : <span class="identifier">SketchPlane</span> * 
        <span class="parameter">bottomProfile</span> : <span class="identifier">SweepProfile</span> * 
        <span class="parameter">topProfile</span> : <span class="identifier">SweepProfile</span> <span class="keyword">-&gt;</span> <span class="identifier">SweptBlend</span> </pre></div></div></div><h4>Parameters</h4><dl><dt class="has-text-weight-normal"><span class="parameter">isSolid</span>  <a href="https://learn.microsoft.com/dotnet/api/system.boolean" target="_blank" rel="noopener noreferrer">Boolean</a></dt><dd>Indicates if the swept blend is Solid or Void.</dd><dt class="has-text-weight-normal"><span class="parameter">path</span>  <a href="400cc9b6-9ff7-de85-6fd8-c20002209d25.htm">Curve</a></dt><dd>The path of the swept blend. The path should be a single curve.
Or the path can be a single sketched curve, and the curve is not required to reference existing geometry.</dd><dt class="has-text-weight-normal"><span class="parameter">pathPlane</span>  <a href="ba104029-d175-7e75-caef-667a4281f4af.htm">SketchPlane</a></dt><dd> The sketch plane for the path. Use this when you want to create 
a 2D path that resides on an existing planar face. Optional, can be <span class="keyword"><span id="LST52501A94_1" data-languageSpecificText="cpp=nullptr|vb=Nothing|nu=null"></span></span> for a path curve obtained from geometry or 
for 2D paths where the path should not reference an existing edge.</dd><dt class="has-text-weight-normal"><span class="parameter">bottomProfile</span>  <a href="1b77356c-e92b-e151-f8c9-727b3e2b8934.htm">SweepProfile</a></dt><dd>The bottom profile of the newly created Swept blend. It should consist of only one curve loop.
The profile must lie in the XY plane, and it will be transformed to the profile plane automatically.</dd><dt class="has-text-weight-normal"><span class="parameter">topProfile</span>  <a href="1b77356c-e92b-e151-f8c9-727b3e2b8934.htm">SweepProfile</a></dt><dd>The top profile of the newly created Swept blend. It should consist of only one curve loop.
The profile must lie in the XY plane, and it will be transformed to the profile plane automatically.</dd></dl><h4>Return Value</h4><a href="8e50efa3-fc77-64f1-7c14-4e2089699921.htm">SweptBlend</a><br />If creation was successful the new Swept blend is returned, 
otherwise an exception with failure information will be thrown.</div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDJC')" onkeypress="SectionExpandCollapse_CheckKey('IDJC', event)" tabindex="0"><img id="IDJCToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Exceptions</span></div><div id="IDJCSection" class="collapsibleSection"><table><tr><th>Exception</th><th>Condition</th></tr><tr><td><a href="631e1424-60f4-929b-4e52-dda9dcd26316.htm">ArgumentNullException</a></td><td>
Thrown when the input arguments-path/bottomProfile/topProfile-are <span class="keyword"><span id="LST52501A94_2" data-languageSpecificText="cpp=nullptr|vb=Nothing|nu=null"></span></span>.
</td></tr><tr><td><a href="2e6e4206-97a8-dd4b-df5d-4269f4bb6088.htm">ArgumentException</a></td><td>
Thrown when the input argument-bottomProfile/topProfile-is a curve based profile and the profile
is <span class="keyword"><span id="LST52501A94_3" data-languageSpecificText="cpp=nullptr|vb=Nothing|nu=null"></span></span>.
</td></tr><tr><td><a href="2e6e4206-97a8-dd4b-df5d-4269f4bb6088.htm">ArgumentException</a></td><td>
Thrown when the input argument-bottomProfile/topProfile-is a curve based profile and the profile
contains <span class="keyword"><span id="LST52501A94_4" data-languageSpecificText="cpp=nullptr|vb=Nothing|nu=null"></span></span> or more than one curve loops.
</td></tr><tr><td><a href="2e6e4206-97a8-dd4b-df5d-4269f4bb6088.htm">ArgumentException</a></td><td>
Thrown when the input argument-bottomProfile/topProfile-is a family symbol based profile and the 
family symbol profile is <span class="keyword"><span id="LST52501A94_5" data-languageSpecificText="cpp=nullptr|vb=Nothing|nu=null"></span></span>.
</td></tr><tr><td><a href="9e715f03-3884-e539-4dd6-8d7545733adc.htm">InvalidOperationException</a></td><td>
Thrown when creation is attempted in Conceptual Mass, 2D, or other family where swept blends cannot be created.
</td></tr><tr><td><a href="9e715f03-3884-e539-4dd6-8d7545733adc.htm">InvalidOperationException</a></td><td>
Thrown when the creation failed.
</td></tr></table></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDIC')" onkeypress="SectionExpandCollapse_CheckKey('IDIC', event)" tabindex="0"><img id="IDICToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Remarks</span></div><div id="IDICSection" class="collapsibleSection">This method creates a swept blend in a family document. The swept blend will trace from bottom profile  
to the top along the path. Revit will determine an appropriate default mapping for the vertices of the 
two profiles. If the input profile is to be a cyclic profile (curve or ellipse) it must be split into at
least two segments, so that Revit can find vertices to use for mapping the swept blend.</div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDPC')" onkeypress="SectionExpandCollapse_CheckKey('IDPC', event)" tabindex="0"><img id="IDPCToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Example</span></div><div id="IDPCSection" class="collapsibleSection"><div id="IDAPC" class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="IDAPC_tab1" class="codeSnippetContainerTab"><a href="#" onclick="ChangeTab('IDAPC','cs','1','4');return false;">C#</a></div><div id="IDAPC_tab2" class="codeSnippetContainerTab"><a href="#" onclick="ChangeTab('IDAPC','vb','2','4');return false;">VB</a></div><div id="IDAPC_tab3" class="codeSnippetContainerTabPhantom"><a href="#" onclick="ChangeTab('IDAPC','cpp','3','4');return false;">C++</a></div><div id="IDAPC_tab4" class="codeSnippetContainerTabPhantom"><a href="#" onclick="ChangeTab('IDAPC','fs','4','4');return false;">F#</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="IDAPC_copyCode" href="#" class="copyCodeSnippet" onclick="CopyToClipboard('IDAPC');return false;" title="Copy">Copy</a></div></div><div id="IDAPC_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">private</span> SweptBlend CreateSweptBlend(Autodesk.Revit.DB.Document document, SketchPlane sketchPlane)
{
    SweptBlend newSweptBlend = <span class="highlight-keyword">null</span>;

    <span class="highlight-comment">// make sure we have a family document</span>
    <span class="highlight-keyword">if</span> (<span class="highlight-keyword">true</span> == document.IsFamilyDocument)
    {
        <span class="highlight-comment">// Create top and bottom profiles and path curve</span>
        XYZ pnt1 = <span class="highlight-keyword">new</span> XYZ(<span class="highlight-number">0</span>, <span class="highlight-number">0</span>, <span class="highlight-number">0</span>);
        XYZ pnt2 = <span class="highlight-keyword">new</span> XYZ(<span class="highlight-number">1</span>, <span class="highlight-number">0</span>, <span class="highlight-number">0</span>);
        XYZ pnt3 = <span class="highlight-keyword">new</span> XYZ(<span class="highlight-number">1</span>, <span class="highlight-number">1</span>, <span class="highlight-number">0</span>);
        XYZ pnt4 = <span class="highlight-keyword">new</span> XYZ(<span class="highlight-number">0</span>, <span class="highlight-number">1</span>, <span class="highlight-number">0</span>);
        XYZ pnt5 = <span class="highlight-keyword">new</span> XYZ(<span class="highlight-number">0</span>, <span class="highlight-number">0</span>, <span class="highlight-number">1</span>);

        CurveArrArray arrarr1 = <span class="highlight-keyword">new</span> CurveArrArray();
        CurveArray arr1 = <span class="highlight-keyword">new</span> CurveArray();
        arr1.Append(Line.CreateBound(pnt1, pnt2));
        arr1.Append(Line.CreateBound(pnt2, pnt3));
        arr1.Append(Line.CreateBound(pnt3, pnt4));
        arr1.Append(Line.CreateBound(pnt4, pnt1));
        arrarr1.Append(arr1);

        XYZ pnt6 = <span class="highlight-keyword">new</span> XYZ(<span class="highlight-number">0.5</span>, <span class="highlight-number">0</span>, <span class="highlight-number">0</span>);
        XYZ pnt7 = <span class="highlight-keyword">new</span> XYZ(<span class="highlight-number">1</span>, <span class="highlight-number">0.5</span>, <span class="highlight-number">0</span>);
        XYZ pnt8 = <span class="highlight-keyword">new</span> XYZ(<span class="highlight-number">0.5</span>, <span class="highlight-number">1</span>, <span class="highlight-number">0</span>);
        XYZ pnt9 = <span class="highlight-keyword">new</span> XYZ(<span class="highlight-number">0</span>, <span class="highlight-number">0.5</span>, <span class="highlight-number">0</span>);
        CurveArrArray arrarr2 = <span class="highlight-keyword">new</span> CurveArrArray();
        CurveArray arr2 = <span class="highlight-keyword">new</span> CurveArray();
        arr2.Append(Line.CreateBound(pnt6, pnt7));
        arr2.Append(Line.CreateBound(pnt7, pnt8));
        arr2.Append(Line.CreateBound(pnt8, pnt9));
        arr2.Append(Line.CreateBound(pnt9, pnt6));
        arrarr2.Append(arr2);

        SweepProfile bottomProfile = document.Application.Create.NewCurveLoopsProfile(arrarr1);
        SweepProfile topProfile = document.Application.Create.NewCurveLoopsProfile(arrarr2);

        XYZ pnt10 = <span class="highlight-keyword">new</span> XYZ(<span class="highlight-number">5</span>, <span class="highlight-number">0</span>, <span class="highlight-number">0</span>);
        XYZ pnt11 = <span class="highlight-keyword">new</span> XYZ(<span class="highlight-number">0</span>, <span class="highlight-number">20</span>, <span class="highlight-number">0</span>);
        Curve curve = Line.CreateBound(pnt10, pnt11);

        <span class="highlight-comment">// here create rectangular swept blend</span>
        newSweptBlend = document.FamilyCreate.NewSweptBlend(<span class="highlight-keyword">true</span>, curve, sketchPlane, bottomProfile, topProfile);
        <span class="highlight-keyword">if</span> (<span class="highlight-keyword">null</span> != newSweptBlend)
        {
            <span class="highlight-comment">// move to proper place</span>
            XYZ transPoint1 = <span class="highlight-keyword">new</span> XYZ(<span class="highlight-number">11</span>, <span class="highlight-number">32</span>, <span class="highlight-number">0</span>);
            ElementTransformUtils.MoveElement(document, newSweptBlend.Id, transPoint1);
        }
        <span class="highlight-keyword">else</span>
        {
            <span class="highlight-keyword">throw</span> <span class="highlight-keyword">new</span> Exception(<span class="highlight-literal">"Failed to create new SweptBlend."</span>);
        }
    }
    <span class="highlight-keyword">else</span>
    {
        <span class="highlight-keyword">throw</span> <span class="highlight-keyword">new</span> Exception(<span class="highlight-literal">"Please open a Family document before invoking this command."</span>);
    }
    <span class="highlight-keyword">return</span> newSweptBlend;
}</pre></div><div id="IDAPC_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="highlight-keyword">Private</span> <span class="highlight-keyword">Function</span> CreateSweptBlend(document <span class="highlight-keyword">As</span> Autodesk.Revit.DB.Document, sketchPlane <span class="highlight-keyword">As</span> SketchPlane) <span class="highlight-keyword">As</span> SweptBlend
    <span class="highlight-keyword">Dim</span> newSweptBlend <span class="highlight-keyword">As</span> SweptBlend = <span class="highlight-keyword">Nothing</span>

    <span class="highlight-comment">' make sure we have a family document</span>
    <span class="highlight-keyword">If</span> <span class="highlight-keyword">True</span> = document.IsFamilyDocument <span class="highlight-keyword">Then</span>
        <span class="highlight-comment">' Create top and bottom profiles and path curve</span>
        <span class="highlight-keyword">Dim</span> pnt1 <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> XYZ(<span class="highlight-number">0</span>, <span class="highlight-number">0</span>, <span class="highlight-number">0</span>)
        <span class="highlight-keyword">Dim</span> pnt2 <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> XYZ(<span class="highlight-number">1</span>, <span class="highlight-number">0</span>, <span class="highlight-number">0</span>)
        <span class="highlight-keyword">Dim</span> pnt3 <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> XYZ(<span class="highlight-number">1</span>, <span class="highlight-number">1</span>, <span class="highlight-number">0</span>)
        <span class="highlight-keyword">Dim</span> pnt4 <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> XYZ(<span class="highlight-number">0</span>, <span class="highlight-number">1</span>, <span class="highlight-number">0</span>)
        <span class="highlight-keyword">Dim</span> pnt5 <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> XYZ(<span class="highlight-number">0</span>, <span class="highlight-number">0</span>, <span class="highlight-number">1</span>)

        <span class="highlight-keyword">Dim</span> arrarr1 <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> CurveArrArray()
        <span class="highlight-keyword">Dim</span> arr1 <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> CurveArray()
        arr1.Append(Line.CreateBound(pnt1, pnt2))
        arr1.Append(Line.CreateBound(pnt2, pnt3))
        arr1.Append(Line.CreateBound(pnt3, pnt4))
        arr1.Append(Line.CreateBound(pnt4, pnt1))
        arrarr1.Append(arr1)

        <span class="highlight-keyword">Dim</span> pnt6 <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> XYZ(<span class="highlight-number">0.5</span>, <span class="highlight-number">0</span>, <span class="highlight-number">0</span>)
        <span class="highlight-keyword">Dim</span> pnt7 <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> XYZ(<span class="highlight-number">1</span>, <span class="highlight-number">0.5</span>, <span class="highlight-number">0</span>)
        <span class="highlight-keyword">Dim</span> pnt8 <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> XYZ(<span class="highlight-number">0.5</span>, <span class="highlight-number">1</span>, <span class="highlight-number">0</span>)
        <span class="highlight-keyword">Dim</span> pnt9 <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> XYZ(<span class="highlight-number">0</span>, <span class="highlight-number">0.5</span>, <span class="highlight-number">0</span>)
        <span class="highlight-keyword">Dim</span> arrarr2 <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> CurveArrArray()
        <span class="highlight-keyword">Dim</span> arr2 <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> CurveArray()
        arr2.Append(Line.CreateBound(pnt6, pnt7))
        arr2.Append(Line.CreateBound(pnt7, pnt8))
        arr2.Append(Line.CreateBound(pnt8, pnt9))
        arr2.Append(Line.CreateBound(pnt9, pnt6))
        arrarr2.Append(arr2)

        <span class="highlight-keyword">Dim</span> bottomProfile <span class="highlight-keyword">As</span> SweepProfile = document.Application.Create.NewCurveLoopsProfile(arrarr1)
        <span class="highlight-keyword">Dim</span> topProfile <span class="highlight-keyword">As</span> SweepProfile = document.Application.Create.NewCurveLoopsProfile(arrarr2)

        <span class="highlight-keyword">Dim</span> pnt10 <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> XYZ(<span class="highlight-number">5</span>, <span class="highlight-number">0</span>, <span class="highlight-number">0</span>)
        <span class="highlight-keyword">Dim</span> pnt11 <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> XYZ(<span class="highlight-number">0</span>, <span class="highlight-number">20</span>, <span class="highlight-number">0</span>)
        <span class="highlight-keyword">Dim</span> curve <span class="highlight-keyword">As</span> Curve = Line.CreateBound(pnt10, pnt11)

        <span class="highlight-comment">' here create rectangular swept blend</span>
        newSweptBlend = document.FamilyCreate.NewSweptBlend(<span class="highlight-keyword">True</span>, curve, sketchPlane, bottomProfile, topProfile)
        <span class="highlight-keyword">If</span> newSweptBlend <span class="highlight-keyword">IsNot</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
            <span class="highlight-comment">' move to proper place</span>
            <span class="highlight-keyword">Dim</span> transPoint1 <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> XYZ(<span class="highlight-number">11</span>, <span class="highlight-number">32</span>, <span class="highlight-number">0</span>)
            ElementTransformUtils.MoveElement(document, newSweptBlend.Id, transPoint1)
        <span class="highlight-keyword">Else</span>
            <span class="highlight-keyword">Throw</span> <span class="highlight-keyword">New</span> Exception(<span class="highlight-literal">"Failed to create new SweptBlend."</span>)
        <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
    <span class="highlight-keyword">Else</span>
        <span class="highlight-keyword">Throw</span> <span class="highlight-keyword">New</span> Exception(<span class="highlight-literal">"Please open a Family document before invoking this command."</span>)
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
    <span class="highlight-keyword">Return</span> newSweptBlend
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Function</span></pre></div><div id="IDAPC_code_Div3" class="codeSnippetContainerCode" style="display: none"><p>No code example is currently available or this language may not be supported.</p></div><div id="IDAPC_code_Div4" class="codeSnippetContainerCode" style="display: none"><p>No code example is currently available or this language may not be supported.</p></div></div></div></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('seeAlso')" onkeypress="SectionExpandCollapse_CheckKey('seeAlso', event)" tabindex="0"><img id="seeAlsoToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />See Also</span></div><div id="seeAlsoSection" class="collapsibleSection"><h4>Reference</h4><div><a href="a7622967-1381-c17f-ed04-1ebe40da0440.htm">FamilyItemFactory Class</a></div><div><a href="3fc38638-f721-5236-1e00-8e7539d2b60d.htm">NewSweptBlend Overload</a></div><div><a href="ded320da-058a-4edd-0418-0582389559a7.htm">Autodesk.Revit.Creation Namespace</a></div></div></div></div>
        </div></body></html>