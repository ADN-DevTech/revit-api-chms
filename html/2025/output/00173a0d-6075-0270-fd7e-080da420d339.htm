<html><head><title>FamilyItemFactory.NewBlend Method</title><meta name="Title" content="NewBlend Method" /><meta name="Microsoft.Help.Id" content="M:Autodesk.Revit.Creation.FamilyItemFactory.NewBlend(System.Boolean,Autodesk.Revit.DB.CurveArray,Autodesk.Revit.DB.CurveArray,Autodesk.Revit.DB.SketchPlane)" /><meta name="Microsoft.Help.ContentType" content="Reference" /><meta name="System.Keywords" content="FamilyItemFactory.NewBlend method" /><meta name="System.Keywords" content="NewBlend method" /><meta name="Microsoft.Help.F1" content="Autodesk.Revit.Creation.FamilyItemFactory.NewBlend" /><meta name="Microsoft.Help.F1" content="FamilyItemFactory.NewBlend" /><meta name="Microsoft.Help.F1" content="NewBlend" /><meta name="container" content="Autodesk.Revit.Creation" /><meta name="file" content="00173a0d-6075-0270-fd7e-080da420d339" /><meta name="guid" content="00173a0d-6075-0270-fd7e-080da420d339" /><meta name="Microsoft.Help.Category" content="CSharp" /><meta name="Microsoft.Help.Category" content="VB" /><meta name="Description" content="Add a new Blend instance into the Autodesk Revit family document." /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /></head><body onload="SetDefaultLanguage('cs');"><div class="pageBody"><div id="TopicContent" class="topicContent"><table class="titleTable"><tr><td class="titleColumn"><h1>Family<wbr />Item<wbr />Factory<span id="LST11403704_0" data-languageSpecificText="cpp=::|nu=."></span>New<wbr />Blend Method</h1></td></tr></table><div class="summary">Add a new Blend instance into the Autodesk Revit family document.</div><br /><strong>Namespace:</strong> <a href="ded320da-058a-4edd-0418-0582389559a7.htm">Autodesk.Revit.Creation</a><br /><strong>Assembly:</strong> RevitAPI (in RevitAPI.dll) Version: 25.0.0.0 (25.0.0.0)<div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDB')" onkeypress="SectionExpandCollapse_CheckKey('IDB', event)" tabindex="0"><img id="IDBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Syntax</span></div><div id="IDBSection" class="collapsibleSection"><div id="IDAB" class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="IDAB_tab1" class="codeSnippetContainerTab"><a href="#" onclick="ChangeTab('IDAB','cs','1','4');return false;">C#</a></div><div id="IDAB_tab2" class="codeSnippetContainerTab"><a href="#" onclick="ChangeTab('IDAB','vb','2','4');return false;">VB</a></div><div id="IDAB_tab3" class="codeSnippetContainerTab"><a href="#" onclick="ChangeTab('IDAB','cpp','3','4');return false;">C++</a></div><div id="IDAB_tab4" class="codeSnippetContainerTab"><a href="#" onclick="ChangeTab('IDAB','fs','4','4');return false;">F#</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="IDAB_copyCode" href="#" class="copyCodeSnippet" onclick="CopyToClipboard('IDAB');return false;" title="Copy">Copy</a></div></div><div id="IDAB_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="keyword">public</span> <span class="identifier">Blend</span> <span class="identifier">NewBlend</span>(
	<span class="identifier">bool</span> <span class="parameter">isSolid</span>,
	<span class="identifier">CurveArray</span> <span class="parameter">profile1</span>,
	<span class="identifier">CurveArray</span> <span class="parameter">profile2</span>,
	<span class="identifier">SketchPlane</span> <span class="parameter">sketchPlane</span>
)</pre></div><div id="IDAB_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">Public</span> <span class="keyword">Function</span> <span class="identifier">NewBlend</span> ( 
	<span class="parameter">isSolid</span> <span class="keyword">As</span> <span class="identifier">Boolean</span>,
	<span class="parameter">profile1</span> <span class="keyword">As</span> <span class="identifier">CurveArray</span>,
	<span class="parameter">profile2</span> <span class="keyword">As</span> <span class="identifier">CurveArray</span>,
	<span class="parameter">sketchPlane</span> <span class="keyword">As</span> <span class="identifier">SketchPlane</span>
) <span class="keyword">As</span> <span class="identifier">Blend</span></pre></div><div id="IDAB_code_Div3" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">public</span>:
<span class="identifier">Blend</span>^ <span class="identifier">NewBlend</span>(
	<span class="identifier">bool</span> <span class="parameter">isSolid</span>, 
	<span class="identifier">CurveArray</span>^ <span class="parameter">profile1</span>, 
	<span class="identifier">CurveArray</span>^ <span class="parameter">profile2</span>, 
	<span class="identifier">SketchPlane</span>^ <span class="parameter">sketchPlane</span>
)</pre></div><div id="IDAB_code_Div4" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">member</span> <span class="identifier">NewBlend</span> : 
        <span class="parameter">isSolid</span> : <span class="identifier">bool</span> * 
        <span class="parameter">profile1</span> : <span class="identifier">CurveArray</span> * 
        <span class="parameter">profile2</span> : <span class="identifier">CurveArray</span> * 
        <span class="parameter">sketchPlane</span> : <span class="identifier">SketchPlane</span> <span class="keyword">-&gt;</span> <span class="identifier">Blend</span> </pre></div></div></div><h4>Parameters</h4><dl><dt class="has-text-weight-normal"><span class="parameter">isSolid</span>  <a href="https://learn.microsoft.com/dotnet/api/system.boolean" target="_blank" rel="noopener noreferrer">Boolean</a></dt><dd>Indicates if the Blend is Solid or Void.</dd><dt class="has-text-weight-normal"><span class="parameter">profile1</span>  <a href="55103aad-38fd-45d2-6bf7-67a5203e99f3.htm">CurveArray</a></dt><dd>The first blend section. It should represent a single, planar curve loop.</dd><dt class="has-text-weight-normal"><span class="parameter">profile2</span>  <a href="55103aad-38fd-45d2-6bf7-67a5203e99f3.htm">CurveArray</a></dt><dd>The second blend section. It should represent a single, planar curve loop
lying in a plane parallel to that of the first blend section.</dd><dt class="has-text-weight-normal"><span class="parameter">sketchPlane</span>  <a href="ba104029-d175-7e75-caef-667a4281f4af.htm">SketchPlane</a></dt><dd>The sketch plane for the first profile. Use this to associate the 
"base" of the blend to geometry from another element. Optional, it can be <span class="keyword"><span id="LST11403704_1" data-languageSpecificText="cpp=nullptr|vb=Nothing|nu=null"></span></span> if you want Revit
to derive a new sketch plane from the geometry of the base profile.</dd></dl><h4>Return Value</h4><a href="6875edf6-f0ba-60bc-f294-21bb689c5994.htm">Blend</a><br />If creation was successful the new blend is returned, 
otherwise an exception with failure information will be thrown.</div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDHC')" onkeypress="SectionExpandCollapse_CheckKey('IDHC', event)" tabindex="0"><img id="IDHCToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Exceptions</span></div><div id="IDHCSection" class="collapsibleSection"><table><tr><th>Exception</th><th>Condition</th></tr><tr><td><a href="2e6e4206-97a8-dd4b-df5d-4269f4bb6088.htm">ArgumentException</a></td><td>
Thrown when the argument is invalid.
</td></tr><tr><td><a href="9e715f03-3884-e539-4dd6-8d7545733adc.htm">InvalidOperationException</a></td><td>
Thrown when creation is attempted in Conceptual Mass, 2D, or other family where blends cannot be created.
</td></tr><tr><td><a href="9e715f03-3884-e539-4dd6-8d7545733adc.htm">InvalidOperationException</a></td><td>
Thrown when the creation failed.
</td></tr></table></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDGC')" onkeypress="SectionExpandCollapse_CheckKey('IDGC', event)" tabindex="0"><img id="IDGCToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Remarks</span></div><div id="IDGCSection" class="collapsibleSection">This method creates a blend in a family document. Revit will determine an appropriate 
default mapping for the vertices of the two profiles.
A profile loop cannot contain just one closed curve - in such a case, the curve must be
split into at least two segments, so that Revit can find vertices to use for mapping the blend.

Caution: several aspects of the Blend are not (easily) predictable from the input arguments.
For example, the Blend's TopOffset may be less than its BottomOffset in some cases,
depending on the orientations of the profile loops and the orientation of the sketch plane
(if a sketch plane is provided). Also, such orientations can affect whether the first or
second profile lies in the sketch plane (if a sketch plane is provided).
</div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDKC')" onkeypress="SectionExpandCollapse_CheckKey('IDKC', event)" tabindex="0"><img id="IDKCToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Example</span></div><div id="IDKCSection" class="collapsibleSection"><div id="IDAKC" class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="IDAKC_tab1" class="codeSnippetContainerTab"><a href="#" onclick="ChangeTab('IDAKC','cs','1','4');return false;">C#</a></div><div id="IDAKC_tab2" class="codeSnippetContainerTab"><a href="#" onclick="ChangeTab('IDAKC','vb','2','4');return false;">VB</a></div><div id="IDAKC_tab3" class="codeSnippetContainerTabPhantom"><a href="#" onclick="ChangeTab('IDAKC','cpp','3','4');return false;">C++</a></div><div id="IDAKC_tab4" class="codeSnippetContainerTabPhantom"><a href="#" onclick="ChangeTab('IDAKC','fs','4','4');return false;">F#</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="IDAKC_copyCode" href="#" class="copyCodeSnippet" onclick="CopyToClipboard('IDAKC');return false;" title="Copy">Copy</a></div></div><div id="IDAKC_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">private</span> Blend CreateBlend(UIApplication application, SketchPlane sketchPlane)
{
    Blend blend = <span class="highlight-keyword">null</span>;

    <span class="highlight-comment">// make sure we have a family document</span>
    Document familyDocument = application.ActiveUIDocument.Document;
    <span class="highlight-keyword">if</span> (<span class="highlight-keyword">true</span> == familyDocument.IsFamilyDocument)
    {
        <span class="highlight-comment">// Define top and base profiles for the blend</span>
        CurveArray topProfile = <span class="highlight-keyword">new</span> CurveArray();
        CurveArray baseProfile = <span class="highlight-keyword">new</span> CurveArray();

        <span class="highlight-comment">// create rectangular base profile</span>
        XYZ p00 = XYZ.Zero;
        XYZ p01 = <span class="highlight-keyword">new</span> XYZ(<span class="highlight-number">10</span>, <span class="highlight-number">0</span>, <span class="highlight-number">0</span>);
        XYZ p02 = <span class="highlight-keyword">new</span> XYZ(<span class="highlight-number">10</span>, <span class="highlight-number">10</span>, <span class="highlight-number">0</span>);
        XYZ p03 = <span class="highlight-keyword">new</span> XYZ(<span class="highlight-number">0</span>, <span class="highlight-number">10</span>, <span class="highlight-number">0</span>);
        Line line01 = Line.CreateBound(p00, p01);
        Line line02 = Line.CreateBound(p01, p02);
        Line line03 = Line.CreateBound(p02, p03);
        Line line04 = Line.CreateBound(p03, p00);

        baseProfile.Append(line01);
        baseProfile.Append(line02);
        baseProfile.Append(line03);
        baseProfile.Append(line04);

        <span class="highlight-comment">// create rectangular top profile</span>
        XYZ p10 = <span class="highlight-keyword">new</span> XYZ(<span class="highlight-number">5</span>, <span class="highlight-number">2</span>, <span class="highlight-number">10</span>);
        XYZ p11 = <span class="highlight-keyword">new</span> XYZ(<span class="highlight-number">8</span>, <span class="highlight-number">5</span>, <span class="highlight-number">10</span>);
        XYZ p12 = <span class="highlight-keyword">new</span> XYZ(<span class="highlight-number">5</span>, <span class="highlight-number">8</span>, <span class="highlight-number">10</span>);
        XYZ p13 = <span class="highlight-keyword">new</span> XYZ(<span class="highlight-number">2</span>, <span class="highlight-number">5</span>, <span class="highlight-number">10</span>);
        Line line11 = Line.CreateBound(p10, p11);
        Line line12 = Line.CreateBound(p11, p12);
        Line line13 = Line.CreateBound(p12, p13);
        Line line14 = Line.CreateBound(p13, p10);

        topProfile.Append(line11);
        topProfile.Append(line12);
        topProfile.Append(line13);
        topProfile.Append(line14);

        <span class="highlight-comment">// now create solid rectangular blend</span>
        blend = familyDocument.FamilyCreate.NewBlend(<span class="highlight-keyword">true</span>, topProfile, baseProfile, sketchPlane);

        <span class="highlight-keyword">if</span> (<span class="highlight-keyword">null</span> != blend)
        {
            <span class="highlight-comment">// move to proper place</span>
            XYZ transPoint1 = <span class="highlight-keyword">new</span> XYZ(<span class="highlight-number">0</span>, <span class="highlight-number">11</span>, <span class="highlight-number">0</span>);
            ElementTransformUtils.MoveElement(familyDocument, blend.Id, transPoint1);
        }
        <span class="highlight-keyword">else</span>
        {
            <span class="highlight-keyword">throw</span> <span class="highlight-keyword">new</span> Exception(<span class="highlight-literal">"Create new Blend failed."</span>);
        }
    }
    <span class="highlight-keyword">else</span>
    {
        <span class="highlight-keyword">throw</span> <span class="highlight-keyword">new</span> Exception(<span class="highlight-literal">"Please open a Family document before invoking this command."</span>);
    }

    <span class="highlight-keyword">return</span> blend;
}</pre></div><div id="IDAKC_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="highlight-keyword">Private</span> <span class="highlight-keyword">Function</span> CreateBlend(application <span class="highlight-keyword">As</span> UIApplication, sketchPlane <span class="highlight-keyword">As</span> SketchPlane) <span class="highlight-keyword">As</span> Blend
    <span class="highlight-keyword">Dim</span> blend <span class="highlight-keyword">As</span> Blend = <span class="highlight-keyword">Nothing</span>

    <span class="highlight-comment">' make sure we have a family document</span>
    <span class="highlight-keyword">Dim</span> familyDocument <span class="highlight-keyword">As</span> Document = application.ActiveUIDocument.Document
    <span class="highlight-keyword">If</span> <span class="highlight-keyword">True</span> = familyDocument.IsFamilyDocument <span class="highlight-keyword">Then</span>
        <span class="highlight-comment">' Define top and base profiles for the blend</span>
        <span class="highlight-keyword">Dim</span> topProfile <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> CurveArray()
        <span class="highlight-keyword">Dim</span> baseProfile <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> CurveArray()

        <span class="highlight-comment">' create rectangular base profile</span>
        <span class="highlight-keyword">Dim</span> p00 <span class="highlight-keyword">As</span> XYZ = XYZ.Zero
        <span class="highlight-keyword">Dim</span> p01 <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> XYZ(<span class="highlight-number">10</span>, <span class="highlight-number">0</span>, <span class="highlight-number">0</span>)
        <span class="highlight-keyword">Dim</span> p02 <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> XYZ(<span class="highlight-number">10</span>, <span class="highlight-number">10</span>, <span class="highlight-number">0</span>)
        <span class="highlight-keyword">Dim</span> p03 <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> XYZ(<span class="highlight-number">0</span>, <span class="highlight-number">10</span>, <span class="highlight-number">0</span>)
        <span class="highlight-keyword">Dim</span> line01 <span class="highlight-keyword">As</span> Line = Line.CreateBound(p00, p01)
        <span class="highlight-keyword">Dim</span> line02 <span class="highlight-keyword">As</span> Line = Line.CreateBound(p01, p02)
        <span class="highlight-keyword">Dim</span> line03 <span class="highlight-keyword">As</span> Line = Line.CreateBound(p02, p03)
        <span class="highlight-keyword">Dim</span> line04 <span class="highlight-keyword">As</span> Line = Line.CreateBound(p03, p00)

        baseProfile.Append(line01)
        baseProfile.Append(line02)
        baseProfile.Append(line03)
        baseProfile.Append(line04)

        <span class="highlight-comment">' create rectangular top profile</span>
        <span class="highlight-keyword">Dim</span> p10 <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> XYZ(<span class="highlight-number">5</span>, <span class="highlight-number">2</span>, <span class="highlight-number">10</span>)
        <span class="highlight-keyword">Dim</span> p11 <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> XYZ(<span class="highlight-number">8</span>, <span class="highlight-number">5</span>, <span class="highlight-number">10</span>)
        <span class="highlight-keyword">Dim</span> p12 <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> XYZ(<span class="highlight-number">5</span>, <span class="highlight-number">8</span>, <span class="highlight-number">10</span>)
        <span class="highlight-keyword">Dim</span> p13 <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> XYZ(<span class="highlight-number">2</span>, <span class="highlight-number">5</span>, <span class="highlight-number">10</span>)
        <span class="highlight-keyword">Dim</span> line11 <span class="highlight-keyword">As</span> Line = Line.CreateBound(p10, p11)
        <span class="highlight-keyword">Dim</span> line12 <span class="highlight-keyword">As</span> Line = Line.CreateBound(p11, p12)
        <span class="highlight-keyword">Dim</span> line13 <span class="highlight-keyword">As</span> Line = Line.CreateBound(p12, p13)
        <span class="highlight-keyword">Dim</span> line14 <span class="highlight-keyword">As</span> Line = Line.CreateBound(p13, p10)

        topProfile.Append(line11)
        topProfile.Append(line12)
        topProfile.Append(line13)
        topProfile.Append(line14)

        <span class="highlight-comment">' now create solid rectangular blend</span>
        blend = familyDocument.FamilyCreate.NewBlend(<span class="highlight-keyword">True</span>, topProfile, baseProfile, sketchPlane)

        <span class="highlight-keyword">If</span> blend <span class="highlight-keyword">IsNot</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
            <span class="highlight-comment">' move to proper place</span>
            <span class="highlight-keyword">Dim</span> transPoint1 <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> XYZ(<span class="highlight-number">0</span>, <span class="highlight-number">11</span>, <span class="highlight-number">0</span>)
            ElementTransformUtils.MoveElement(familyDocument, blend.Id, transPoint1)
        <span class="highlight-keyword">Else</span>
            <span class="highlight-keyword">Throw</span> <span class="highlight-keyword">New</span> Exception(<span class="highlight-literal">"Create new Blend failed."</span>)
        <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
    <span class="highlight-keyword">Else</span>
        <span class="highlight-keyword">Throw</span> <span class="highlight-keyword">New</span> Exception(<span class="highlight-literal">"Please open a Family document before invoking this command."</span>)
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

    <span class="highlight-keyword">Return</span> blend
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Function</span></pre></div><div id="IDAKC_code_Div3" class="codeSnippetContainerCode" style="display: none"><p>No code example is currently available or this language may not be supported.</p></div><div id="IDAKC_code_Div4" class="codeSnippetContainerCode" style="display: none"><p>No code example is currently available or this language may not be supported.</p></div></div></div></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('seeAlso')" onkeypress="SectionExpandCollapse_CheckKey('seeAlso', event)" tabindex="0"><img id="seeAlsoToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />See Also</span></div><div id="seeAlsoSection" class="collapsibleSection"><h4>Reference</h4><div><a href="a7622967-1381-c17f-ed04-1ebe40da0440.htm">FamilyItemFactory Class</a></div><div><a href="ded320da-058a-4edd-0418-0582389559a7.htm">Autodesk.Revit.Creation Namespace</a></div></div></div></div>
        </div></body></html>