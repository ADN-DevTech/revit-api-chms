<html><head><title>LoadCombination.GetComponents Method</title><meta name="Title" content="GetComponents Method" /><meta name="Microsoft.Help.Id" content="M:Autodesk.Revit.DB.Structure.LoadCombination.GetComponents" /><meta name="Microsoft.Help.ContentType" content="Reference" /><meta name="System.Keywords" content="LoadCombination.GetComponents method" /><meta name="System.Keywords" content="GetComponents method" /><meta name="Microsoft.Help.F1" content="Autodesk.Revit.DB.Structure.LoadCombination.GetComponents" /><meta name="Microsoft.Help.F1" content="LoadCombination.GetComponents" /><meta name="Microsoft.Help.F1" content="GetComponents" /><meta name="container" content="Autodesk.Revit.DB.Structure" /><meta name="file" content="f90551cc-930a-2b43-7965-109c16833c78" /><meta name="guid" content="f90551cc-930a-2b43-7965-109c16833c78" /><meta name="Microsoft.Help.Category" content="CSharp" /><meta name="Microsoft.Help.Category" content="VB" /><meta name="Description" content="Returns collection of the load combination components." /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /></head><body onload="SetDefaultLanguage('cs');"><div class="pageBody"><div id="TopicContent" class="topicContent"><table class="titleTable"><tr><td class="titleColumn"><h1>Load<wbr />Combination<span id="LST12BB2EE_0" data-languageSpecificText="cpp=::|nu=."></span>Get<wbr />Components Method</h1></td></tr></table><div class="summary">
   Returns collection of the load combination components.
</div><br /><strong>Namespace:</strong> <a href="d586b341-f687-9d90-e96d-255806b7d4fc.htm">Autodesk.Revit.DB.Structure</a><br /><strong>Assembly:</strong> RevitAPI (in RevitAPI.dll) Version: 25.0.0.0 (25.0.0.0)<div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDB')" onkeypress="SectionExpandCollapse_CheckKey('IDB', event)" tabindex="0"><img id="IDBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Syntax</span></div><div id="IDBSection" class="collapsibleSection"><div id="IDAB" class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="IDAB_tab1" class="codeSnippetContainerTab"><a href="#" onclick="ChangeTab('IDAB','cs','1','4');return false;">C#</a></div><div id="IDAB_tab2" class="codeSnippetContainerTab"><a href="#" onclick="ChangeTab('IDAB','vb','2','4');return false;">VB</a></div><div id="IDAB_tab3" class="codeSnippetContainerTab"><a href="#" onclick="ChangeTab('IDAB','cpp','3','4');return false;">C++</a></div><div id="IDAB_tab4" class="codeSnippetContainerTab"><a href="#" onclick="ChangeTab('IDAB','fs','4','4');return false;">F#</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="IDAB_copyCode" href="#" class="copyCodeSnippet" onclick="CopyToClipboard('IDAB');return false;" title="Copy">Copy</a></div></div><div id="IDAB_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="keyword">public</span> <span class="identifier">IList</span>&lt;<span class="identifier">LoadComponent</span>&gt; <span class="identifier">GetComponents</span>()</pre></div><div id="IDAB_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">Public</span> <span class="keyword">Function</span> <span class="identifier">GetComponents</span> <span class="keyword">As</span> <span class="identifier">IList</span>(<span class="keyword">Of</span> <span class="identifier">LoadComponent</span>)</pre></div><div id="IDAB_code_Div3" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">public</span>:
<span class="identifier">IList</span>&lt;<span class="identifier">LoadComponent</span>^&gt;^ <span class="identifier">GetComponents</span>()</pre></div><div id="IDAB_code_Div4" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">member</span> <span class="identifier">GetComponents</span> : <span class="keyword">unit</span> <span class="keyword">-&gt;</span> <span class="identifier">IList</span>&lt;<span class="identifier">LoadComponent</span>&gt; </pre></div></div></div><h4>Return Value</h4><a href="https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1" target="_blank" rel="noopener noreferrer">IList</a><span id="LST12BB2EE_1" data-languageSpecificText="cpp=&lt;|cs=&lt;|fs=&lt;|vb=(Of |nu=("></span><a href="62ee3920-2a87-4fd1-d9e8-af9655d04456.htm">LoadComponent</a><span id="LST12BB2EE_2" data-languageSpecificText="cpp=&gt;|cs=&gt;|fs=&gt;|vb=)|nu=)"></span><br />
   A collection of the load combination components.
</div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDDC')" onkeypress="SectionExpandCollapse_CheckKey('IDDC', event)" tabindex="0"><img id="IDDCToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Example</span></div><div id="IDDCSection" class="collapsibleSection"><div id="IDADC" class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="IDADC_tab1" class="codeSnippetContainerTab"><a href="#" onclick="ChangeTab('IDADC','cs','1','4');return false;">C#</a></div><div id="IDADC_tab2" class="codeSnippetContainerTab"><a href="#" onclick="ChangeTab('IDADC','vb','2','4');return false;">VB</a></div><div id="IDADC_tab3" class="codeSnippetContainerTabPhantom"><a href="#" onclick="ChangeTab('IDADC','cpp','3','4');return false;">C++</a></div><div id="IDADC_tab4" class="codeSnippetContainerTabPhantom"><a href="#" onclick="ChangeTab('IDADC','fs','4','4');return false;">F#</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="IDADC_copyCode" href="#" class="copyCodeSnippet" onclick="CopyToClipboard('IDADC');return false;" title="Copy">Copy</a></div></div><div id="IDADC_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-preprocessor">#region</span> Autodesk.Revit.DB.Structure.LoadCombination.GetUsageIds()
<span class="highlight-keyword">void</span> ModifyLoadCombinationLoadCaseLoadUsageLoadNatureAndLoadComponent(Document document, LoadCombination loadCombination)
{
    <span class="highlight-comment">// Change name of LoadCombination</span>
    loadCombination.Name = <span class="highlight-literal">"DL2 + RAIN1"</span>;

    <span class="highlight-comment">// Get any LoadCase from combination</span>
    <span class="highlight-comment">// Combination can have assigned LoadCase or other (nested) LoadCombination so we need to filter out any LoadCombination</span>
    LoadCase case1 = <span class="highlight-keyword">null</span>;
    IList&lt;ElementId&gt; caseAndCombinationIds = loadCombination.GetCaseAndCombinationIds();
    <span class="highlight-keyword">foreach</span> (ElementId id <span class="highlight-keyword">in</span> caseAndCombinationIds)
    {
        Element element = document.GetElement(id);
        <span class="highlight-keyword">if</span> (element <span class="highlight-keyword">is</span> LoadCase)
        {
           case1 = (LoadCase)element;
           <span class="highlight-keyword">break</span>;
        }
        <span class="highlight-keyword">else</span> <span class="highlight-keyword">if</span> (element <span class="highlight-keyword">is</span> LoadCombination)
        {
           <span class="highlight-keyword">continue</span>;
        }
    }

    <span class="highlight-keyword">if</span> (case1 == <span class="highlight-keyword">null</span>)
       <span class="highlight-keyword">throw</span> <span class="highlight-keyword">new</span> Exception(<span class="highlight-literal">"Can't get LoadCase."</span>);

    <span class="highlight-comment">// Change case name and number</span>
    case1.Name = <span class="highlight-literal">"DL2"</span>;
    <span class="highlight-keyword">if</span> (LoadCase.IsNumberUnique(document, <span class="highlight-number">3</span>))
    {
        case1.Number = <span class="highlight-number">3</span>;
    }

    <span class="highlight-comment">// Create load nature</span>
    LoadNature liveNature = LoadNature.Create(document, <span class="highlight-literal">"Dead nature"</span>);
    <span class="highlight-keyword">if</span> (liveNature == <span class="highlight-keyword">null</span>)
       <span class="highlight-keyword">throw</span> <span class="highlight-keyword">new</span> Exception(<span class="highlight-literal">"Create new load nature failed."</span>);

    <span class="highlight-comment">// Change nature category, ID and number for case</span>
    case1.SubcategoryId = <span class="highlight-keyword">new</span> ElementId(BuiltInCategory.OST_LoadCasesDead);
    case1.NatureId = liveNature.Id;

    <span class="highlight-comment">//Change factor for case1</span>
    IList&lt;LoadComponent&gt; components = loadCombination.GetComponents();
    <span class="highlight-keyword">foreach</span> (LoadComponent loadComponent <span class="highlight-keyword">in</span> components)
    {
        <span class="highlight-keyword">if</span> (loadComponent.LoadCaseOrCombinationId == case1.Id)
        {
            loadComponent.Factor = <span class="highlight-number">3.0</span>;
        }
    }

    loadCombination.SetComponents(components);

    <span class="highlight-comment">// Remove one usage from combination</span>
    IList&lt;ElementId&gt; usages = loadCombination.GetUsageIds();
    usages.RemoveAt(<span class="highlight-number">0</span>);
    loadCombination.SetUsageIds(usages);

    <span class="highlight-comment">// Give the user some information</span>
    TaskDialog.Show(<span class="highlight-literal">"Revit"</span>, <span class="highlight-keyword">string</span>.Format(<span class="highlight-literal">"Load Combination ID='{0}' modified successfully."</span>, loadCombination.Id.ToString()));
}
<span class="highlight-preprocessor">#endregion</span></pre></div><div id="IDADC_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="highlight-preprocessor">#Region</span> <span class="highlight-literal">"Autodesk.Revit.DB.Structure.LoadCombination.GetUsageIds()"</span>
        <span class="highlight-keyword">Private</span> <span class="highlight-keyword">Sub</span> ModifyLoadCombinationLoadCaseLoadUsageLoadNatureAndLoadComponent(document <span class="highlight-keyword">As</span> Document, loadCombination <span class="highlight-keyword">As</span> LoadCombination)
            <span class="highlight-comment">' Change name of LoadCombination</span>
            loadCombination.Name = <span class="highlight-literal">"DL2 + RAIN1"</span>

            <span class="highlight-comment">' Get any LoadCase from combination</span>
            <span class="highlight-comment">' Combination can have assigned LoadCase or other (nested) LoadCombination so we need to filter out any LoadCombination</span>
            <span class="highlight-keyword">Dim</span> case1 <span class="highlight-keyword">As</span> LoadCase = <span class="highlight-keyword">Nothing</span>
            <span class="highlight-keyword">Dim</span> caseAndCombinationIds <span class="highlight-keyword">As</span> IList(<span class="highlight-keyword">Of</span> ElementId) = loadCombination.GetCaseAndCombinationIds()
            <span class="highlight-keyword">For</span> <span class="highlight-keyword">Each</span> id <span class="highlight-keyword">As</span> ElementId <span class="highlight-keyword">In</span> caseAndCombinationIds
                <span class="highlight-keyword">Dim</span> element <span class="highlight-keyword">As</span> Element = document.GetElement(id)
                <span class="highlight-keyword">If</span> <span class="highlight-keyword">TypeOf</span> element <span class="highlight-keyword">Is</span> LoadCase <span class="highlight-keyword">Then</span>
                    case1 = <span class="highlight-keyword">DirectCast</span>(element, LoadCase)
                    <span class="highlight-keyword">Exit</span> <span class="highlight-keyword">For</span>
                <span class="highlight-keyword">ElseIf</span> <span class="highlight-keyword">TypeOf</span> element <span class="highlight-keyword">Is</span> LoadCombination <span class="highlight-keyword">Then</span>
                    <span class="highlight-keyword">Continue</span> <span class="highlight-keyword">For</span>
                <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
            <span class="highlight-keyword">Next</span>

            <span class="highlight-keyword">If</span> case1 <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
                <span class="highlight-keyword">Throw</span> <span class="highlight-keyword">New</span> Exception(<span class="highlight-literal">"Can't get LoadCase."</span>)
            <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

            <span class="highlight-comment">' Change case name and number</span>
            case1.Name = <span class="highlight-literal">"DL2"</span>
            <span class="highlight-keyword">If</span> LoadCase.IsNumberUnique(document, <span class="highlight-number">3</span>) <span class="highlight-keyword">Then</span>
                case1.Number = <span class="highlight-number">3</span>
            <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

            <span class="highlight-comment">' Create load nature</span>
            <span class="highlight-keyword">Dim</span> liveNature <span class="highlight-keyword">As</span> LoadNature = LoadNature.Create(document, <span class="highlight-literal">"Dead nature"</span>)
            <span class="highlight-keyword">If</span> liveNature <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
                <span class="highlight-keyword">Throw</span> <span class="highlight-keyword">New</span> Exception(<span class="highlight-literal">"Create new load nature failed."</span>)
            <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

            <span class="highlight-comment">' Change nature category, ID and number for case</span>
            case1.SubcategoryId = <span class="highlight-keyword">New</span> ElementId(BuiltInCategory.OST_LoadCasesDead)
            case1.NatureId = liveNature.Id

            <span class="highlight-comment">'Change factor for case1</span>
            <span class="highlight-keyword">Dim</span> components <span class="highlight-keyword">As</span> IList(<span class="highlight-keyword">Of</span> LoadComponent) = loadCombination.GetComponents()
            <span class="highlight-keyword">For</span> <span class="highlight-keyword">Each</span> loadComponent <span class="highlight-keyword">As</span> LoadComponent <span class="highlight-keyword">In</span> components
                <span class="highlight-keyword">If</span> loadComponent.LoadCaseOrCombinationId = case1.Id <span class="highlight-keyword">Then</span>
                    loadComponent.Factor = <span class="highlight-number">3.0</span>
                <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
            <span class="highlight-keyword">Next</span>

            loadCombination.SetComponents(components)

            <span class="highlight-comment">' Remove one usage from combination</span>
            <span class="highlight-keyword">Dim</span> usages <span class="highlight-keyword">As</span> IList(<span class="highlight-keyword">Of</span> ElementId) = loadCombination.GetUsageIds()
            usages.RemoveAt(<span class="highlight-number">0</span>)
            loadCombination.SetUsageIds(usages)

            <span class="highlight-comment">' Give the user some information</span>
            TaskDialog.Show(<span class="highlight-literal">"Revit"</span>, <span class="highlight-keyword">String</span>.Format(<span class="highlight-comment">"Load Combination ID='{0}' modified successfully."</span>, loadCombination.Id.ToString()))
        <span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span>
<span class="highlight-preprocessor">#End Region</span></pre></div><div id="IDADC_code_Div3" class="codeSnippetContainerCode" style="display: none"><p>No code example is currently available or this language may not be supported.</p></div><div id="IDADC_code_Div4" class="codeSnippetContainerCode" style="display: none"><p>No code example is currently available or this language may not be supported.</p></div></div></div></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('seeAlso')" onkeypress="SectionExpandCollapse_CheckKey('seeAlso', event)" tabindex="0"><img id="seeAlsoToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />See Also</span></div><div id="seeAlsoSection" class="collapsibleSection"><h4>Reference</h4><div><a href="82891124-6fb9-e612-ca8c-6f4e32e2c121.htm">LoadCombination Class</a></div><div><a href="d586b341-f687-9d90-e96d-255806b7d4fc.htm">Autodesk.Revit.DB.Structure Namespace</a></div></div></div></div>
        </div></body></html>