<html><head><title>IExportContext.OnElementBegin Method</title><meta name="Title" content="OnElementBegin Method" /><meta name="Microsoft.Help.Id" content="M:Autodesk.Revit.DB.IExportContext.OnElementBegin(Autodesk.Revit.DB.ElementId)" /><meta name="Microsoft.Help.ContentType" content="Reference" /><meta name="System.Keywords" content="IExportContext.OnElementBegin method" /><meta name="System.Keywords" content="OnElementBegin method" /><meta name="Microsoft.Help.F1" content="Autodesk.Revit.DB.IExportContext.OnElementBegin" /><meta name="Microsoft.Help.F1" content="IExportContext.OnElementBegin" /><meta name="Microsoft.Help.F1" content="OnElementBegin" /><meta name="container" content="Autodesk.Revit.DB" /><meta name="file" content="d218b0b3-bb24-0f73-806c-2ef90b16d882" /><meta name="guid" content="d218b0b3-bb24-0f73-806c-2ef90b16d882" /><meta name="Microsoft.Help.Category" content="CSharp" /><meta name="Microsoft.Help.Category" content="VB" /><meta name="Description" content="This method marks the beginning of an element to be exported." /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /></head><body onload="SetDefaultLanguage('cs');"><div class="pageBody"><div id="TopicContent" class="topicContent"><table class="titleTable"><tr><td class="titleColumn"><h1>IExport<wbr />Context<span id="LST7F7EC806_0" data-languageSpecificText="cpp=::|nu=."></span>On<wbr />Element<wbr />Begin Method</h1></td></tr></table><div class="summary">
   This method marks the beginning of an element to be exported.
</div><br /><strong>Namespace:</strong> <a href="87546ba7-461b-c646-cbb1-2cb8f5bff8b2.htm">Autodesk.Revit.DB</a><br /><strong>Assembly:</strong> RevitAPI (in RevitAPI.dll) Version: 25.0.0.0 (25.0.0.0)<div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDB')" onkeypress="SectionExpandCollapse_CheckKey('IDB', event)" tabindex="0"><img id="IDBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Syntax</span></div><div id="IDBSection" class="collapsibleSection"><div id="IDAB" class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="IDAB_tab1" class="codeSnippetContainerTab"><a href="#" onclick="ChangeTab('IDAB','cs','1','4');return false;">C#</a></div><div id="IDAB_tab2" class="codeSnippetContainerTab"><a href="#" onclick="ChangeTab('IDAB','vb','2','4');return false;">VB</a></div><div id="IDAB_tab3" class="codeSnippetContainerTab"><a href="#" onclick="ChangeTab('IDAB','cpp','3','4');return false;">C++</a></div><div id="IDAB_tab4" class="codeSnippetContainerTab"><a href="#" onclick="ChangeTab('IDAB','fs','4','4');return false;">F#</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="IDAB_copyCode" href="#" class="copyCodeSnippet" onclick="CopyToClipboard('IDAB');return false;" title="Copy">Copy</a></div></div><div id="IDAB_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="identifier">RenderNodeAction</span> <span class="identifier">OnElementBegin</span>(
	<span class="identifier">ElementId</span> <span class="parameter">elementId</span>
)</pre></div><div id="IDAB_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">Function</span> <span class="identifier">OnElementBegin</span> ( 
	<span class="parameter">elementId</span> <span class="keyword">As</span> <span class="identifier">ElementId</span>
) <span class="keyword">As</span> <span class="identifier">RenderNodeAction</span></pre></div><div id="IDAB_code_Div3" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="identifier">RenderNodeAction</span> <span class="identifier">OnElementBegin</span>(
	<span class="identifier">ElementId</span>^ <span class="parameter">elementId</span>
)</pre></div><div id="IDAB_code_Div4" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">abstract</span> <span class="identifier">OnElementBegin</span> : 
        <span class="parameter">elementId</span> : <span class="identifier">ElementId</span> <span class="keyword">-&gt;</span> <span class="identifier">RenderNodeAction</span> </pre></div></div></div><h4>Parameters</h4><dl><dt class="has-text-weight-normal"><span class="parameter">elementId</span>  <a href="44f3f7b1-3229-3404-93c9-dc5e70337dd6.htm">ElementId</a></dt><dd>
   The Id of the element that is about to be processed.
</dd></dl><h4>Return Value</h4><a href="39f98799-628b-8d65-765c-ca86949ce7ed.htm">RenderNodeAction</a><br />
   Return RenderNodeAction.Skip if you wish to skip exporting this element,
   or return RenderNodeAction.Proceed otherwise.
</div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDBC')" onkeypress="SectionExpandCollapse_CheckKey('IDBC', event)" tabindex="0"><img id="IDBCToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Remarks</span></div><div id="IDBCSection" class="collapsibleSection">
   This method is never called for 2D export (see cref="Autodesk::Revit::DB::IExportContext2D").
</div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDFC')" onkeypress="SectionExpandCollapse_CheckKey('IDFC', event)" tabindex="0"><img id="IDFCToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Example</span></div><div id="IDFCSection" class="collapsibleSection"><div id="IDAFC" class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="IDAFC_tab1" class="codeSnippetContainerTab"><a href="#" onclick="ChangeTab('IDAFC','cs','1','4');return false;">C#</a></div><div id="IDAFC_tab2" class="codeSnippetContainerTab"><a href="#" onclick="ChangeTab('IDAFC','vb','2','4');return false;">VB</a></div><div id="IDAFC_tab3" class="codeSnippetContainerTabPhantom"><a href="#" onclick="ChangeTab('IDAFC','cpp','3','4');return false;">C++</a></div><div id="IDAFC_tab4" class="codeSnippetContainerTabPhantom"><a href="#" onclick="ChangeTab('IDAFC','fs','4','4');return false;">F#</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="IDAFC_copyCode" href="#" class="copyCodeSnippet" onclick="CopyToClipboard('IDAFC');return false;" title="Copy">Copy</a></div></div><div id="IDAFC_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-comment">/// &lt;summary&gt;</span>
<span class="highlight-comment">/// Often it is found beneficial to keep a stack of th element(s)</span>
<span class="highlight-comment">/// currently being processed, so it can be refer to it from other</span>
<span class="highlight-comment">/// methods of the export context.</span>
<span class="highlight-comment">/// &lt;/summary&gt;</span>
Stack&lt;ElementId&gt; m_elementStack = <span class="highlight-keyword">new</span> Stack&lt;ElementId&gt;();

ElementId CurrentElementId()
{
   <span class="highlight-keyword">return</span> (m_elementStack.Count &gt; <span class="highlight-number">0</span>) ? m_elementStack.Peek() : ElementId.InvalidElementId;
}

<span class="highlight-comment">/// &lt;summary&gt;</span>
<span class="highlight-comment">/// Method that indicates the start of processing an element.</span>
<span class="highlight-comment">/// &lt;/summary&gt;</span>
<span class="highlight-keyword">public</span> RenderNodeAction OnElementBegin(ElementId elementId)
{
   <span class="highlight-comment">// We may find it useful to remember this element's Id.</span>
   <span class="highlight-comment">// So we can refer to it in methods invoked during the </span>
   <span class="highlight-comment">// export process of this element</span>
   m_elementStack.Push(elementId);

   <span class="highlight-comment">// We can use the element's Id to find out more about the element being processed.</span>
   <span class="highlight-comment">// For example, we can test if the element is a wall; if it is, we can get more</span>
   <span class="highlight-comment">// information about the wall and then we can proceed with the export, which will </span>
   <span class="highlight-comment">// continue with processing geometry of the element. Elements that are not wall</span>
   <span class="highlight-comment">// will be skipped.</span>

   Wall theWall = m_document.GetElement(elementId) <span class="highlight-keyword">as</span> Wall;
   <span class="highlight-keyword">if</span> (theWall != <span class="highlight-keyword">null</span>)
   {
      <span class="highlight-keyword">double</span> wallVolume = theWall.get_Parameter(BuiltInParameter.HOST_VOLUME_COMPUTED).AsDouble();
      <span class="highlight-keyword">return</span> RenderNodeAction.Proceed;
   }
   <span class="highlight-keyword">else</span>
   {
      <span class="highlight-keyword">return</span> RenderNodeAction.Skip;
   }
}

<span class="highlight-comment">/// &lt;summary&gt;</span>
<span class="highlight-comment">/// Method that indicates the end of processing an element</span>
<span class="highlight-comment">/// &lt;/summary&gt;</span>
<span class="highlight-keyword">public</span> <span class="highlight-keyword">void</span> OnElementEnd(ElementId elementId)
{
   <span class="highlight-comment">// Note: this method is invoked even for elements that were skipped.</span>

   m_elementStack.Pop();
}</pre></div><div id="IDAFC_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="highlight-comment">' &lt;summary&gt;</span>
<span class="highlight-comment">' Often it is found beneficial to keep a stack of th element(s)</span>
<span class="highlight-comment">' currently being processed, so it can be refer to it from other</span>
<span class="highlight-comment">' methods of the export context.</span>
<span class="highlight-comment">' &lt;/summary&gt;</span>
<span class="highlight-keyword">Private</span> m_elementStack <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> Stack(<span class="highlight-keyword">Of</span> ElementId)()

<span class="highlight-keyword">Private</span> <span class="highlight-keyword">Function</span> CurrentElementId() <span class="highlight-keyword">As</span> ElementId
    <span class="highlight-keyword">Return</span> <span class="highlight-keyword">If</span>((m_elementStack.Count &gt; <span class="highlight-number">0</span>), m_elementStack.Peek(), ElementId.InvalidElementId)
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Function</span>

<span class="highlight-comment">' &lt;summary&gt;</span>
<span class="highlight-comment">' Method that indicates the start of processing an element.</span>
<span class="highlight-comment">' &lt;/summary&gt;</span>
<span class="highlight-keyword">Public</span> <span class="highlight-keyword">Function</span> OnElementBegin(elementId <span class="highlight-keyword">As</span> ElementId) <span class="highlight-keyword">As</span> RenderNodeAction <span class="highlight-keyword">Implements</span> IExportContext.OnElementBegin
    <span class="highlight-comment">' We may find it useful to remember this element's Id.</span>
    <span class="highlight-comment">' So we can refer to it in methods invoked during the </span>
    <span class="highlight-comment">' export process of this element</span>
    m_elementStack.Push(elementId)

    <span class="highlight-comment">' We can use the element's Id to find out more about the element being processed.</span>
    <span class="highlight-comment">' For example, we can test if the element is a wall; if it is, we can get more</span>
    <span class="highlight-comment">' information about the wall and then we can proceed with the export, which will </span>
    <span class="highlight-comment">' continue with processing geometry of the element. Elements that are not wall</span>
    <span class="highlight-comment">' will be skipped.</span>

    <span class="highlight-keyword">Dim</span> theWall <span class="highlight-keyword">As</span> Wall = <span class="highlight-keyword">TryCast</span>(m_document.GetElement(elementId), Wall)
    <span class="highlight-keyword">If</span> theWall <span class="highlight-keyword">IsNot</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
        <span class="highlight-keyword">Dim</span> wallVolume <span class="highlight-keyword">As</span> <span class="highlight-keyword">Double</span> = theWall.Parameter(BuiltInParameter.HOST_VOLUME_COMPUTED).AsDouble()
        <span class="highlight-keyword">Return</span> RenderNodeAction.Proceed
    <span class="highlight-keyword">Else</span>
        <span class="highlight-keyword">Return</span> RenderNodeAction.Skip
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Function</span>

<span class="highlight-comment">' &lt;summary&gt;</span>
<span class="highlight-comment">' Method that indicates the end of processing an element</span>
<span class="highlight-comment">' &lt;/summary&gt;</span>
<span class="highlight-keyword">Public</span> <span class="highlight-keyword">Sub</span> OnElementEnd(elementId <span class="highlight-keyword">As</span> ElementId) <span class="highlight-keyword">Implements</span> IExportContext.OnElementEnd
    <span class="highlight-comment">' Note: this method is invoked even for elements that were skipped.</span>

    m_elementStack.Pop()
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span></pre></div><div id="IDAFC_code_Div3" class="codeSnippetContainerCode" style="display: none"><p>No code example is currently available or this language may not be supported.</p></div><div id="IDAFC_code_Div4" class="codeSnippetContainerCode" style="display: none"><p>No code example is currently available or this language may not be supported.</p></div></div></div></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('seeAlso')" onkeypress="SectionExpandCollapse_CheckKey('seeAlso', event)" tabindex="0"><img id="seeAlsoToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />See Also</span></div><div id="seeAlsoSection" class="collapsibleSection"><h4>Reference</h4><div><a href="7d0dc6df-db0e-6a07-3b42-8dde1bedb3c1.htm">IExportContext Interface</a></div><div><a href="87546ba7-461b-c646-cbb1-2cb8f5bff8b2.htm">Autodesk.Revit.DB Namespace</a></div></div></div></div>
        </div></body></html>