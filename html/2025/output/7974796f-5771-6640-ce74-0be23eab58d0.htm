<html><head><title>GlobalParameter.SetFormula Method</title><meta name="Title" content="SetFormula Method" /><meta name="Microsoft.Help.Id" content="M:Autodesk.Revit.DB.GlobalParameter.SetFormula(System.String)" /><meta name="Microsoft.Help.ContentType" content="Reference" /><meta name="System.Keywords" content="GlobalParameter.SetFormula method" /><meta name="System.Keywords" content="SetFormula method" /><meta name="Microsoft.Help.F1" content="Autodesk.Revit.DB.GlobalParameter.SetFormula" /><meta name="Microsoft.Help.F1" content="GlobalParameter.SetFormula" /><meta name="Microsoft.Help.F1" content="SetFormula" /><meta name="container" content="Autodesk.Revit.DB" /><meta name="file" content="7974796f-5771-6640-ce74-0be23eab58d0" /><meta name="guid" content="7974796f-5771-6640-ce74-0be23eab58d0" /><meta name="Microsoft.Help.Category" content="CSharp" /><meta name="Microsoft.Help.Category" content="VB" /><meta name="Description" content="Sets a formula expression for this parameter." /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /></head><body onload="SetDefaultLanguage('cs');"><div class="pageBody"><div id="TopicContent" class="topicContent"><table class="titleTable"><tr><td class="titleColumn"><h1>Global<wbr />Parameter<span id="LSTA6B69421_0" data-languageSpecificText="cpp=::|nu=."></span>Set<wbr />Formula Method</h1></td></tr></table><div class="summary">
   Sets a formula expression for this parameter.
</div><br /><strong>Namespace:</strong> <a href="87546ba7-461b-c646-cbb1-2cb8f5bff8b2.htm">Autodesk.Revit.DB</a><br /><strong>Assembly:</strong> RevitAPI (in RevitAPI.dll) Version: 25.0.0.0 (25.0.0.0)<div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDB')" onkeypress="SectionExpandCollapse_CheckKey('IDB', event)" tabindex="0"><img id="IDBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Syntax</span></div><div id="IDBSection" class="collapsibleSection"><div id="IDAB" class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="IDAB_tab1" class="codeSnippetContainerTab"><a href="#" onclick="ChangeTab('IDAB','cs','1','4');return false;">C#</a></div><div id="IDAB_tab2" class="codeSnippetContainerTab"><a href="#" onclick="ChangeTab('IDAB','vb','2','4');return false;">VB</a></div><div id="IDAB_tab3" class="codeSnippetContainerTab"><a href="#" onclick="ChangeTab('IDAB','cpp','3','4');return false;">C++</a></div><div id="IDAB_tab4" class="codeSnippetContainerTab"><a href="#" onclick="ChangeTab('IDAB','fs','4','4');return false;">F#</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="IDAB_copyCode" href="#" class="copyCodeSnippet" onclick="CopyToClipboard('IDAB');return false;" title="Copy">Copy</a></div></div><div id="IDAB_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">void</span> <span class="identifier">SetFormula</span>(
	<span class="identifier">string</span> <span class="parameter">expression</span>
)</pre></div><div id="IDAB_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">Public</span> <span class="keyword">Sub</span> <span class="identifier">SetFormula</span> ( 
	<span class="parameter">expression</span> <span class="keyword">As</span> <span class="identifier">String</span>
)</pre></div><div id="IDAB_code_Div3" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">public</span>:
<span class="keyword">void</span> <span class="identifier">SetFormula</span>(
	<span class="identifier">String</span>^ <span class="parameter">expression</span>
)</pre></div><div id="IDAB_code_Div4" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">member</span> <span class="identifier">SetFormula</span> : 
        <span class="parameter">expression</span> : <span class="identifier">string</span> <span class="keyword">-&gt;</span> <span class="keyword">unit</span> </pre></div></div></div><h4>Parameters</h4><dl><dt class="has-text-weight-normal"><span class="parameter">expression</span>  <a href="https://learn.microsoft.com/dotnet/api/system.string" target="_blank" rel="noopener noreferrer">String</a></dt><dd>
   Valid formula string.
</dd></dl></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDDC')" onkeypress="SectionExpandCollapse_CheckKey('IDDC', event)" tabindex="0"><img id="IDDCToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Exceptions</span></div><div id="IDDCSection" class="collapsibleSection"><table><tr><th>Exception</th><th>Condition</th></tr><tr><td><a href="2e6e4206-97a8-dd4b-df5d-4269f4bb6088.htm">ArgumentException</a></td><td>
   The given expression argument is not valid as a formula for this parameter.
</td></tr><tr><td><a href="631e1424-60f4-929b-4e52-dda9dcd26316.htm">ArgumentNullException</a></td><td>
   A non-optional argument was null
</td></tr><tr><td><a href="9e715f03-3884-e539-4dd6-8d7545733adc.htm">InvalidOperationException</a></td><td>
   This is a non-reporting global parameter. As such it does not allow the current operation.
</td></tr></table></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDBC')" onkeypress="SectionExpandCollapse_CheckKey('IDBC', event)" tabindex="0"><img id="IDBCToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Remarks</span></div><div id="IDBCSection" class="collapsibleSection">
   An assigned expression will compute the parameter's actual value.
   <p>In order to set a formula, the global parameter must be non-reporting. Therefore
   a reporting parameter must be changed to non-reporting first before assigning a formula.
   </p><p>
   Value of the evaluated formula must be compatible with the value-type of the parameter.
   For example, it is permitted  to use <b>Integer</b> parameters in a formula assigned to
   a Double (<b>Number</b>) parameter, or vice versa. It is not allowed, however, to use
   <b>Length</b> or <b>Angle</b> arguments in a formula in a parameter of which type is ether
   <b>Integer</b> or <b>Number</b>. To test whether a formula is valid for a global parameter,
   the method <a href="50c83d89-22da-4398-bba8-197345f76192.htm">IsValidFormula(String)</a> can be used.
   </p><p>
   An empty string can be used to remove an existing formula. When a formula is removed,
   the parameter retains its value as it was previously computed using the formula.
   </p><p>
   Formulas may include all standard arithmetic operations and logical operations (as functions <b>and</b>,
   <b>or</b>, <b>not</b>.) Input to logical operations must be Boolean values (parameters of <b>YesNo</b> type).
   Consequently, arithmetic operations can be applied to numeric values only. While there are no operations
   supported for string (text) arguments, strings can be used as results of a logical <b>If</b> operation.</p></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDHC')" onkeypress="SectionExpandCollapse_CheckKey('IDHC', event)" tabindex="0"><img id="IDHCToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Example</span></div><div id="IDHCSection" class="collapsibleSection"><div id="IDAHC" class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="IDAHC_tab1" class="codeSnippetContainerTab"><a href="#" onclick="ChangeTab('IDAHC','cs','1','4');return false;">C#</a></div><div id="IDAHC_tab2" class="codeSnippetContainerTab"><a href="#" onclick="ChangeTab('IDAHC','vb','2','4');return false;">VB</a></div><div id="IDAHC_tab3" class="codeSnippetContainerTabPhantom"><a href="#" onclick="ChangeTab('IDAHC','cpp','3','4');return false;">C++</a></div><div id="IDAHC_tab4" class="codeSnippetContainerTabPhantom"><a href="#" onclick="ChangeTab('IDAHC','fs','4','4');return false;">F#</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="IDAHC_copyCode" href="#" class="copyCodeSnippet" onclick="CopyToClipboard('IDAHC');return false;" title="Copy">Copy</a></div></div><div id="IDAHC_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-comment">/// &lt;summary&gt;</span>
<span class="highlight-comment">/// Create global parameters and then set a formula to one so it has a value of</span>
<span class="highlight-comment">/// either of two other parameters depending on the boolean value of the forth one.</span>
<span class="highlight-comment">/// &lt;/summary&gt;</span>
<span class="highlight-comment">/// &lt;param name="document"&gt;Revit project document in which we create global parameters.&lt;/param&gt;</span>
<span class="highlight-keyword">public</span> <span class="highlight-keyword">void</span> SetCombinationParameters(Document document)
{
    GlobalParameter gpB = <span class="highlight-keyword">null</span>;
    GlobalParameter gpT = <span class="highlight-keyword">null</span>;
    GlobalParameter gpF = <span class="highlight-keyword">null</span>;
    GlobalParameter gpX = <span class="highlight-keyword">null</span>;

    <span class="highlight-keyword">int</span> TRUE = <span class="highlight-number">1</span>;
    <span class="highlight-keyword">int</span> FALSE = <span class="highlight-number">0</span>;

    <span class="highlight-comment">// transaction to create global parameters and set their values</span>
    <span class="highlight-keyword">using</span> (Transaction trans = <span class="highlight-keyword">new</span> Transaction(document, <span class="highlight-literal">"Creating global parameters"</span>))
    {
        <span class="highlight-comment">// create 4 new global parameters</span>

        trans.Start();

        gpB = GlobalParameter.Create(document, <span class="highlight-literal">"GPB"</span>, SpecTypeId.Boolean.YesNo);
        gpT = GlobalParameter.Create(document, <span class="highlight-literal">"GPT"</span>, SpecTypeId.String.Text);
        gpF = GlobalParameter.Create(document, <span class="highlight-literal">"GPF"</span>, SpecTypeId.String.Text);
        gpX = GlobalParameter.Create(document, <span class="highlight-literal">"GPX"</span>, SpecTypeId.String.Text);

        <span class="highlight-comment">// assign initial values and a formula to the global parameters</span>

        gpB.SetValue(<span class="highlight-keyword">new</span> IntegerParameterValue(TRUE));
        gpT.SetValue(<span class="highlight-keyword">new</span> StringParameterValue(<span class="highlight-literal">"TypeA"</span>));
        gpF.SetValue(<span class="highlight-keyword">new</span> StringParameterValue(<span class="highlight-literal">"TypeB"</span>));

        <span class="highlight-comment">// Set the formula to GPX so that its final value is either the value of GPT (TypeA)</span>
        <span class="highlight-comment">// or GPF (TypeB) depending on whether the value of GPB is True or False.</span>
        <span class="highlight-comment">// Note: in this particular case we are certain the formula is valid, but if weren't </span>
        <span class="highlight-comment">// certain, we could use a validation method as we are now going to illustrate here:</span>
        <span class="highlight-keyword">string</span> expression = <span class="highlight-literal">"if(GPB,GPT,GPF)"</span>; <span class="highlight-comment">// XPX &lt;== if (GPB == TRUE) then GPT else GPF</span>
        <span class="highlight-keyword">if</span> (gpX.IsValidFormula(expression))
        {
            gpX.SetFormula(expression);  
        }

        trans.Commit();
    }

    <span class="highlight-comment">// we can test that the formula works</span>
    <span class="highlight-comment">// since the boolean value is TRUE, the value of the GPX parameter</span>
    <span class="highlight-comment">// should be the same as the value of the GPT parameters</span>

    StringParameterValue sTrue = gpT.GetValue() <span class="highlight-keyword">as</span> StringParameterValue;
    StringParameterValue sFalse = gpF.GetValue() <span class="highlight-keyword">as</span> StringParameterValue;
    StringParameterValue sValue = gpX.GetValue() <span class="highlight-keyword">as</span> StringParameterValue;

    <span class="highlight-keyword">if</span> (sValue.Value != sTrue.Value)
    {
        TaskDialog.Show(<span class="highlight-literal">"Error"</span>, <span class="highlight-literal">"Unexpected value of a global parameter"</span>);
    }

    <span class="highlight-comment">// we can also test that evaluation of the formula is affected by changes</span>

    <span class="highlight-keyword">using</span> (Transaction trans = <span class="highlight-keyword">new</span> Transaction(document, <span class="highlight-literal">"Change value of a YesNo parameter"</span>))
    {
        trans.Start();
        gpB.SetValue(<span class="highlight-keyword">new</span> IntegerParameterValue(FALSE));
        trans.Commit();
    }

    sValue = gpX.GetValue() <span class="highlight-keyword">as</span> StringParameterValue;

    <span class="highlight-keyword">if</span> (sValue.Value != sFalse.Value)
    {
        TaskDialog.Show(<span class="highlight-literal">"Error"</span>, <span class="highlight-literal">"Unexpected value of a global parameter"</span>);
    }

}</pre></div><div id="IDAHC_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="highlight-comment">' &lt;summary&gt;</span>
<span class="highlight-comment">' Create global parameters and then set a formula to one so it has a value of</span>
<span class="highlight-comment">' either of two other parameters depending on the boolean value of the forth one.</span>
<span class="highlight-comment">' &lt;/summary&gt;</span>
<span class="highlight-comment">' &lt;param name="document"&gt;Revit project document in which we create global parameters.&lt;/param&gt;</span>
<span class="highlight-keyword">Public</span> <span class="highlight-keyword">Sub</span> SetCombinationParameters(document <span class="highlight-keyword">As</span> Document)
    <span class="highlight-keyword">Dim</span> gpB <span class="highlight-keyword">As</span> GlobalParameter = <span class="highlight-keyword">Nothing</span>
    <span class="highlight-keyword">Dim</span> gpT <span class="highlight-keyword">As</span> GlobalParameter = <span class="highlight-keyword">Nothing</span>
    <span class="highlight-keyword">Dim</span> gpF <span class="highlight-keyword">As</span> GlobalParameter = <span class="highlight-keyword">Nothing</span>
    <span class="highlight-keyword">Dim</span> gpX <span class="highlight-keyword">As</span> GlobalParameter = <span class="highlight-keyword">Nothing</span>

    <span class="highlight-keyword">Dim</span> [<span class="highlight-keyword">TRUE</span>] <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">1</span>
    <span class="highlight-keyword">Dim</span> [<span class="highlight-keyword">FALSE</span>] <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">0</span>

    <span class="highlight-comment">' transaction to create global parameters and set their values</span>
    <span class="highlight-keyword">Using</span> trans <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> Transaction(document, <span class="highlight-literal">"Creating global parameters"</span>)
        <span class="highlight-comment">' create 4 new global parameters</span>

        trans.Start()

    gpB = GlobalParameter.Create(document, <span class="highlight-literal">"GPB"</span>, SpecTypeId.<span class="highlight-keyword">Boolean</span>.YesNo)
    gpT = GlobalParameter.Create(document, <span class="highlight-literal">"GPT"</span>, SpecTypeId.<span class="highlight-keyword">String</span>.Text)
    gpF = GlobalParameter.Create(document, <span class="highlight-literal">"GPF"</span>, SpecTypeId.<span class="highlight-keyword">String</span>.Text)
    gpX = GlobalParameter.Create(document, <span class="highlight-literal">"GPX"</span>, SpecTypeId.<span class="highlight-keyword">String</span>.Text)

    <span class="highlight-comment">' assign initial values and a formula to the global parameters</span>

    gpB.SetValue(<span class="highlight-keyword">New</span> IntegerParameterValue([<span class="highlight-keyword">TRUE</span>]))
        gpT.SetValue(<span class="highlight-keyword">New</span> StringParameterValue(<span class="highlight-literal">"TypeA"</span>))
        gpF.SetValue(<span class="highlight-keyword">New</span> StringParameterValue(<span class="highlight-literal">"TypeB"</span>))

        <span class="highlight-comment">' Set the formula to GPX so that its final value is either the value of GPT (TypeA)</span>
        <span class="highlight-comment">' or GPF (TypeB) depending on whether the value of GPB is True or False.</span>
        <span class="highlight-comment">' Note: in this particular case we are certain the formula is valid, but if weren't </span>
        <span class="highlight-comment">' certain, we could use a validation method as we are now going to illustrate here:</span>
        <span class="highlight-keyword">Dim</span> expression <span class="highlight-keyword">As</span> <span class="highlight-keyword">String</span> = <span class="highlight-literal">"if(GPB,GPT,GPF)"</span>
        <span class="highlight-comment">' XPX &lt;== if (GPB == TRUE) then GPT else GPF</span>
        <span class="highlight-keyword">If</span> gpX.IsValidFormula(expression) <span class="highlight-keyword">Then</span>
            gpX.SetFormula(expression)
        <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

        trans.Commit()
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Using</span>

    <span class="highlight-comment">' we can test that the formula works</span>
    <span class="highlight-comment">' since the boolean value is TRUE, the value of the GPX parameter</span>
    <span class="highlight-comment">' should be the same as the value of the GPT parameters</span>

    <span class="highlight-keyword">Dim</span> sTrue <span class="highlight-keyword">As</span> StringParameterValue = <span class="highlight-keyword">TryCast</span>(gpT.GetValue(), StringParameterValue)
    <span class="highlight-keyword">Dim</span> sFalse <span class="highlight-keyword">As</span> StringParameterValue = <span class="highlight-keyword">TryCast</span>(gpF.GetValue(), StringParameterValue)
    <span class="highlight-keyword">Dim</span> sValue <span class="highlight-keyword">As</span> StringParameterValue = <span class="highlight-keyword">TryCast</span>(gpX.GetValue(), StringParameterValue)

    <span class="highlight-keyword">If</span> sValue.Value &lt;&gt; sTrue.Value <span class="highlight-keyword">Then</span>
        TaskDialog.Show(<span class="highlight-literal">"Error"</span>, <span class="highlight-literal">"Unexpected value of a global parameter"</span>)
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

    <span class="highlight-comment">' we can also test that evaluation of the formula is affected by changes</span>

    <span class="highlight-keyword">Using</span> trans <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> Transaction(document, <span class="highlight-literal">"Change value of a YesNo parameter"</span>)
        trans.Start()
        gpB.SetValue(<span class="highlight-keyword">New</span> IntegerParameterValue([<span class="highlight-keyword">FALSE</span>]))
        trans.Commit()
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Using</span>

    sValue = <span class="highlight-keyword">TryCast</span>(gpX.GetValue(), StringParameterValue)

    <span class="highlight-keyword">If</span> sValue.Value &lt;&gt; sFalse.Value <span class="highlight-keyword">Then</span>
        TaskDialog.Show(<span class="highlight-literal">"Error"</span>, <span class="highlight-literal">"Unexpected value of a global parameter"</span>)
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

<span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span></pre></div><div id="IDAHC_code_Div3" class="codeSnippetContainerCode" style="display: none"><p>No code example is currently available or this language may not be supported.</p></div><div id="IDAHC_code_Div4" class="codeSnippetContainerCode" style="display: none"><p>No code example is currently available or this language may not be supported.</p></div></div></div></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('seeAlso')" onkeypress="SectionExpandCollapse_CheckKey('seeAlso', event)" tabindex="0"><img id="seeAlsoToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />See Also</span></div><div id="seeAlsoSection" class="collapsibleSection"><h4>Reference</h4><div><a href="b0e53a4a-84ad-abb4-358d-9797870f101b.htm">GlobalParameter Class</a></div><div><a href="87546ba7-461b-c646-cbb1-2cb8f5bff8b2.htm">Autodesk.Revit.DB Namespace</a></div></div></div></div>
        </div></body></html>