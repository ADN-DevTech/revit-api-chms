<html><head><title>SketchEditScope Class</title><meta name="Title" content="SketchEditScope Class" /><meta name="Microsoft.Help.Id" content="T:Autodesk.Revit.DB.SketchEditScope" /><meta name="Microsoft.Help.ContentType" content="Reference" /><meta name="System.Keywords" content="Autodesk.Revit.DB.SketchEditScope class" /><meta name="System.Keywords" content="SketchEditScope class" /><meta name="Microsoft.Help.F1" content="Autodesk.Revit.DB.SketchEditScope" /><meta name="Microsoft.Help.F1" content="SketchEditScope" /><meta name="container" content="Autodesk.Revit.DB" /><meta name="file" content="8538b361-08df-9fd2-93bb-1790a09130f7" /><meta name="guid" content="8538b361-08df-9fd2-93bb-1790a09130f7" /><meta name="Microsoft.Help.Category" content="CSharp" /><meta name="Description" content="A SketchEditScope allows an application to create and maintain an editing session for a Sketch." /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /></head><body onload="SetDefaultLanguage('cs');"><div class="pageBody"><div id="TopicContent" class="topicContent"><table class="titleTable"><tr><td class="titleColumn"><h1>Sketch<wbr />Edit<wbr />Scope Class</h1></td></tr></table><div class="summary">
   A SketchEditScope allows an application to create and maintain an editing session for a Sketch.
</div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDDA')" onkeypress="SectionExpandCollapse_CheckKey('IDDA', event)" tabindex="0"><img id="IDDAToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Inheritance Hierarchy</span></div><div id="IDDASection" class="collapsibleSection"><a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">System<span id="LSTB843B8D_0" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>Object</a><br />  <a href="bac11282-3a3b-953e-8bc4-960c62da4946.htm">Autodesk.Revit.DB<span id="LSTB843B8D_1" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>EditScope</a><br />    <span class="selflink">Autodesk.Revit.DB<span id="LSTB843B8D_2" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>SketchEditScope</span><br /></div><br /><strong>Namespace:</strong> <a href="87546ba7-461b-c646-cbb1-2cb8f5bff8b2.htm">Autodesk.Revit.DB</a><br /><strong>Assembly:</strong> RevitAPI (in RevitAPI.dll) Version: 25.0.0.0 (25.0.0.0)<div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDB')" onkeypress="SectionExpandCollapse_CheckKey('IDB', event)" tabindex="0"><img id="IDBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Syntax</span></div><div id="IDBSection" class="collapsibleSection"><div id="IDAB" class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="IDAB_tab1" class="codeSnippetContainerTab"><a href="#" onclick="ChangeTab('IDAB','cs','1','4');return false;">C#</a></div><div id="IDAB_tab2" class="codeSnippetContainerTab"><a href="#" onclick="ChangeTab('IDAB','vb','2','4');return false;">VB</a></div><div id="IDAB_tab3" class="codeSnippetContainerTab"><a href="#" onclick="ChangeTab('IDAB','cpp','3','4');return false;">C++</a></div><div id="IDAB_tab4" class="codeSnippetContainerTab"><a href="#" onclick="ChangeTab('IDAB','fs','4','4');return false;">F#</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="IDAB_copyCode" href="#" class="copyCodeSnippet" onclick="CopyToClipboard('IDAB');return false;" title="Copy">Copy</a></div></div><div id="IDAB_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">class</span> <span class="identifier">SketchEditScope</span> : <span class="identifier">EditScope</span></pre></div><div id="IDAB_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">Public</span> <span class="keyword">Class</span> <span class="identifier">SketchEditScope</span>
	<span class="keyword">Inherits</span> <span class="identifier">EditScope</span></pre></div><div id="IDAB_code_Div3" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">ref class</span> <span class="identifier">SketchEditScope</span> : <span class="keyword">public</span> <span class="identifier">EditScope</span></pre></div><div id="IDAB_code_Div4" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">type</span> <span class="identifier">SketchEditScope</span> = 
    <span class="keyword">class</span>
        <span class="keyword">inherit</span> <span class="identifier">EditScope</span>
    <span class="keyword">end</span></pre></div></div></div></div><p>The <span class="selflink">SketchEditScope</span> type exposes the following members.</p><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDDEA')" onkeypress="SectionExpandCollapse_CheckKey('IDDEA', event)" tabindex="0"><img id="IDDEAToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Constructors</span></div><div id="IDDEASection" class="collapsibleSection"><table id="ConstructorList" class="members"><tr><th class="iconColumn"> </th><th>Name</th><th>Description</th></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /></td><td><a href="897869be-343e-4dc1-323d-717336374b00.htm">SketchEditScope</a></td><td>
   Instantiates a SketchEditScope object.
</td></tr></table><a href="#PageHeader">Top</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDNEA')" onkeypress="SectionExpandCollapse_CheckKey('IDNEA', event)" tabindex="0"><img id="IDNEAToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Properties</span></div><div id="IDNEASection" class="collapsibleSection"><table id="PropertyList" class="members"><tr><th class="iconColumn"> </th><th>Name</th><th>Description</th></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public property" title="Public property" /></td><td><a href="b4387ada-7b23-edd0-3836-f7faf47d021e.htm">IsActive</a></td><td>
   Tells if the EditScope is active. In other words, the EditScope has started but not committed/canceled yet.
<br />(Inherited from <a href="bac11282-3a3b-953e-8bc4-960c62da4946.htm">EditScope</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public property" title="Public property" /></td><td><a href="addcb3c7-f761-723c-de17-d9abbefde247.htm">IsPermitted</a></td><td>
   Tells if the edit scope is permitted to start.
<br />(Inherited from <a href="bac11282-3a3b-953e-8bc4-960c62da4946.htm">EditScope</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public property" title="Public property" /></td><td><a href="2ae83145-b34a-1830-68a0-e488e216fdb0.htm">IsValidObject</a></td><td>
   Specifies whether the .NET object represents a valid Revit entity.
<br />(Inherited from <a href="bac11282-3a3b-953e-8bc4-960c62da4946.htm">EditScope</a>)</td></tr></table><a href="#PageHeader">Top</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDAEA')" onkeypress="SectionExpandCollapse_CheckKey('IDAEA', event)" tabindex="0"><img id="IDAEAToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Methods</span></div><div id="IDAEASection" class="collapsibleSection"><table id="MethodList" class="members"><tr><th class="iconColumn"> </th><th>Name</th><th>Description</th></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /></td><td><a href="7d36a76e-dc13-c17e-b999-891c9c6fe4df.htm">Cancel</a></td><td>
   Cancels the edit scope.
<br />(Inherited from <a href="bac11282-3a3b-953e-8bc4-960c62da4946.htm">EditScope</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /></td><td><a href="c82741e1-58b8-ee1f-7deb-1764af63f37a.htm">Commit</a></td><td>
   Finishes the edit scope.
<br />(Inherited from <a href="bac11282-3a3b-953e-8bc4-960c62da4946.htm">EditScope</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /></td><td><a href="a42bd333-2276-0df4-2ecc-17f04671a840.htm">Dispose</a></td><td><br />(Inherited from <a href="bac11282-3a3b-953e-8bc4-960c62da4946.htm">EditScope</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /></td><td><a href="https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)" target="_blank" rel="noopener noreferrer">Equals</a></td><td>Determines whether the specified object is equal to the current object.<br />(Inherited from <a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /></td><td><a href="https://learn.microsoft.com/dotnet/api/system.object.gethashcode#system-object-gethashcode" target="_blank" rel="noopener noreferrer">GetHashCode</a></td><td>Serves as the default hash function.<br />(Inherited from <a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /></td><td><a href="https://learn.microsoft.com/dotnet/api/system.object.gettype#system-object-gettype" target="_blank" rel="noopener noreferrer">GetType</a></td><td>Gets the <a href="https://learn.microsoft.com/dotnet/api/system.type" target="_blank" rel="noopener noreferrer">Type</a> of the current instance.<br />(Inherited from <a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /></td><td><a href="ca9debb4-73b6-ce7c-742a-f7a8ab0588da.htm">IsElementWithoutSketch</a></td><td>
   Validates if an element can have a sketch but currently does not.
</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /></td><td><a href="1357d62d-1b59-f552-ec7b-36cda2127e41.htm">IsSketchEditingSupported</a></td><td>
   Checks whether sketch can be edited.
</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /></td><td><a href="4b851561-91b8-291e-ce3d-02dd0467152d.htm">IsSketchEditingSupportedForSketchBasedElement</a></td><td>
   Checks whether the element supports sketch editing.
</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /></td><td><a href="73819f41-6564-48ce-9f00-25f5b74d41b2.htm">Start</a></td><td>
   Starts a sketch edit mode.
</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="4150d043-a5bf-60ba-b986-11f1dc01eedf.htm">StartWithNewSketch</a></td><td>
   Starts a sketch edit mode for an element which, at this moment, doesn't have a sketch.
</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /></td><td><a href="https://learn.microsoft.com/dotnet/api/system.object.tostring#system-object-tostring" target="_blank" rel="noopener noreferrer">ToString</a></td><td>Returns a string that represents the current object.<br />(Inherited from <a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>)</td></tr></table><a href="#PageHeader">Top</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDBC')" onkeypress="SectionExpandCollapse_CheckKey('IDBC', event)" tabindex="0"><img id="IDBCToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Remarks</span></div><div id="IDBCSection" class="collapsibleSection">
   Start/end of a SketchEditScope will start/end a transaction group. After a SketchEditScope is started, an application can start transactions and edit the sketch.
   Individual transactions the application creates inside SketchEditScope will not appear in the undo menu.
   All transactions committed during the edit mode will be merged into a single one which will bear the given name passed into SketchEditScope constructor.
</div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDDC')" onkeypress="SectionExpandCollapse_CheckKey('IDDC', event)" tabindex="0"><img id="IDDCToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Example</span></div><div id="IDDCSection" class="collapsibleSection"><div id="IDADC" class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="IDADC_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="IDADC_copyCode" href="#" class="copyCodeSnippet" onclick="CopyToClipboard('IDADC');return false;" title="Copy">Copy</a></div></div><div id="IDADC_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">public</span> <span class="highlight-keyword">void</span> ReplaceBoundaryLine(Document document)
{
   FilteredElementCollector floorCollector = <span class="highlight-keyword">new</span> FilteredElementCollector(document)
      .WhereElementIsNotElementType()
      .OfCategory(BuiltInCategory.OST_Floors).OfClass(<span class="highlight-keyword">typeof</span>(Floor));

   Floor floor = floorCollector.FirstOrDefault() <span class="highlight-keyword">as</span> Floor;
   <span class="highlight-keyword">if</span> (floor == <span class="highlight-keyword">null</span>)
   {
      TaskDialog.Show(<span class="highlight-literal">"Error"</span>, <span class="highlight-literal">"Document does not contain a floor."</span>);
      <span class="highlight-keyword">return</span>;
   }

   Sketch sketch = document.GetElement(floor.SketchId) <span class="highlight-keyword">as</span> Sketch;

   Line line = <span class="highlight-keyword">null</span>;
   <span class="highlight-keyword">foreach</span> (CurveArray curveArray <span class="highlight-keyword">in</span> sketch.Profile)
   {
      <span class="highlight-keyword">foreach</span> (Curve curve <span class="highlight-keyword">in</span> curveArray)
      {
         line = curve <span class="highlight-keyword">as</span> Line;
         <span class="highlight-keyword">if</span> (line != <span class="highlight-keyword">null</span>)
         {
            <span class="highlight-keyword">break</span>;
         }
      }
      <span class="highlight-keyword">if</span> (line != <span class="highlight-keyword">null</span>)
      {
         <span class="highlight-keyword">break</span>;
      }
   }

   <span class="highlight-keyword">if</span> (line == <span class="highlight-keyword">null</span>)
   {
      TaskDialog.Show(<span class="highlight-literal">"Error"</span>, <span class="highlight-literal">"Sketch does not contain a straight line."</span>);
      <span class="highlight-keyword">return</span>;
   }

   <span class="highlight-comment">// Start a sketch edit scope</span>
   SketchEditScope sketchEditScope = <span class="highlight-keyword">new</span> SketchEditScope(document, <span class="highlight-literal">"Replace line with an arc"</span>);
   sketchEditScope.Start(sketch.Id);

   <span class="highlight-keyword">using</span> (Transaction transaction = <span class="highlight-keyword">new</span> Transaction(document, <span class="highlight-literal">"Modify sketch"</span>))
   {
      transaction.Start();

      <span class="highlight-comment">// Create arc</span>
      XYZ normal = line.Direction.CrossProduct(XYZ.BasisZ).Normalize().Negate();
      XYZ middle = line.GetEndPoint(<span class="highlight-number">0</span>).Add(line.Direction.Multiply(line.Length / <span class="highlight-number">2</span>));
      Curve arc = Arc.Create(line.GetEndPoint(<span class="highlight-number">0</span>), line.GetEndPoint(<span class="highlight-number">1</span>), middle.Add(normal.Multiply(<span class="highlight-number">20</span>)));

      <span class="highlight-comment">// Remove element referenced by the found line. </span>
      document.Delete(line.Reference.ElementId);

      <span class="highlight-comment">// Model curve creation automatically puts the curve into the sketch, if sketch edit scope is running.</span>
      document.Create.NewModelCurve(arc, sketch.SketchPlane);

      transaction.Commit();
   }

   sketchEditScope.Commit(<span class="highlight-keyword">new</span> FailuresPreprocessor());
}</pre></div></div></div><div id="IDBDC" class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="IDBDC_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="IDBDC_copyCode" href="#" class="copyCodeSnippet" onclick="CopyToClipboard('IDBDC');return false;" title="Copy">Copy</a></div></div><div id="IDBDC_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">public</span> <span class="highlight-keyword">void</span> ReplaceBoundaryLine(Document document)
{
   FilteredElementCollector floorCollector = <span class="highlight-keyword">new</span> FilteredElementCollector(document)
      .WhereElementIsNotElementType()
      .OfCategory(BuiltInCategory.OST_Floors).OfClass(<span class="highlight-keyword">typeof</span>(Floor));

   Floor floor = floorCollector.FirstOrDefault() <span class="highlight-keyword">as</span> Floor;
   <span class="highlight-keyword">if</span> (floor == <span class="highlight-keyword">null</span>)
   {
      TaskDialog.Show(<span class="highlight-literal">"Error"</span>, <span class="highlight-literal">"Document does not contain a floor."</span>);
      <span class="highlight-keyword">return</span>;
   }

   Sketch sketch = document.GetElement(floor.SketchId) <span class="highlight-keyword">as</span> Sketch;

   Line line = <span class="highlight-keyword">null</span>;
   <span class="highlight-keyword">foreach</span> (CurveArray curveArray <span class="highlight-keyword">in</span> sketch.Profile)
   {
      <span class="highlight-keyword">foreach</span> (Curve curve <span class="highlight-keyword">in</span> curveArray)
      {
         line = curve <span class="highlight-keyword">as</span> Line;
         <span class="highlight-keyword">if</span> (line != <span class="highlight-keyword">null</span>)
         {
            <span class="highlight-keyword">break</span>;
         }
      }
      <span class="highlight-keyword">if</span> (line != <span class="highlight-keyword">null</span>)
      {
         <span class="highlight-keyword">break</span>;
      }
   }

   <span class="highlight-keyword">if</span> (line == <span class="highlight-keyword">null</span>)
   {
      TaskDialog.Show(<span class="highlight-literal">"Error"</span>, <span class="highlight-literal">"Sketch does not contain a straight line."</span>);
      <span class="highlight-keyword">return</span>;
   }

   <span class="highlight-comment">// Start a sketch edit scope</span>
   SketchEditScope sketchEditScope = <span class="highlight-keyword">new</span> SketchEditScope(document, <span class="highlight-literal">"Replace line with an arc"</span>);
   sketchEditScope.Start(sketch.Id);

   <span class="highlight-keyword">using</span> (Transaction transaction = <span class="highlight-keyword">new</span> Transaction(document, <span class="highlight-literal">"Modify sketch"</span>))
   {
      transaction.Start();

      <span class="highlight-comment">// Create arc</span>
      XYZ normal = line.Direction.CrossProduct(XYZ.BasisZ).Normalize().Negate();
      XYZ middle = line.GetEndPoint(<span class="highlight-number">0</span>).Add(line.Direction.Multiply(line.Length / <span class="highlight-number">2</span>));
      Curve arc = Arc.Create(line.GetEndPoint(<span class="highlight-number">0</span>), line.GetEndPoint(<span class="highlight-number">1</span>), middle.Add(normal.Multiply(<span class="highlight-number">20</span>)));

      <span class="highlight-comment">// Remove element referenced by the found line. </span>
      document.Delete(line.Reference.ElementId);

      <span class="highlight-comment">// Model curve creation automatically puts the curve into the sketch, if sketch edit scope is running.</span>
      document.Create.NewModelCurve(arc, sketch.SketchPlane);

      transaction.Commit();
   }

   sketchEditScope.Commit(<span class="highlight-keyword">new</span> FailuresPreprocessor());
}</pre></div></div></div></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('seeAlso')" onkeypress="SectionExpandCollapse_CheckKey('seeAlso', event)" tabindex="0"><img id="seeAlsoToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />See Also</span></div><div id="seeAlsoSection" class="collapsibleSection"><h4>Reference</h4><div><a href="87546ba7-461b-c646-cbb1-2cb8f5bff8b2.htm">Autodesk.Revit.DB Namespace</a></div></div></div></div>
        </div></body></html>