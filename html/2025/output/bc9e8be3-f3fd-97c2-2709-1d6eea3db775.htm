<html><head><title>ViewSheet.Create Method</title><meta name="Title" content="Create Method" /><meta name="Microsoft.Help.Id" content="M:Autodesk.Revit.DB.ViewSheet.Create(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.ElementId)" /><meta name="Microsoft.Help.ContentType" content="Reference" /><meta name="System.Keywords" content="ViewSheet.Create method" /><meta name="System.Keywords" content="Create method" /><meta name="Microsoft.Help.F1" content="Autodesk.Revit.DB.ViewSheet.Create" /><meta name="Microsoft.Help.F1" content="ViewSheet.Create" /><meta name="Microsoft.Help.F1" content="Create" /><meta name="container" content="Autodesk.Revit.DB" /><meta name="file" content="bc9e8be3-f3fd-97c2-2709-1d6eea3db775" /><meta name="guid" content="bc9e8be3-f3fd-97c2-2709-1d6eea3db775" /><meta name="Microsoft.Help.Category" content="CSharp" /><meta name="Microsoft.Help.Category" content="VB" /><meta name="Description" content="Creates a new ViewSheet." /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /></head><body onload="SetDefaultLanguage('cs');"><div class="pageBody"><div id="TopicContent" class="topicContent"><table class="titleTable"><tr><td class="titleColumn"><h1>View<wbr />Sheet<span id="LSTE48BE8CF_0" data-languageSpecificText="cpp=::|nu=."></span>Create Method</h1></td></tr></table><div class="summary">
   Creates a new ViewSheet.
</div><br /><strong>Namespace:</strong> <a href="87546ba7-461b-c646-cbb1-2cb8f5bff8b2.htm">Autodesk.Revit.DB</a><br /><strong>Assembly:</strong> RevitAPI (in RevitAPI.dll) Version: 25.0.0.0 (25.0.0.0)<div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDB')" onkeypress="SectionExpandCollapse_CheckKey('IDB', event)" tabindex="0"><img id="IDBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Syntax</span></div><div id="IDBSection" class="collapsibleSection"><div id="IDAB" class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="IDAB_tab1" class="codeSnippetContainerTab"><a href="#" onclick="ChangeTab('IDAB','cs','1','4');return false;">C#</a></div><div id="IDAB_tab2" class="codeSnippetContainerTab"><a href="#" onclick="ChangeTab('IDAB','vb','2','4');return false;">VB</a></div><div id="IDAB_tab3" class="codeSnippetContainerTab"><a href="#" onclick="ChangeTab('IDAB','cpp','3','4');return false;">C++</a></div><div id="IDAB_tab4" class="codeSnippetContainerTab"><a href="#" onclick="ChangeTab('IDAB','fs','4','4');return false;">F#</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="IDAB_copyCode" href="#" class="copyCodeSnippet" onclick="CopyToClipboard('IDAB');return false;" title="Copy">Copy</a></div></div><div id="IDAB_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">static</span> <span class="identifier">ViewSheet</span> <span class="identifier">Create</span>(
	<span class="identifier">Document</span> <span class="parameter">document</span>,
	<span class="identifier">ElementId</span> <span class="parameter">titleBlockTypeId</span>
)</pre></div><div id="IDAB_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">Public</span> <span class="keyword">Shared</span> <span class="keyword">Function</span> <span class="identifier">Create</span> ( 
	<span class="parameter">document</span> <span class="keyword">As</span> <span class="identifier">Document</span>,
	<span class="parameter">titleBlockTypeId</span> <span class="keyword">As</span> <span class="identifier">ElementId</span>
) <span class="keyword">As</span> <span class="identifier">ViewSheet</span></pre></div><div id="IDAB_code_Div3" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">public</span>:
<span class="keyword">static</span> <span class="identifier">ViewSheet</span>^ <span class="identifier">Create</span>(
	<span class="identifier">Document</span>^ <span class="parameter">document</span>, 
	<span class="identifier">ElementId</span>^ <span class="parameter">titleBlockTypeId</span>
)</pre></div><div id="IDAB_code_Div4" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">static</span> <span class="keyword">member</span> <span class="identifier">Create</span> : 
        <span class="parameter">document</span> : <span class="identifier">Document</span> * 
        <span class="parameter">titleBlockTypeId</span> : <span class="identifier">ElementId</span> <span class="keyword">-&gt;</span> <span class="identifier">ViewSheet</span> </pre></div></div></div><h4>Parameters</h4><dl><dt class="has-text-weight-normal"><span class="parameter">document</span>  <a href="db03274b-a107-aa32-9034-f3e0df4bb1ec.htm">Document</a></dt><dd>
   The document to which the ViewSheet will be added.
</dd><dt class="has-text-weight-normal"><span class="parameter">titleBlockTypeId</span>  <a href="44f3f7b1-3229-3404-93c9-dc5e70337dd6.htm">ElementId</a></dt><dd>
   The type id of the TitleBlock type which will be used by the new ViewSheet.
   For no TitleBlock, pass invalid element ID.
</dd></dl><h4>Return Value</h4><a href="af2ee879-173d-df3a-9793-8d5750a17b49.htm">ViewSheet</a><br />
   The new ViewSheet.
</div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDEC')" onkeypress="SectionExpandCollapse_CheckKey('IDEC', event)" tabindex="0"><img id="IDECToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Exceptions</span></div><div id="IDECSection" class="collapsibleSection"><table><tr><th>Exception</th><th>Condition</th></tr><tr><td><a href="2e6e4206-97a8-dd4b-df5d-4269f4bb6088.htm">ArgumentException</a></td><td>
   The ElementId titleBlockTypeId does not correspond to a TitleBlock type.
   -or-
   document is not a project document.
</td></tr><tr><td><a href="631e1424-60f4-929b-4e52-dda9dcd26316.htm">ArgumentNullException</a></td><td>
   A non-optional argument was null
</td></tr><tr><td><a href="53205486-5917-7c33-8e67-e362106ddc97.htm">ModificationForbiddenException</a></td><td>
   The document is in failure mode: an operation has failed,
   and Revit requires the user to either cancel the operation
   or fix the problem (usually by deleting certain elements).
   -or-
   The document is being loaded, or is in the midst of another
   sensitive process.
</td></tr><tr><td><a href="8f025460-c283-ea99-aa8a-5a36e11528f4.htm">ModificationOutsideTransactionException</a></td><td>
   The document has no open transaction.
</td></tr></table></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDJC')" onkeypress="SectionExpandCollapse_CheckKey('IDJC', event)" tabindex="0"><img id="IDJCToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Example</span></div><div id="IDJCSection" class="collapsibleSection"><div id="IDAJC" class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="IDAJC_tab1" class="codeSnippetContainerTab"><a href="#" onclick="ChangeTab('IDAJC','cs','1','4');return false;">C#</a></div><div id="IDAJC_tab2" class="codeSnippetContainerTab"><a href="#" onclick="ChangeTab('IDAJC','vb','2','4');return false;">VB</a></div><div id="IDAJC_tab3" class="codeSnippetContainerTabPhantom"><a href="#" onclick="ChangeTab('IDAJC','cpp','3','4');return false;">C++</a></div><div id="IDAJC_tab4" class="codeSnippetContainerTabPhantom"><a href="#" onclick="ChangeTab('IDAJC','fs','4','4');return false;">F#</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="IDAJC_copyCode" href="#" class="copyCodeSnippet" onclick="CopyToClipboard('IDAJC');return false;" title="Copy">Copy</a></div></div><div id="IDAJC_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">private</span> <span class="highlight-keyword">void</span> CreateSheetView(Autodesk.Revit.DB.Document document, View3D view3D)
{

    <span class="highlight-comment">// Get an available title block from document</span>
    FilteredElementCollector collector = <span class="highlight-keyword">new</span> FilteredElementCollector(document);
    collector.OfClass(<span class="highlight-keyword">typeof</span>(FamilySymbol));
    collector.OfCategory(BuiltInCategory.OST_TitleBlocks);

    FamilySymbol fs = collector.FirstElement() <span class="highlight-keyword">as</span> FamilySymbol;
    <span class="highlight-keyword">if</span> (fs != <span class="highlight-keyword">null</span>)
    {
        <span class="highlight-keyword">using</span> (Transaction t = <span class="highlight-keyword">new</span> Transaction(document, <span class="highlight-literal">"Create a new ViewSheet"</span>))
        {
            t.Start();
            <span class="highlight-keyword">try</span>
            {
                <span class="highlight-comment">// Create a sheet view</span>
                ViewSheet viewSheet = ViewSheet.Create(document, fs.Id);
                <span class="highlight-keyword">if</span> (<span class="highlight-keyword">null</span> == viewSheet)
                {
                    <span class="highlight-keyword">throw</span> <span class="highlight-keyword">new</span> Exception(<span class="highlight-literal">"Failed to create new ViewSheet."</span>);
                }

                <span class="highlight-comment">// Add passed in view onto the center of the sheet</span>
                UV location = <span class="highlight-keyword">new</span> UV((viewSheet.Outline.Max.U - viewSheet.Outline.Min.U) / <span class="highlight-number">2</span>,
                                     (viewSheet.Outline.Max.V - viewSheet.Outline.Min.V) / <span class="highlight-number">2</span>);

                <span class="highlight-comment">//viewSheet.AddView(view3D, location);</span>
                Viewport.Create(document, viewSheet.Id, view3D.Id, <span class="highlight-keyword">new</span> XYZ(location.U, location.V, <span class="highlight-number">0</span>));

                <span class="highlight-comment">// Print the sheet out</span>
                <span class="highlight-keyword">if</span> (viewSheet.CanBePrinted)
                {
                    TaskDialog taskDialog = <span class="highlight-keyword">new</span> TaskDialog(<span class="highlight-literal">"Revit"</span>);
                    taskDialog.MainContent = <span class="highlight-literal">"Print the sheet?"</span>;
                    TaskDialogCommonButtons buttons = TaskDialogCommonButtons.Yes | TaskDialogCommonButtons.No;
                    taskDialog.CommonButtons = buttons;
                    TaskDialogResult result = taskDialog.Show();

                    <span class="highlight-keyword">if</span> (result == TaskDialogResult.Yes)
                    {
                        viewSheet.Print();
                    }
                }

                t.Commit();
            }
            <span class="highlight-keyword">catch</span>
            {
                t.RollBack();
            }
        }
    }
}</pre></div><div id="IDAJC_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="highlight-keyword">Private</span> <span class="highlight-keyword">Sub</span> CreateSheetView(document <span class="highlight-keyword">As</span> Autodesk.Revit.DB.Document, view3D <span class="highlight-keyword">As</span> View3D)

    <span class="highlight-comment">' Get an available title block from document</span>
    <span class="highlight-keyword">Dim</span> collector <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> FilteredElementCollector(document)
    collector.OfClass(<span class="highlight-keyword">GetType</span>(FamilySymbol))
    collector.OfCategory(BuiltInCategory.OST_TitleBlocks)

    <span class="highlight-keyword">Dim</span> fs <span class="highlight-keyword">As</span> FamilySymbol = <span class="highlight-keyword">TryCast</span>(collector.FirstElement(), FamilySymbol)
    <span class="highlight-keyword">If</span> fs <span class="highlight-keyword">IsNot</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
        <span class="highlight-keyword">Using</span> t <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> Transaction(document, <span class="highlight-literal">"Create a new ViewSheet"</span>)
            t.Start()
            <span class="highlight-keyword">Try</span>
                <span class="highlight-comment">' Create a sheet view</span>
                <span class="highlight-keyword">Dim</span> viewSheet__1 <span class="highlight-keyword">As</span> ViewSheet = ViewSheet.Create(document, fs.Id)
                <span class="highlight-keyword">If</span> viewSheet__1 <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
                    <span class="highlight-keyword">Throw</span> <span class="highlight-keyword">New</span> Exception(<span class="highlight-literal">"Failed to create new ViewSheet."</span>)
                <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

                <span class="highlight-comment">' Add passed in view onto the center of the sheet</span>
                <span class="highlight-keyword">Dim</span> location <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> UV((viewSheet__1.Outline.Max.U - viewSheet__1.Outline.Min.U) / <span class="highlight-number">2</span>, (viewSheet__1.Outline.Max.V - viewSheet__1.Outline.Min.V) / <span class="highlight-number">2</span>)

                <span class="highlight-comment">'viewSheet.AddView(view3D, location);</span>
                Viewport.Create(document, viewSheet__1.Id, view3D.Id, <span class="highlight-keyword">New</span> XYZ(location.U, location.V, <span class="highlight-number">0</span>))

                <span class="highlight-comment">' Print the sheet out</span>
                <span class="highlight-keyword">If</span> viewSheet__1.CanBePrinted <span class="highlight-keyword">Then</span>
                    <span class="highlight-keyword">Dim</span> taskDialog <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> TaskDialog(<span class="highlight-literal">"Revit"</span>)
                    taskDialog.MainContent = <span class="highlight-literal">"Print the sheet?"</span>
                    <span class="highlight-keyword">Dim</span> buttons <span class="highlight-keyword">As</span> TaskDialogCommonButtons = TaskDialogCommonButtons.Yes <span class="highlight-keyword">Or</span> TaskDialogCommonButtons.No
                    taskDialog.CommonButtons = buttons
                    <span class="highlight-keyword">Dim</span> result <span class="highlight-keyword">As</span> TaskDialogResult = taskDialog.Show()

                    <span class="highlight-keyword">If</span> result = TaskDialogResult.Yes <span class="highlight-keyword">Then</span>
                        viewSheet__1.Print()
                    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
                <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

                t.Commit()
            <span class="highlight-keyword">Catch</span>
                t.RollBack()
            <span class="highlight-keyword">End</span> <span class="highlight-keyword">Try</span>
        <span class="highlight-keyword">End</span> <span class="highlight-keyword">Using</span>
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span></pre></div><div id="IDAJC_code_Div3" class="codeSnippetContainerCode" style="display: none"><p>No code example is currently available or this language may not be supported.</p></div><div id="IDAJC_code_Div4" class="codeSnippetContainerCode" style="display: none"><p>No code example is currently available or this language may not be supported.</p></div></div></div><div id="IDBJC" class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="IDBJC_tab1" class="codeSnippetContainerTab"><a href="#" onclick="ChangeTab('IDBJC','cs','1','4');return false;">C#</a></div><div id="IDBJC_tab2" class="codeSnippetContainerTab"><a href="#" onclick="ChangeTab('IDBJC','vb','2','4');return false;">VB</a></div><div id="IDBJC_tab3" class="codeSnippetContainerTabPhantom"><a href="#" onclick="ChangeTab('IDBJC','cpp','3','4');return false;">C++</a></div><div id="IDBJC_tab4" class="codeSnippetContainerTabPhantom"><a href="#" onclick="ChangeTab('IDBJC','fs','4','4');return false;">F#</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="IDBJC_copyCode" href="#" class="copyCodeSnippet" onclick="CopyToClipboard('IDBJC');return false;" title="Copy">Copy</a></div></div><div id="IDBJC_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">private</span> <span class="highlight-keyword">void</span> CreateSheetView(Autodesk.Revit.DB.Document document, View3D view3D)
{

    <span class="highlight-comment">// Get an available title block from document</span>
    IEnumerable&lt;FamilySymbol&gt;�familyList =�<span class="highlight-keyword">from</span>�elem�<span class="highlight-keyword">in</span>�<span class="highlight-keyword">new</span>�FilteredElementCollector(document)
                                               .OfClass(<span class="highlight-keyword">typeof</span>(FamilySymbol))
                                               .OfCategory(BuiltInCategory.OST_TitleBlocks)�        
                                           <span class="highlight-keyword">let</span>�type = elem�<span class="highlight-keyword">as</span>�FamilySymbol    �
                                           <span class="highlight-keyword">where</span>�type.Name.Contains(<span class="highlight-literal">"E1"</span>)�        
                                           <span class="highlight-keyword">select</span>�type;


    <span class="highlight-comment">// Create a sheet view</span>
    ViewSheet viewSheet = ViewSheet.Create(document, familyList.First().Id);
    <span class="highlight-keyword">if</span> (<span class="highlight-keyword">null</span> == viewSheet)
    {
        <span class="highlight-keyword">throw</span> <span class="highlight-keyword">new</span> Exception(<span class="highlight-literal">"Failed to create new ViewSheet."</span>);
    }

    <span class="highlight-comment">// Add passed in view onto the center of the sheet</span>
    <span class="highlight-keyword">if</span> (Viewport.CanAddViewToSheet(document, viewSheet.Id, view3D.Id))
    {
        BoundingBoxUV sheetBox = viewSheet.Outline;
        <span class="highlight-keyword">double</span> yPosition = (sheetBox.Max.V - sheetBox.Min.V) / <span class="highlight-number">2</span> + sheetBox.Min.V;
        <span class="highlight-keyword">double</span> xPosition = (sheetBox.Max.U - sheetBox.Min.U) / <span class="highlight-number">2</span> + sheetBox.Min.U;

        XYZ origin = <span class="highlight-keyword">new</span> XYZ(xPosition, yPosition, <span class="highlight-number">0</span>);
        Viewport viewport = Viewport.Create(document, viewSheet.Id, view3D.Id, origin);
    }

    <span class="highlight-comment">// Print the sheet out</span>
    <span class="highlight-keyword">if</span> (viewSheet.CanBePrinted)
    {
       TaskDialog taskDialog = <span class="highlight-keyword">new</span> TaskDialog(<span class="highlight-literal">"Revit"</span>);
       taskDialog.MainContent = <span class="highlight-literal">"Print the sheet?"</span>;
       TaskDialogCommonButtons buttons = TaskDialogCommonButtons.Yes | TaskDialogCommonButtons.No;
       taskDialog.CommonButtons = buttons;
       TaskDialogResult result = taskDialog.Show();

        <span class="highlight-keyword">if</span> (result == TaskDialogResult.Yes)
        {
            viewSheet.Print();
        }
    }
}</pre></div><div id="IDBJC_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="highlight-keyword">Private</span> <span class="highlight-keyword">Sub</span> CreateSheetView(document <span class="highlight-keyword">As</span> Autodesk.Revit.DB.Document, view3D <span class="highlight-keyword">As</span> View3D)

    <span class="highlight-comment">' Get an available title block from document</span>
    <span class="highlight-keyword">Dim</span> collector1 <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> FilteredElementCollector(document)
    collector1 = collector1.OfClass(<span class="highlight-keyword">GetType</span>(FamilySymbol)).OfCategory(BuiltInCategory.OST_TitleBlocks)
    <span class="highlight-keyword">Dim</span> familyList <span class="highlight-keyword">As</span> IEnumerable(<span class="highlight-keyword">Of</span> FamilySymbol)

    familyList = From elem <span class="highlight-keyword">In</span> collector1
                 Let fstype = <span class="highlight-keyword">TryCast</span>(elem, FamilySymbol)
                 Where fstype.Name.Contains(<span class="highlight-literal">"E1"</span>)
                 <span class="highlight-keyword">Select</span> fstype


    <span class="highlight-comment">' Create a sheet view</span>
    <span class="highlight-keyword">Dim</span> viewSheet__1 <span class="highlight-keyword">As</span> ViewSheet = ViewSheet.Create(document, familyList.First().Id)
    <span class="highlight-keyword">If</span> viewSheet__1 <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
        <span class="highlight-keyword">Throw</span> <span class="highlight-keyword">New</span> Exception(<span class="highlight-literal">"Failed to create new ViewSheet."</span>)
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

    <span class="highlight-comment">' Add passed in view onto the center of the sheet</span>
    <span class="highlight-keyword">If</span> Viewport.CanAddViewToSheet(document, viewSheet__1.Id, view3D.Id) <span class="highlight-keyword">Then</span>
        <span class="highlight-keyword">Dim</span> sheetBox <span class="highlight-keyword">As</span> BoundingBoxUV = viewSheet__1.Outline
        <span class="highlight-keyword">Dim</span> yPosition <span class="highlight-keyword">As</span> <span class="highlight-keyword">Double</span> = (sheetBox.Max.V - sheetBox.Min.V) / <span class="highlight-number">2</span> + sheetBox.Min.V
        <span class="highlight-keyword">Dim</span> xPosition <span class="highlight-keyword">As</span> <span class="highlight-keyword">Double</span> = (sheetBox.Max.U - sheetBox.Min.U) / <span class="highlight-number">2</span> + sheetBox.Min.U

        <span class="highlight-keyword">Dim</span> origin <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> XYZ(xPosition, yPosition, <span class="highlight-number">0</span>)
        <span class="highlight-keyword">Dim</span> viewport__2 <span class="highlight-keyword">As</span> Viewport = Viewport.Create(document, viewSheet__1.Id, view3D.Id, origin)
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

    <span class="highlight-comment">' Print the sheet out</span>
    <span class="highlight-keyword">If</span> viewSheet__1.CanBePrinted <span class="highlight-keyword">Then</span>
        <span class="highlight-keyword">Dim</span> taskDialog <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> TaskDialog(<span class="highlight-literal">"Revit"</span>)
        taskDialog.MainContent = <span class="highlight-literal">"Print the sheet?"</span>
        <span class="highlight-keyword">Dim</span> buttons <span class="highlight-keyword">As</span> TaskDialogCommonButtons = TaskDialogCommonButtons.Yes <span class="highlight-keyword">Or</span> TaskDialogCommonButtons.No
        taskDialog.CommonButtons = buttons
        <span class="highlight-keyword">Dim</span> result <span class="highlight-keyword">As</span> TaskDialogResult = taskDialog.Show()

        <span class="highlight-keyword">If</span> result = TaskDialogResult.Yes <span class="highlight-keyword">Then</span>
            viewSheet__1.Print()
        <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span></pre></div><div id="IDBJC_code_Div3" class="codeSnippetContainerCode" style="display: none"><p>No code example is currently available or this language may not be supported.</p></div><div id="IDBJC_code_Div4" class="codeSnippetContainerCode" style="display: none"><p>No code example is currently available or this language may not be supported.</p></div></div></div></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('seeAlso')" onkeypress="SectionExpandCollapse_CheckKey('seeAlso', event)" tabindex="0"><img id="seeAlsoToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />See Also</span></div><div id="seeAlsoSection" class="collapsibleSection"><h4>Reference</h4><div><a href="af2ee879-173d-df3a-9793-8d5750a17b49.htm">ViewSheet Class</a></div><div><a href="87546ba7-461b-c646-cbb1-2cb8f5bff8b2.htm">Autodesk.Revit.DB Namespace</a></div></div></div></div>
        </div></body></html>