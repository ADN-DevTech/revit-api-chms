<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><meta name="Microsoft.Help.SelfBranded" content="true" /><meta name="Language" content="en-us" /><meta name="Microsoft.Help.Locale" content="en-us" /><meta name="Microsoft.Help.TopicLocale" content="en-us" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"></script><title>FamilyManager.NewType Method</title><meta name="Title" content="NewType Method" /><meta name="Microsoft.Help.Id" content="M:Autodesk.Revit.DB.FamilyManager.NewType(System.String)" /><meta name="Microsoft.Help.ContentType" content="Reference" /><meta name="System.Keywords" content="FamilyManager.NewType method" /><meta name="System.Keywords" content="NewType method" /><meta name="Microsoft.Help.F1" content="Autodesk.Revit.DB.FamilyManager.NewType" /><meta name="Microsoft.Help.F1" content="FamilyManager.NewType" /><meta name="Microsoft.Help.F1" content="NewType" /><meta name="container" content="Autodesk.Revit.DB" /><meta name="file" content="b46e98b1-54a1-7e04-66b7-a35efe5bc3f8" /><meta name="guid" content="b46e98b1-54a1-7e04-66b7-a35efe5bc3f8" /><meta name="Microsoft.Help.Category" content="CSharp" /><meta name="Microsoft.Help.Category" content="VB" /><meta name="Description" content="Add a new family type with a given name and makes it be the current type." /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Help1.css" /></head><body onload="SetDefaultLanguage('cs');"><input type="hidden" id="userDataCache" class="userDataStyle" /><div id="PageHeader" class="pageHeader">Revit 2025 API</div><div class="pageBody"><div id="TopicContent" class="topicContent"><table class="titleTable"><tr><td class="titleColumn"><h1>Family<wbr />Manager<span id="LST37518C4A_0" data-languageSpecificText="cpp=::|nu=."></span>New<wbr />Type Method</h1></td></tr></table><div class="summary">Add a new family type with a given name and makes it be the current type.</div><br /><strong>Namespace:</strong> <a href="87546ba7-461b-c646-cbb1-2cb8f5bff8b2.htm">Autodesk.Revit.DB</a><br /><strong>Assembly:</strong> RevitAPI (in RevitAPI.dll) Version: 25.0.0.0 (25.0.0.0)<div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDB')" onkeypress="SectionExpandCollapse_CheckKey('IDB', event)" tabindex="0"><img id="IDBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Syntax</span></div><div id="IDBSection" class="collapsibleSection"><div id="IDAB" class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="IDAB_tab1" class="codeSnippetContainerTab"><a href="#" onclick="ChangeTab('IDAB','cs','1','4');return false;">C#</a></div><div id="IDAB_tab2" class="codeSnippetContainerTab"><a href="#" onclick="ChangeTab('IDAB','vb','2','4');return false;">VB</a></div><div id="IDAB_tab3" class="codeSnippetContainerTab"><a href="#" onclick="ChangeTab('IDAB','cpp','3','4');return false;">C++</a></div><div id="IDAB_tab4" class="codeSnippetContainerTab"><a href="#" onclick="ChangeTab('IDAB','fs','4','4');return false;">F#</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="IDAB_copyCode" href="#" class="copyCodeSnippet" onclick="CopyToClipboard('IDAB');return false;" title="Copy">Copy</a></div></div><div id="IDAB_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="keyword">public</span> <span class="identifier">FamilyType</span> <span class="identifier">NewType</span>(
	<span class="identifier">string</span> <span class="parameter">typeName</span>
)</pre></div><div id="IDAB_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">Public</span> <span class="keyword">Function</span> <span class="identifier">NewType</span> ( 
	<span class="parameter">typeName</span> <span class="keyword">As</span> <span class="identifier">String</span>
) <span class="keyword">As</span> <span class="identifier">FamilyType</span></pre></div><div id="IDAB_code_Div3" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">public</span>:
<span class="identifier">FamilyType</span>^ <span class="identifier">NewType</span>(
	<span class="identifier">String</span>^ <span class="parameter">typeName</span>
)</pre></div><div id="IDAB_code_Div4" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">member</span> <span class="identifier">NewType</span> : 
        <span class="parameter">typeName</span> : <span class="identifier">string</span> <span class="keyword">-&gt;</span> <span class="identifier">FamilyType</span> </pre></div></div></div><h4>Parameters</h4><dl><dt class="has-text-weight-normal"><span class="parameter">typeName</span>  <a href="https://learn.microsoft.com/dotnet/api/system.string" target="_blank" rel="noopener noreferrer">String</a></dt><dd>The name of new family type.</dd></dl><h4>Return Value</h4><a href="7f15b213-c99b-db59-3622-3280757b82d9.htm">FamilyType</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDCC')" onkeypress="SectionExpandCollapse_CheckKey('IDCC', event)" tabindex="0"><img id="IDCCToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Exceptions</span></div><div id="IDCCSection" class="collapsibleSection"><table><tr><th>Exception</th><th>Condition</th></tr><tr><td><a href="631e1424-60f4-929b-4e52-dda9dcd26316.htm">ArgumentNullException</a></td><td>
Thrown when the input argument-"typeName"-is <span class="keyword"><span id="LST37518C4A_1" data-languageSpecificText="cpp=nullptr|vb=Nothing|nu=null"></span></span>.
</td></tr><tr><td><a href="2e6e4206-97a8-dd4b-df5d-4269f4bb6088.htm">ArgumentException</a></td><td>
Thrown when the input argument-"typeName"-is already in use.
</td></tr><tr><td><a href="9e715f03-3884-e539-4dd6-8d7545733adc.htm">InvalidOperationException</a></td><td>
Thrown when the family type creation failed.
</td></tr></table></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDFC')" onkeypress="SectionExpandCollapse_CheckKey('IDFC', event)" tabindex="0"><img id="IDFCToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Example</span></div><div id="IDFCSection" class="collapsibleSection"><div id="IDAFC" class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="IDAFC_tab1" class="codeSnippetContainerTab"><a href="#" onclick="ChangeTab('IDAFC','cs','1','4');return false;">C#</a></div><div id="IDAFC_tab2" class="codeSnippetContainerTab"><a href="#" onclick="ChangeTab('IDAFC','vb','2','4');return false;">VB</a></div><div id="IDAFC_tab3" class="codeSnippetContainerTabPhantom"><a href="#" onclick="ChangeTab('IDAFC','cpp','3','4');return false;">C++</a></div><div id="IDAFC_tab4" class="codeSnippetContainerTabPhantom"><a href="#" onclick="ChangeTab('IDAFC','fs','4','4');return false;">F#</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="IDAFC_copyCode" href="#" class="copyCodeSnippet" onclick="CopyToClipboard('IDAFC');return false;" title="Copy">Copy</a></div></div><div id="IDAFC_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">public</span> <span class="highlight-keyword">void</span> EditFamilyTypes(Document document, FamilyInstance familyInstance)
{
    <span class="highlight-comment">// example works best when familyInstance is a rectangular concrete element</span>

    <span class="highlight-keyword">if</span> ((<span class="highlight-keyword">null</span> == document) || (<span class="highlight-keyword">null</span> == familyInstance.Symbol))
    {
        <span class="highlight-keyword">return</span>;   <span class="highlight-comment">// invalid arguments</span>
    }

    <span class="highlight-comment">// Get family associated with this</span>
    Family family = familyInstance.Symbol.Family;
    <span class="highlight-keyword">if</span> (<span class="highlight-keyword">null</span> == family)
    {
        <span class="highlight-keyword">return</span>;    <span class="highlight-comment">// could not get the family</span>
    }

    <span class="highlight-comment">// Get Family document for family</span>
    Document familyDoc = document.EditFamily(family);
    <span class="highlight-keyword">if</span> (<span class="highlight-keyword">null</span> == familyDoc)
    {
        <span class="highlight-keyword">return</span>;    <span class="highlight-comment">// could not open a family for edit</span>
    }

    FamilyManager familyManager = familyDoc.FamilyManager;
    <span class="highlight-keyword">if</span> (<span class="highlight-keyword">null</span> == familyManager)
    {
        <span class="highlight-keyword">return</span>;  <span class="highlight-comment">// cuould not get a family manager</span>
    }

    <span class="highlight-comment">// Start transaction for the family document</span>
    <span class="highlight-keyword">using</span> (Transaction newFamilyTypeTransaction = <span class="highlight-keyword">new</span> Transaction(familyDoc, <span class="highlight-literal">"Add Type to Family"</span>))
    {
        <span class="highlight-keyword">int</span> changesMade = <span class="highlight-number">0</span>;
        newFamilyTypeTransaction.Start();

        <span class="highlight-comment">// add a new type and edit its parameters</span>
        FamilyType newFamilyType = familyManager.NewType(<span class="highlight-literal">"2X2"</span>);

        <span class="highlight-keyword">if</span> (newFamilyType != <span class="highlight-keyword">null</span>)
        {
            <span class="highlight-comment">// look for 'b' and 'h' parameters and set them to 2 feet</span>
            FamilyParameter familyParam = familyManager.get_Parameter(<span class="highlight-literal">"b"</span>);
            <span class="highlight-keyword">if</span> (<span class="highlight-keyword">null</span> != familyParam)
            {
                familyManager.Set(familyParam, <span class="highlight-number">2.0</span>);
                changesMade += <span class="highlight-number">1</span>;
            }

            familyParam = familyManager.get_Parameter(<span class="highlight-literal">"h"</span>);
            <span class="highlight-keyword">if</span> (<span class="highlight-keyword">null</span> != familyParam)
            {
                familyManager.Set(familyParam, <span class="highlight-number">2.0</span>);
                changesMade += <span class="highlight-number">1</span>;
            }
        }

        <span class="highlight-keyword">if</span> (<span class="highlight-number">2</span> == changesMade)   <span class="highlight-comment">// set both paramaters?</span>
        {
            newFamilyTypeTransaction.Commit();
        }
        <span class="highlight-keyword">else</span>   <span class="highlight-comment">// could not make the change -&gt; should roll back </span>
        {
            newFamilyTypeTransaction.RollBack();
        }

        <span class="highlight-comment">// if could not make the change or could not commit it, we return</span>
        <span class="highlight-keyword">if</span> (newFamilyTypeTransaction.GetStatus() != TransactionStatus.Committed)
        {
            <span class="highlight-keyword">return</span>;
        }
    }

    <span class="highlight-comment">// now update the Revit project with Family which has a new type</span>
    LoadOpts loadOptions = <span class="highlight-keyword">new</span> LoadOpts();

    <span class="highlight-comment">// This overload is necessary for reloading an edited family</span>
    <span class="highlight-comment">// back into the source document from which it was extracted</span>
    family = familyDoc.LoadFamily(document, loadOptions);
    <span class="highlight-keyword">if</span> (<span class="highlight-keyword">null</span> != family)
    {
        <span class="highlight-comment">// find the new type and assign it to FamilyInstance</span>
        ISet&lt;ElementId&gt; familySymbolIds = family.GetFamilySymbolIds();
        <span class="highlight-keyword">foreach</span> (ElementId id <span class="highlight-keyword">in</span> familySymbolIds)
        {
            FamilySymbol familySymbol = family.Document.GetElement(id) <span class="highlight-keyword">as</span> FamilySymbol;
            <span class="highlight-keyword">if</span> ((<span class="highlight-keyword">null</span> != familySymbol) &amp;&amp; familySymbol.Name == <span class="highlight-literal">"2X2"</span>)
            {
                <span class="highlight-keyword">using</span> (Transaction changeSymbol = <span class="highlight-keyword">new</span> Transaction(document, <span class="highlight-literal">"Change Symbol Assignment"</span>))
                {
                    changeSymbol.Start();
                    familyInstance.Symbol = familySymbol;
                    changeSymbol.Commit();
                }
                <span class="highlight-keyword">break</span>;
            }
        }
    }
}

<span class="highlight-keyword">class</span> LoadOpts : IFamilyLoadOptions
{
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">bool</span> OnFamilyFound(<span class="highlight-keyword">bool</span> familyInUse, <span class="highlight-keyword">out</span> <span class="highlight-keyword">bool</span> overwriteParameterValues)
    {
        overwriteParameterValues = <span class="highlight-keyword">true</span>;
        <span class="highlight-keyword">return</span> <span class="highlight-keyword">true</span>;
    }

    <span class="highlight-keyword">public</span> <span class="highlight-keyword">bool</span> OnSharedFamilyFound(Family sharedFamily, <span class="highlight-keyword">bool</span> familyInUse, <span class="highlight-keyword">out</span> FamilySource source, <span class="highlight-keyword">out</span> <span class="highlight-keyword">bool</span> overwriteParameterValues)
    {
        source = FamilySource.Family;
        overwriteParameterValues = <span class="highlight-keyword">true</span>;
        <span class="highlight-keyword">return</span> <span class="highlight-keyword">true</span>;
    }
}</pre></div><div id="IDAFC_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="highlight-keyword">Public</span> <span class="highlight-keyword">Sub</span> EditFamilyTypes(document <span class="highlight-keyword">As</span> Document, familyInstance <span class="highlight-keyword">As</span> FamilyInstance)
    <span class="highlight-comment">' example works best when familyInstance is a rectangular concrete element</span>

    <span class="highlight-keyword">If</span> (document <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span>) <span class="highlight-keyword">OrElse</span> (familyInstance.Symbol <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span>) <span class="highlight-keyword">Then</span>
        <span class="highlight-comment">' invalid arguments</span>
        <span class="highlight-keyword">Return</span>
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

    <span class="highlight-comment">' Get family associated with this</span>
    <span class="highlight-keyword">Dim</span> family <span class="highlight-keyword">As</span> Family = familyInstance.Symbol.Family
    <span class="highlight-keyword">If</span> family <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
        <span class="highlight-comment">' could not get the family</span>
        <span class="highlight-keyword">Return</span>
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

    <span class="highlight-comment">' Get Family document for family</span>
    <span class="highlight-keyword">Dim</span> familyDoc <span class="highlight-keyword">As</span> Document = document.EditFamily(family)
    <span class="highlight-keyword">If</span> familyDoc <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
        <span class="highlight-comment">' could not open a family for edit</span>
        <span class="highlight-keyword">Return</span>
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

    <span class="highlight-keyword">Dim</span> familyManager <span class="highlight-keyword">As</span> FamilyManager = familyDoc.FamilyManager
    <span class="highlight-keyword">If</span> familyManager <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
        <span class="highlight-comment">' cuould not get a family manager</span>
        <span class="highlight-keyword">Return</span>
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

    <span class="highlight-comment">' Start transaction for the family document</span>
    <span class="highlight-keyword">Using</span> newFamilyTypeTransaction <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> Transaction(familyDoc, <span class="highlight-literal">"Add Type to Family"</span>)
        <span class="highlight-keyword">Dim</span> changesMade <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">0</span>
        newFamilyTypeTransaction.Start()

        <span class="highlight-comment">' add a new type and edit its parameters</span>
        <span class="highlight-keyword">Dim</span> newFamilyType <span class="highlight-keyword">As</span> FamilyType = familyManager.NewType(<span class="highlight-literal">"2X2"</span>)

        <span class="highlight-keyword">If</span> newFamilyType <span class="highlight-keyword">IsNot</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
            <span class="highlight-comment">' look for 'b' and 'h' parameters and set them to 2 feet</span>
            <span class="highlight-keyword">Dim</span> familyParam <span class="highlight-keyword">As</span> FamilyParameter = familyManager.Parameter(<span class="highlight-literal">"b"</span>)
            <span class="highlight-keyword">If</span> familyParam <span class="highlight-keyword">IsNot</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
                familyManager.[<span class="highlight-keyword">Set</span>](familyParam, <span class="highlight-number">2.0</span>)
                changesMade += <span class="highlight-number">1</span>
            <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

            familyParam = familyManager.Parameter(<span class="highlight-literal">"h"</span>)
            <span class="highlight-keyword">If</span> familyParam <span class="highlight-keyword">IsNot</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
                familyManager.[<span class="highlight-keyword">Set</span>](familyParam, <span class="highlight-number">2.0</span>)
                changesMade += <span class="highlight-number">1</span>
            <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
        <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

        <span class="highlight-keyword">If</span> <span class="highlight-number">2</span> = changesMade <span class="highlight-keyword">Then</span>
            <span class="highlight-comment">' set both paramaters?</span>
            newFamilyTypeTransaction.Commit()
        <span class="highlight-keyword">Else</span>
            <span class="highlight-comment">' could not make the change -&gt; should roll back </span>
            newFamilyTypeTransaction.RollBack()
        <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

        <span class="highlight-comment">' if could not make the change or could not commit it, we return</span>
        <span class="highlight-keyword">If</span> newFamilyTypeTransaction.GetStatus() &lt;&gt; TransactionStatus.Committed <span class="highlight-keyword">Then</span>
            <span class="highlight-keyword">Return</span>
        <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Using</span>

    <span class="highlight-comment">' now update the Revit project with Family which has a new type</span>
    <span class="highlight-keyword">Dim</span> loadOptions <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> LoadOpts()

    <span class="highlight-comment">' This overload is necessary for reloading an edited family</span>
    <span class="highlight-comment">' back into the source document from which it was extracted</span>
    family = familyDoc.LoadFamily(document, loadOptions)
    <span class="highlight-keyword">If</span> family <span class="highlight-keyword">IsNot</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
        <span class="highlight-comment">' find the new type and assign it to FamilyInstance</span>
        <span class="highlight-keyword">Dim</span> familySymbolIds <span class="highlight-keyword">As</span> ISet(<span class="highlight-keyword">Of</span> ElementId) = family.GetFamilySymbolIds()
        <span class="highlight-keyword">For</span> <span class="highlight-keyword">Each</span> id <span class="highlight-keyword">As</span> ElementId <span class="highlight-keyword">In</span> familySymbolIds
            <span class="highlight-keyword">Dim</span> familySymbol <span class="highlight-keyword">As</span> FamilySymbol = <span class="highlight-keyword">TryCast</span>(family.Document.GetElement(id), FamilySymbol)
            <span class="highlight-keyword">If</span> (familySymbol <span class="highlight-keyword">IsNot</span> <span class="highlight-keyword">Nothing</span>) <span class="highlight-keyword">AndAlso</span> familySymbol.Name = <span class="highlight-literal">"2X2"</span> <span class="highlight-keyword">Then</span>
                <span class="highlight-keyword">Using</span> changeSymbol <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> Transaction(document, <span class="highlight-literal">"Change Symbol Assignment"</span>)
                    changeSymbol.Start()
                    familyInstance.Symbol = familySymbol
                    changeSymbol.Commit()
                <span class="highlight-keyword">End</span> <span class="highlight-keyword">Using</span>
                <span class="highlight-keyword">Exit</span> <span class="highlight-keyword">For</span>
            <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
        <span class="highlight-keyword">Next</span>
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span>

<span class="highlight-keyword">Private</span> <span class="highlight-keyword">Class</span> LoadOpts
    <span class="highlight-keyword">Implements</span> IFamilyLoadOptions
    <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Function</span> OnFamilyFound(familyInUse <span class="highlight-keyword">As</span> <span class="highlight-keyword">Boolean</span>, <span class="highlight-keyword">ByRef</span> overwriteParameterValues <span class="highlight-keyword">As</span> <span class="highlight-keyword">Boolean</span>) <span class="highlight-keyword">As</span> <span class="highlight-keyword">Boolean</span> <span class="highlight-keyword">Implements</span> IFamilyLoadOptions.OnFamilyFound
        overwriteParameterValues = <span class="highlight-keyword">True</span>
        <span class="highlight-keyword">Return</span> <span class="highlight-keyword">True</span>
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Function</span>

    <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Function</span> OnSharedFamilyFound(sharedFamily <span class="highlight-keyword">As</span> Family, familyInUse <span class="highlight-keyword">As</span> <span class="highlight-keyword">Boolean</span>, <span class="highlight-keyword">ByRef</span> source <span class="highlight-keyword">As</span> FamilySource, <span class="highlight-keyword">ByRef</span> overwriteParameterValues <span class="highlight-keyword">As</span> <span class="highlight-keyword">Boolean</span>) <span class="highlight-keyword">As</span> <span class="highlight-keyword">Boolean</span> <span class="highlight-keyword">Implements</span> IFamilyLoadOptions.OnSharedFamilyFound
        source = FamilySource.Family
        overwriteParameterValues = <span class="highlight-keyword">True</span>
        <span class="highlight-keyword">Return</span> <span class="highlight-keyword">True</span>
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Function</span>
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Class</span></pre></div><div id="IDAFC_code_Div3" class="codeSnippetContainerCode" style="display: none"><p>No code example is currently available or this language may not be supported.</p></div><div id="IDAFC_code_Div4" class="codeSnippetContainerCode" style="display: none"><p>No code example is currently available or this language may not be supported.</p></div></div></div></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('seeAlso')" onkeypress="SectionExpandCollapse_CheckKey('seeAlso', event)" tabindex="0"><img id="seeAlsoToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />See Also</span></div><div id="seeAlsoSection" class="collapsibleSection"><h4>Reference</h4><div><a href="1cc4fe6c-0e9f-7439-0021-32d2e06f4c33.htm">FamilyManager Class</a></div><div><a href="87546ba7-461b-c646-cbb1-2cb8f5bff8b2.htm">Autodesk.Revit.DB Namespace</a></div></div></div></div><div id="PageFooter" class="pageFooter"><div class="feedbackLink">Send comments on this topic to
        <a id="HT_MailLink" href="mailto:revitapifeedback%40autodesk.com?Subject=Revit%202025%20API">Autodesk</a></div>
        <script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Your feedback is used to improve the documentation and the product. Your e-mail address will not be used for any other purpose and is disposed of after the issue you report is resolved. While working to resolve the issue that you report, you may be contacted via e-mail to get further details or clarification on the feedback you sent. After the issue you report has been addressed, you may receive an e-mail to let you know that your feedback has been addressed.");
        </script></div></body></html>