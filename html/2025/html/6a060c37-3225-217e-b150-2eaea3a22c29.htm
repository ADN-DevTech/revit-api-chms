<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><meta name="Microsoft.Help.SelfBranded" content="true" /><meta name="Language" content="en-us" /><meta name="Microsoft.Help.Locale" content="en-us" /><meta name="Microsoft.Help.TopicLocale" content="en-us" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"></script><title>IExportContext.OnPolymesh Method</title><meta name="Title" content="OnPolymesh Method" /><meta name="Microsoft.Help.Id" content="M:Autodesk.Revit.DB.IExportContext.OnPolymesh(Autodesk.Revit.DB.PolymeshTopology)" /><meta name="Microsoft.Help.ContentType" content="Reference" /><meta name="System.Keywords" content="IExportContext.OnPolymesh method" /><meta name="System.Keywords" content="OnPolymesh method" /><meta name="Microsoft.Help.F1" content="Autodesk.Revit.DB.IExportContext.OnPolymesh" /><meta name="Microsoft.Help.F1" content="IExportContext.OnPolymesh" /><meta name="Microsoft.Help.F1" content="OnPolymesh" /><meta name="container" content="Autodesk.Revit.DB" /><meta name="file" content="6a060c37-3225-217e-b150-2eaea3a22c29" /><meta name="guid" content="6a060c37-3225-217e-b150-2eaea3a22c29" /><meta name="Microsoft.Help.Category" content="CSharp" /><meta name="Microsoft.Help.Category" content="VB" /><meta name="Description" content="This method is called when a tessellated polymesh of a 3d face is being output." /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Help1.css" /></head><body onload="SetDefaultLanguage('cs');"><input type="hidden" id="userDataCache" class="userDataStyle" /><div id="PageHeader" class="pageHeader">Revit 2025 API</div><div class="pageBody"><div id="TopicContent" class="topicContent"><table class="titleTable"><tr><td class="titleColumn"><h1>IExport<wbr />Context<span id="LSTF2508B87_0" data-languageSpecificText="cpp=::|nu=."></span>On<wbr />Polymesh Method</h1></td></tr></table><div class="summary">
   This method is called when a tessellated polymesh of a 3d face is being output.
</div><br /><strong>Namespace:</strong> <a href="87546ba7-461b-c646-cbb1-2cb8f5bff8b2.htm">Autodesk.Revit.DB</a><br /><strong>Assembly:</strong> RevitAPI (in RevitAPI.dll) Version: 25.0.0.0 (25.0.0.0)<div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDB')" onkeypress="SectionExpandCollapse_CheckKey('IDB', event)" tabindex="0"><img id="IDBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Syntax</span></div><div id="IDBSection" class="collapsibleSection"><div id="IDAB" class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="IDAB_tab1" class="codeSnippetContainerTab"><a href="#" onclick="ChangeTab('IDAB','cs','1','4');return false;">C#</a></div><div id="IDAB_tab2" class="codeSnippetContainerTab"><a href="#" onclick="ChangeTab('IDAB','vb','2','4');return false;">VB</a></div><div id="IDAB_tab3" class="codeSnippetContainerTab"><a href="#" onclick="ChangeTab('IDAB','cpp','3','4');return false;">C++</a></div><div id="IDAB_tab4" class="codeSnippetContainerTab"><a href="#" onclick="ChangeTab('IDAB','fs','4','4');return false;">F#</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="IDAB_copyCode" href="#" class="copyCodeSnippet" onclick="CopyToClipboard('IDAB');return false;" title="Copy">Copy</a></div></div><div id="IDAB_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="keyword">void</span> <span class="identifier">OnPolymesh</span>(
	<span class="identifier">PolymeshTopology</span> <span class="parameter">node</span>
)</pre></div><div id="IDAB_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">Sub</span> <span class="identifier">OnPolymesh</span> ( 
	<span class="parameter">node</span> <span class="keyword">As</span> <span class="identifier">PolymeshTopology</span>
)</pre></div><div id="IDAB_code_Div3" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">void</span> <span class="identifier">OnPolymesh</span>(
	<span class="identifier">PolymeshTopology</span>^ <span class="parameter">node</span>
)</pre></div><div id="IDAB_code_Div4" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">abstract</span> <span class="identifier">OnPolymesh</span> : 
        <span class="parameter">node</span> : <span class="identifier">PolymeshTopology</span> <span class="keyword">-&gt;</span> <span class="keyword">unit</span> </pre></div></div></div><h4>Parameters</h4><dl><dt class="has-text-weight-normal"><span class="parameter">node</span>  <a href="fef5982c-3825-eed0-f792-1e0bff5509c2.htm">PolymeshTopology</a></dt><dd>
   A node representing topology of the polymesh
</dd></dl></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDDC')" onkeypress="SectionExpandCollapse_CheckKey('IDDC', event)" tabindex="0"><img id="IDDCToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Example</span></div><div id="IDDCSection" class="collapsibleSection"><div id="IDADC" class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="IDADC_tab1" class="codeSnippetContainerTab"><a href="#" onclick="ChangeTab('IDADC','cs','1','4');return false;">C#</a></div><div id="IDADC_tab2" class="codeSnippetContainerTab"><a href="#" onclick="ChangeTab('IDADC','vb','2','4');return false;">VB</a></div><div id="IDADC_tab3" class="codeSnippetContainerTabPhantom"><a href="#" onclick="ChangeTab('IDADC','cpp','3','4');return false;">C++</a></div><div id="IDADC_tab4" class="codeSnippetContainerTabPhantom"><a href="#" onclick="ChangeTab('IDADC','fs','4','4');return false;">F#</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="IDADC_copyCode" href="#" class="copyCodeSnippet" onclick="CopyToClipboard('IDADC');return false;" title="Copy">Copy</a></div></div><div id="IDADC_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-comment">/// &lt;summary&gt;</span>
<span class="highlight-comment">/// This method is called up for every face that was processed and tessellated</span>
<span class="highlight-comment">/// &lt;/summary&gt;</span>
<span class="highlight-comment">/// &lt;remarks&gt;</span>
<span class="highlight-comment">/// The node provides all information about geometric topology if the mesh.</span>
<span class="highlight-comment">/// It is assumed that a concrete exporter would consume the part it can </span>
<span class="highlight-comment">/// understand and/or support (vertices, normals, UVs, etc.) and convert</span>
<span class="highlight-comment">/// them into the final, export format.</span>
<span class="highlight-comment">/// &lt;/remarks&gt;</span>
<span class="highlight-keyword">public</span> <span class="highlight-keyword">void</span> OnPolymesh(PolymeshTopology node)
{
   <span class="highlight-comment">// Note: the current material will get applied to the polymesh.</span>

   <span class="highlight-comment">// If a stack of transformation is maintained by the context object,</span>
   <span class="highlight-comment">// the current combined transform will be applied to the points.</span>
   Transform currentTransform = m_TransformationStack.Peek();

   <span class="highlight-comment">// basic properties of the mesh</span>

   <span class="highlight-keyword">int</span> numberOfFacet = node.NumberOfFacets;
   <span class="highlight-keyword">int</span> numberOfPoints = node.NumberOfPoints;
   <span class="highlight-keyword">int</span> numberOfUVs = node.NumberOfUVs;
   <span class="highlight-keyword">int</span> numberOfNormal = node.NumberOfNormals;

   <span class="highlight-comment">// Note: Normals are associated with either points or facets of the polymesh</span>
   <span class="highlight-comment">// The export code must account for different processing of these two cases.</span>

   <span class="highlight-comment">// A) process points of the polymesh</span>

   <span class="highlight-keyword">if</span>( node.DistributionOfNormals == DistributionOfNormals.AtEachPoint )
   {
      ExportMeshPoints(node.GetPoints(), currentTransform, node.GetNormals() );
   }
   <span class="highlight-keyword">else</span> <span class="highlight-keyword">if</span>( node.DistributionOfNormals == DistributionOfNormals.OnePerFace )
   {
      ExportMeshPoints(node.GetPoints(), currentTransform, node.GetNormal(<span class="highlight-number">0</span>) );
   }
   <span class="highlight-keyword">else</span>  <span class="highlight-comment">// DistributionOfNormals.OnEachFacet</span>
   {
      <span class="highlight-comment">// In this case, there is normal vector associated with each facet</span>
      <span class="highlight-comment">// Depending on the export, our format either support this case,</span>
      <span class="highlight-comment">// of we would have to determine what normals to apply at each </span>
      <span class="highlight-comment">// point by a way of combining normal of the surrounding facets.</span>
      ExportMeshPoints(node.GetPoints(), currentTransform );
   }

   <span class="highlight-comment">// B Process facets of the polymesh</span>

   <span class="highlight-keyword">if</span>( node.DistributionOfNormals == DistributionOfNormals.OnEachFacet )
   {
      ExportMeshFacets(node.GetFacets(), node.GetNormals() );
   }
   <span class="highlight-keyword">else</span>
   {
      ExportMeshFacets(node.GetFacets(), <span class="highlight-keyword">null</span> );
   }

   <span class="highlight-comment">// B) Process UV coordinates if available (and applicable)</span>

   <span class="highlight-keyword">if</span>( node.NumberOfUVs &gt; <span class="highlight-number">0</span> )
   {
      ExportMeshUVs( node.GetUVs() );
   }
}

<span class="highlight-keyword">private</span> <span class="highlight-keyword">void</span> ExportMeshPoints(IList&lt;XYZ&gt; points, Transform trf, IList&lt;XYZ&gt; normals)
{
   <span class="highlight-comment">// process points with normals</span>
}

<span class="highlight-keyword">private</span> <span class="highlight-keyword">void</span> ExportMeshPoints(IList&lt;XYZ&gt; points, Transform trf, XYZ normal)
{
   <span class="highlight-comment">// process points with only one normal vector (a planar face)</span>
}

<span class="highlight-keyword">private</span> <span class="highlight-keyword">void</span> ExportMeshPoints(IList&lt;XYZ&gt; points, Transform trf)
{
   <span class="highlight-comment">// process points without normal (assuming normals are associated with facets instead)</span>
}

<span class="highlight-keyword">private</span> <span class="highlight-keyword">void</span> ExportMeshFacets(IList&lt;PolymeshFacet&gt; facets, IList&lt;XYZ&gt; normals)
{
   <span class="highlight-keyword">if</span> (normals == <span class="highlight-keyword">null</span>)
   {
      <span class="highlight-comment">// process facets without normals  (assuming normals are associated with points instead)</span>
   }
   <span class="highlight-keyword">else</span>
   {
      <span class="highlight-comment">// process facets with normals</span>
   }
}

<span class="highlight-keyword">private</span> <span class="highlight-keyword">void</span> ExportMeshUVs(IList&lt;UV&gt; UVs)
{
   <span class="highlight-comment">// process UVs</span>
}</pre></div><div id="IDADC_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="highlight-comment">' &lt;summary&gt;</span>
<span class="highlight-comment">' This method is called up for every face that was processed and tessellated</span>
<span class="highlight-comment">' &lt;/summary&gt;</span>
<span class="highlight-comment">' &lt;remarks&gt;</span>
<span class="highlight-comment">' The node provides all information about geometric topology if the mesh.</span>
<span class="highlight-comment">' It is assumed that a concrete exporter would consume the part it can </span>
<span class="highlight-comment">' understand and/or support (vertices, normals, UVs, etc.) and convert</span>
<span class="highlight-comment">' them into the final, export format.</span>
<span class="highlight-comment">' &lt;/remarks&gt;</span>
<span class="highlight-keyword">Public</span> <span class="highlight-keyword">Sub</span> OnPolymesh(node <span class="highlight-keyword">As</span> PolymeshTopology) <span class="highlight-keyword">Implements</span> IExportContext.OnPolymesh
    <span class="highlight-comment">' Note: the current material will get applied to the polymesh.</span>

    <span class="highlight-comment">' If a stack of transformation is maintained by the context object,</span>
    <span class="highlight-comment">' the current combined transform will be applied to the points.</span>
    <span class="highlight-keyword">Dim</span> currentTransform <span class="highlight-keyword">As</span> Transform = m_TransformationStack.Peek()

    <span class="highlight-comment">' basic properties of the mesh</span>

    <span class="highlight-keyword">Dim</span> numberOfFacet <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = node.NumberOfFacets
    <span class="highlight-keyword">Dim</span> numberOfPoints <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = node.NumberOfPoints
    <span class="highlight-keyword">Dim</span> numberOfUVs <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = node.NumberOfUVs
    <span class="highlight-keyword">Dim</span> numberOfNormal <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = node.NumberOfNormals

    <span class="highlight-comment">' Note: Normals are associated with either points or facets of the polymesh</span>
    <span class="highlight-comment">' The export code must account for different processing of these two cases.</span>

    <span class="highlight-comment">' A) process points of the polymesh</span>

    <span class="highlight-keyword">If</span> node.DistributionOfNormals = DistributionOfNormals.AtEachPoint <span class="highlight-keyword">Then</span>
        ExportMeshPoints(node.GetPoints(), currentTransform, node.GetNormals())
    <span class="highlight-keyword">ElseIf</span> node.DistributionOfNormals = DistributionOfNormals.OnePerFace <span class="highlight-keyword">Then</span>
        ExportMeshPoints(node.GetPoints(), currentTransform, node.GetNormal(<span class="highlight-number">0</span>))
    <span class="highlight-keyword">Else</span>
        <span class="highlight-comment">' DistributionOfNormals.OnEachFacet</span>
        <span class="highlight-comment">' In this case, there is normal vector associated with each facet</span>
        <span class="highlight-comment">' Depending on the export, our format either support this case,</span>
        <span class="highlight-comment">' of we would have to determine what normals to apply at each </span>
        <span class="highlight-comment">' point by a way of combining normal of the surrounding facets.</span>
        ExportMeshPoints(node.GetPoints(), currentTransform)
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

    <span class="highlight-comment">' B Process facets of the polymesh</span>

    <span class="highlight-keyword">If</span> node.DistributionOfNormals = DistributionOfNormals.OnEachFacet <span class="highlight-keyword">Then</span>
        ExportMeshFacets(node.GetFacets(), node.GetNormals())
    <span class="highlight-keyword">Else</span>
        ExportMeshFacets(node.GetFacets(), <span class="highlight-keyword">Nothing</span>)
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

    <span class="highlight-comment">' B) Process UV coordinates if available (and applicable)</span>

    <span class="highlight-keyword">If</span> node.NumberOfUVs &gt; <span class="highlight-number">0</span> <span class="highlight-keyword">Then</span>
        ExportMeshUVs(node.GetUVs())
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span>

<span class="highlight-keyword">Private</span> <span class="highlight-keyword">Sub</span> ExportMeshPoints(points <span class="highlight-keyword">As</span> IList(<span class="highlight-keyword">Of</span> XYZ), trf <span class="highlight-keyword">As</span> Transform, normals <span class="highlight-keyword">As</span> IList(<span class="highlight-keyword">Of</span> XYZ))
    <span class="highlight-comment">' process points with normals</span>
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span>

<span class="highlight-keyword">Private</span> <span class="highlight-keyword">Sub</span> ExportMeshPoints(points <span class="highlight-keyword">As</span> IList(<span class="highlight-keyword">Of</span> XYZ), trf <span class="highlight-keyword">As</span> Transform, normal <span class="highlight-keyword">As</span> XYZ)
    <span class="highlight-comment">' process points with only one normal vector (a planar face)</span>
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span>

<span class="highlight-keyword">Private</span> <span class="highlight-keyword">Sub</span> ExportMeshPoints(points <span class="highlight-keyword">As</span> IList(<span class="highlight-keyword">Of</span> XYZ), trf <span class="highlight-keyword">As</span> Transform)
    <span class="highlight-comment">' process points without normal (assuming normals are associated with facets instead)</span>
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span>

<span class="highlight-keyword">Private</span> <span class="highlight-keyword">Sub</span> ExportMeshFacets(facets <span class="highlight-keyword">As</span> IList(<span class="highlight-keyword">Of</span> PolymeshFacet), normals <span class="highlight-keyword">As</span> IList(<span class="highlight-keyword">Of</span> XYZ))
    <span class="highlight-comment">' process facets without normals  (assuming normals are associated with points instead)</span>
    <span class="highlight-keyword">If</span> normals <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
        <span class="highlight-comment">' process facets with normals</span>
    <span class="highlight-keyword">Else</span>
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span>

<span class="highlight-keyword">Private</span> <span class="highlight-keyword">Sub</span> ExportMeshUVs(UVs <span class="highlight-keyword">As</span> IList(<span class="highlight-keyword">Of</span> UV))
    <span class="highlight-comment">' process UVs</span>
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span></pre></div><div id="IDADC_code_Div3" class="codeSnippetContainerCode" style="display: none"><p>No code example is currently available or this language may not be supported.</p></div><div id="IDADC_code_Div4" class="codeSnippetContainerCode" style="display: none"><p>No code example is currently available or this language may not be supported.</p></div></div></div></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('seeAlso')" onkeypress="SectionExpandCollapse_CheckKey('seeAlso', event)" tabindex="0"><img id="seeAlsoToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />See Also</span></div><div id="seeAlsoSection" class="collapsibleSection"><h4>Reference</h4><div><a href="7d0dc6df-db0e-6a07-3b42-8dde1bedb3c1.htm">IExportContext Interface</a></div><div><a href="87546ba7-461b-c646-cbb1-2cb8f5bff8b2.htm">Autodesk.Revit.DB Namespace</a></div></div></div></div><div id="PageFooter" class="pageFooter"><div class="feedbackLink">Send comments on this topic to
        <a id="HT_MailLink" href="mailto:revitapifeedback%40autodesk.com?Subject=Revit%202025%20API">Autodesk</a></div>
        <script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Your feedback is used to improve the documentation and the product. Your e-mail address will not be used for any other purpose and is disposed of after the issue you report is resolved. While working to resolve the issue that you report, you may be contacted via e-mail to get further details or clarification on the feedback you sent. After the issue you report has been addressed, you may receive an e-mail to let you know that your feedback has been addressed.");
        </script></div></body></html>