<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><meta name="Microsoft.Help.SelfBranded" content="true" /><meta name="Language" content="en-us" /><meta name="Microsoft.Help.Locale" content="en-us" /><meta name="Microsoft.Help.TopicLocale" content="en-us" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"></script><title>Major changes and renovations to the Revit API</title><meta name="Title" content="WhatsNew" /><meta name="Microsoft.Help.Id" content="1593f994-fb7b-4b7d-ae1d-1c0ba3337577" /><meta name="Microsoft.Help.ContentType" content="Concepts" /><meta name="Description" content="Revit and Autodesk add-ins use the CEFsharp library internally for several features. Some third-party add-ins do so as well. Occasionally, when different versions of the library are used, it leads to instability issues for Revit." /><link rel="stylesheet" type="text/css" href="../styles/branding-Help1.css" /></head><body onload="SetDefaultLanguage('cs');"><input type="hidden" id="userDataCache" class="userDataStyle" /><div id="PageHeader" class="pageHeader">Revit 2025 API</div><div class="pageBody"><div id="TopicContent" class="topicContent"><table class="titleTable"><tr><td class="titleColumn"><h1>Major changes and renovations to the Revit API</h1></td></tr></table><div class="collapsibleAreaRegion" id="S1"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDAAB')" onkeypress="SectionExpandCollapse_CheckKey('IDAAB', event)" tabindex="0"><img id="IDAABToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />API changes</span></div><div id="IDAABSection" class="collapsibleSection"><strong><u>CefSharp upgrade</u></strong><p>Revit and Autodesk add-ins use the CEFsharp library internally for several features. Some third-party add-ins do so as well.  Occasionally, when different versions of the library are used, it leads to instability issues for Revit. In order to avoid version conflicts, we are clarifying what CEFsharp version is being used, and loading it prior to all add-in initializations. </p><ul><li>In this version, Revit uses CEFsharp version  <span class="literal"> v119.4.30 </span></li></ul><br /><br /><strong><u>Revit now on .NET 8</u></strong><p>The Revit API for Revit 2025 is built on .NET 8.  This upgrade keeps Revit up-to-date with the latest .NET features, performance improvements, and security fixes. </p><p>Addins for Revit 2025 will need to be rebuilt on .NET 8.</p><br /><br /><strong><u>Add-ins and macro changes</u></strong><br /><br /><span class="code"><em>MacroManager API</em></span><p>Updated Revit macro tool with modernized UI and code editor that also supports modern .NET API. Following methods were changed. </p><table><tr><th><p><strong>Deprecated member(s)</strong></p></th><th><p><strong>Replacement members(s)</strong></p></th></tr><tr><td><p>MacroManager.AddModule(ModuleSettings moduleSettings)</p></td><td><p>MacroManager.AddModule(ModuleSettings moduleSettings, IModuleMaker* maker)</p></td></tr><tr><td><p>UIMacroManager.AddModule(ModuleSettings moduleSettings, MacroEnvironment environment)</p></td><td><p>UIMacroManager.AddModule(ModuleSettings moduleSettings, MacroEnvironment environment, IModuleMaker* maker)</p></td></tr></table><br /><p>The following properties were deprecated:</p><ul><li>ModuleSettings.Description</li><li>MacroModule.MacroLevel</li><li>MacroModule.Description</li><li>Macro.Description</li><li>MacroManage.MacroLevel</li></ul><br /><p>The following methods were deprecated:</p><ul><li>MacroModule.AddMacro()</li><li>MacroModule.RemoveMacro()</li><li>
              MacroManager.GetDocumentMacroSecurityOptions()
            </li><li>
              MacroManager.SetDocumentMacroSecurityOptions()
            </li><li>
              MacroManager.GetMacroManager()
            </li><li>
              MacroManager.IsDocLvlMacro()
            </li><li>
              UIMacroManager.EditModule()
            </li><li>
              UIMacroManager.EditMacro()
            </li><li>
              UIMacroManager.StepInto()
            </li><li>
              UIMacroManager.GetMacroManager()
            </li><li>
              UIMacroManager.GetUIDocumentMacroSecurityOptions()
            </li><li>
              UIMacroManager.SetUIDocumentMacroSecurityOptions()
            </li></ul><br /><p>The following enums were deprecated:</p><ul><li>Deprecated values of enum Autodesk.Revit.DB.Macro.MacroLanguageType, only C# is supported.<ul><li>MacroLanguageType.VBNet</li><li>MacroLanguageType.Python</li></ul></li><li>Autodesk.Revit.DB.Macros.MacroLevel</li><li>Autodesk.Revit.DB.Macros.DocumentMacroOptions</li><li>UIDocumentMacroOptions</li></ul><br /><br /><strong><u>Array API changes</u></strong><p>The valid arrays size differs in project and family documents. The replacement method takes the document as an argument so we get an accurate answer. </p><table><tr><th><p><strong>Deprecated member(s)</strong></p></th><th><p><strong>Replacement members(s)</strong></p></th></tr><tr><td><p>LinearArray.IsValidArraySize()</p></td><td><p>LinearArray.IsValidNumberOfMembers()</p></td></tr><tr><td><p>RadialArray.IsValidArraySize()</p></td><td><p>RadialArray.IsValidNumberOfMembers()</p></td></tr></table><br /><br /><strong><u>BRepBuilder API changes</u></strong><p>BRepBuilder now accepts HermiteSurface as a permitted support surface type for faces.</p><p>Changed behavior:</p><ul><li>BRepBuilder.IsPermittedSurfaceType() will now return true for HermiteSurface.</li><li>BRepBuilderSurfaceGeometry.Create() can now accept a HermiteSurface and use it to create the corresponding BRepBuilderSurfaceGeometry.</li></ul><br /><br /><strong><u>Dimension API changes</u></strong><p>After the introduction of LinearDimension class, when filtering for Dimensions, linear dimensions will return as type LinearDimension (child class) instead of Dimension (parent class).</p><p>Methods affected:</p><ul><li>typeof(), etc. : If using typeof() or .getType().Equals(), to check if a LinearDimension is Dimension, it will not work due to the nature of the derived classes.</li></ul><br /><br /><strong><u>Extensible Storage(Schema) API changes</u></strong><p>Fixed two API(s) for the Extensible Storage feature:</p><table><tr><th><p><strong>Fixed member(s)</strong></p></th><th><p><strong>Note(s)</strong></p></th></tr><tr><td>Document.EraseSchemaAndAllEntities()</td><td>Fixed the API to ensure it removes entities from all parts of a Revit model.</td></tr><tr><td>ExtensibleStorageFilter()</td><td>Fixed the API to ensure it filters all elements associated with extensible storage data based on specific Schema IDs.</td></tr></table><br /><br /><strong><u>Electrical API changes</u></strong><br /><br /><span class="code"><em>Distribution system</em></span><p>The following properties were modified to support high-leg delta and single-phase distribution system.</p><table><tr><th><p><strong>Deprecated member(s)</strong></p></th><th><p><strong>Replacement members(s)</strong></p></th><th><p><strong>Note(s)</strong></p></th></tr><tr><td><p>AnalyticalPowerSourceData.Voltage</p></td><td><p>AnalyticalPowerSourceData.AssignedVoltage</p></td><td><p /></td></tr><tr><td><p>AnalyticalDistributionNodePropertyData.NumberOfPhases</p></td><td><p>AnalyticalDistributionNodePropertyData.AssignedPhasesNumber</p></td><td><p>For analytical power source, bus, transformer, transfer switch, the number of electrical phases is read only in Revit 2025 and assigned through the distribution system. For analytical equipment load, we suggest you use the AnalyticalEquipmentLoadData.PhasesNumber property.</p></td></tr><tr><td><p>AnalyticalBusData.Voltage</p></td><td><p>AnalyticalBusData.AssignedVoltage</p></td><td><p /></td></tr><tr><td><p>AnalyticalTransferSwitchData.Voltage</p></td><td><p>AnalyticalTransferSwitchData.AssignedVoltage</p></td><td><p /></td></tr></table><br /><span class="code"><em>Parameter Naming</em></span><p>Improved naming for the following electrical parameters to remove ambiguity, improve accuracy, and better adhere with industry terminology. </p><table><tr><th><p><strong>Parameter/String Attribute</strong></p></th><th><p><strong>Text(before)</strong></p></th><th><p><strong>Text(after)</strong></p></th></tr><tr><td><p>RBS_ELEC_PANEL_TOTALESTLOAD_PARAM</p></td><td><p>Total Estimated Demand</p></td><td><p>Total Demand Apparent Power</p></td></tr><tr><td><p>RBS_ELEC_PANEL_TOTALLOAD_PARAM</p></td><td><p>Total Connected</p></td><td><p>Total Connected Apparent Power</p></td></tr><tr><td><p>RBS_ELEC_APPARENT_LOAD_PHASEA</p></td><td><p>Apparent Load Phase A</p></td><td><p>Apparent Power Phase A</p></td></tr><tr><td><p>RBS_ELEC_APPARENT_LOAD_PHASEB</p></td><td><p>Apparent Load Phase B</p></td><td><p>Apparent Power Phase B</p></td></tr><tr><td><p>RBS_ELEC_APPARENT_LOAD_PHASEC</p></td><td><p>Apparent Load Phase C</p></td><td><p>Apparent Power Phase C</p></td></tr><tr><td><p>RBS_ELEC_DEMAND_LOAD_PHASEA</p></td><td><p>Demand Load Phase A</p></td><td><p>Demand Apparent Power Phase A</p></td></tr><tr><td><p>RBS_ELEC_DEMAND_LOAD_PHASEB</p></td><td><p>Demand Load Phase B</p></td><td><p>Demand Apparent Power Phase B</p></td></tr><tr><td><p>RBS_ELEC_DEMAND_LOAD_PHASEC</p></td><td><p>Demand Load Phase C</p></td><td><p>Demand Apparent Power Phase C</p></td></tr><tr><td><p>RBS_ELEC_APPARENT_LOAD</p></td><td><p>Apparent Load</p></td><td><p>Apparent Power</p></td></tr><tr><td><p>RBS_ELEC_APPARENT_LOAD_PHASE1</p></td><td><p>Apparent Load Phase 1</p></td><td><p>Apparent Power Phase 1</p></td></tr><tr><td><p>RBS_ELEC_APPARENT_LOAD_PHASE2</p></td><td><p>Apparent Load Phase 2</p></td><td><p>Apparent Power Phase 2</p></td></tr><tr><td><p>RBS_ELEC_APPARENT_LOAD_PHASE3</p></td><td><p>Apparent Load Phase 3</p></td><td><p>Apparent Power Phase 3</p></td></tr><tr><td><p>RBS_ELEC_TRUE_LOAD</p></td><td><p>True Load</p></td><td><p>True Power</p></td></tr><tr><td><p>RBS_ELEC_TRUE_LOAD_PHASE1</p></td><td><p>True Load Phase 1</p></td><td><p>True Power Phase 1</p></td></tr><tr><td><p>RBS_ELEC_TRUE_LOAD_PHASE2</p></td><td><p>True Load Phase 2</p></td><td><p>True Power Phase 2</p></td></tr><tr><td><p>RBS_ELEC_TRUE_LOAD_PHASE3</p></td><td><p>True Load Phase 3</p></td><td><p>True Power Phase 3</p></td></tr><tr><td><p>RBS_ELEC_TRUE_LOAD_PHASEA</p></td><td><p>True Load Phase A</p></td><td><p>True Power Phase A</p></td></tr><tr><td><p>RBS_ELEC_TRUE_LOAD_PHASEB</p></td><td><p>True Load Phase B</p></td><td><p>True Power Phase B</p></td></tr><tr><td><p>RBS_ELEC_TRUE_LOAD_PHASEC</p></td><td><p>True Load Phase C</p></td><td><p>True Power Phase C</p></td></tr><tr><td><p>RBS_ELEC_DEMANDFACTOR_DEMANDLOAD_PARAM</p></td><td><p>Estimated Demand Load</p></td><td><p>Demand Apparent Power</p></td></tr><tr><td><p>RBS_ELEC_DEMANDFACTOR_LOAD_PARAM</p></td><td><p>Connected Load</p></td><td><p>Connected Apparent Power</p></td></tr><tr><td><p>RBS_ELEC_PANEL_BRANCH_CIRCUIT_APPARENT_LOAD_PHASEA</p></td><td><p>Branch Circuit Apparent Load Phase A</p></td><td><p>Branch Circuit Apparent Power Phase A</p></td></tr><tr><td><p>RBS_ELEC_PANEL_BRANCH_CIRCUIT_APPARENT_LOAD_PHASEB</p></td><td><p>Branch Circuit Apparent Load Phase B</p></td><td><p>Branch Circuit Apparent Power Phase B</p></td></tr><tr><td><p>RBS_ELEC_PANEL_BRANCH_CIRCUIT_APPARENT_LOAD_PHASEC</p></td><td><p>Branch Circuit Apparent Load Phase C</p></td><td><p>Branch Circuit Apparent Power Phase C</p></td></tr><tr><td><p>RBS_ELEC_PANEL_FEED_THRU_LUGS_APPARENT_LOAD_PHASEA</p></td><td><p>Feed Through Lugs Apparent Load Phase A</p></td><td><p>Feed Through Lugs Apparent Power Phase A</p></td></tr><tr><td><p>RBS_ELEC_PANEL_FEED_THRU_LUGS_APPARENT_LOAD_PHASEB</p></td><td><p>Feed Through Lugs Apparent Load Phase B</p></td><td><p>Feed Through Lugs Apparent Power Phase B</p></td></tr><tr><td><p>RBS_ELEC_PANEL_FEED_THRU_LUGS_APPARENT_LOAD_PHASEC</p></td><td><p>Feed Through Lugs Apparent Load Phase C</p></td><td><p>Feed Through Lugs Apparent Power Phase C</p></td></tr><tr><td><p>RBS_ELEC_PANEL_TOTALESTLOAD_OTHER_PARAM</p></td><td><p>Other Total Estimated Demand</p></td><td><p>Other Total Demand Apparent Power</p></td></tr><tr><td><p>RBS_ELEC_LOADSUMMARY_CONNECTED_LOAD_PARAM</p></td><td><p>Connected Load (VA)</p></td><td><p>Connected Apparent Power</p></td></tr><tr><td><p>RBS_ELEC_LOADSUMMARY_DEMAND_LOAD_PARAM</p></td><td><p>Estimated Demand (VA)</p></td><td><p>Demand Apparent Power</p></td></tr><tr><td><p>RBS_ELEC_PANEL_TOTALESTLOAD_POWER_PARAM</p></td><td><p>Power Total Estimated Demand</p></td><td><p>Power Total Demand Apparent Power</p></td></tr><tr><td><p>RBS_ELEC_PANEL_TOTALESTLOAD_LIGHT_PARAM</p></td><td><p>Lighting Total Estimated Demand</p></td><td><p>Lighting Total Demand Apparent Power</p></td></tr><tr><td><p>RBS_ELEC_PANEL_TOTALESTLOAD_HVAC_PARAM</p></td><td><p>HVAC Total Estimated Demand</p></td><td><p>HVAC Total Demand Apparent Power</p></td></tr><tr><td><p>RBS_ELEC_PANEL_TOTALLOAD_HVAC_PARAM</p></td><td><p>HVAC Total Connected</p></td><td><p>HVAC Total Connected Apparent Power</p></td></tr><tr><td><p>RBS_ELEC_PANEL_TOTALLOAD_LIGHT_PARAM</p></td><td><p>Lighting Total Connected</p></td><td><p>Lighting Total Connected Apparent Power</p></td></tr><tr><td><p>RBS_ELEC_PANEL_TOTALLOAD_POWER_PARAM</p></td><td><p>Power Total Connected</p></td><td><p>Power Total Connected Apparent Power</p></td></tr><tr><td><p>RBS_ELEC_PANEL_TOTALLOAD_OTHER_PARAM</p></td><td><p>Other Total Connected</p></td><td><p>Other Total Connected Apparent Power</p></td></tr></table><br /><br /><strong><u>Link Visibility/Graphic Override API changes</u></strong><p>The following methods were modified to support custom settings type.</p><ul><li>Revit.DB.RevitLinkGraphicsSettings.LinkVisibilityType</li><li>Revit.DB.View.SetLinkOverrides(ElementId, RevitLinkGraphicsSettings) - Supports RevitLinkGraphicsSettings of Custom type.</li><li>Revit.DB.View.GetLinkOverrides(ElementId) - Removed two validators:
				<ul><li>AreGraphicsOverridesAllowed() </li><li>IsLinkOverridesSupported() </li></ul></li></ul><br /><br /><strong><u>MEP changes</u></strong><br /><br /><span class="code"><em>Duct Settings</em></span><p>Two new properties DuctSettings.AirDynamicViscosity and DuctPressureDropData.DynamicViscosity were added to clarify the value used in the duct pressure loss calculation. They replaced the deprecated properties that were kinematic viscosity.</p><table><tr><th><p><strong>Deprecated member(s)</strong></p></th><th><p><strong>Replacement members(s)</strong></p></th></tr><tr><td><p>RbsDuctSettingsElem.AirViscosity</p></td><td><p>DuctSettings.AirDynamicViscosity</p></td></tr><tr><td><p>DuctPressureDropData.Viscosity</p></td><td><p>DuctPressureDropData.DynamicViscosity</p></td></tr><tr><td><p>DuctFittingAndAccessoryData.AirViscosity</p></td><td><p>DuctSettings.AirDynamicViscosity</p></td></tr></table><br /><br /><strong><u>Reinforcement API changes</u></strong><br /><br /><span class="code"><em>Rebar</em></span><br /><table><tr><th><p><strong>Deprecated member(s)</strong></p></th><th><p><strong>Replacement members(s)</strong></p></th><th><p><strong>Note(s)</strong></p></th></tr><tr><td><p>RebarConstraintsManager.SetPreferredConstraintForHandle(RebarConstrainedHandle handle, RebarConstraint constraint)</p></td><td><p>RebarConstraintsManager.SetPreferredConstraint(RebarConstraint constraint)</p></td><td><p>Use the new replacement method to set RebarConstraint as preferred constraint target that avoids issues where one could apply the RebarConstraint bounded to handle 'A'  to another handle 'B'.</p></td></tr><tr><td><p>RebarConstraintsManager.GetConstraintCandidatesForHandle(RebarConstrainedHandle handle)</p></td><td><ul><li>RebarConstraintsManager.GetConstraintCandidatesForHandle(Structure.RebarConstrainedHandle, ElementId)</li></ul><ul><li>RebarConstraintsManager.GetConstraintCandidatesForHandle(Structure.RebarConstrainedHandle, Reference)</li></ul></td><td><ul><li>For getting the direct neighbors of a rebar host users may use: Structure.RebarHostData.GetRebarHostDirectNeighbors(Element hostElement).</li><li>For getting all the rebars in a host users may use: Structure.RebarHostData.GetRebarsInHost().</li></ul></td></tr><tr><td><p>Rebar.DistributionType</p><p>The enum having values:</p><ul><li>Uniform 0 - Represents uniform distribution.</li><li>VaryingLength 1 - Represents varying length distribution.</li></ul></td><td>RebarShapeDrivenAccessor.UseRebarConstraintsToProduceVaryingBars </td><td><p /></td></tr></table><br /><span class="code"><em>Slab API changes</em></span><p>The following methods were added for adding split line on SlabShapeEditor.</p><table><tr><th><p><strong>Deprecated member(s)</strong></p></th><th><p><strong>Replacement members(s)</strong></p></th></tr><tr><td><p>SlabShapeEditor.DrawPoint</p></td><td><p>SlabShapeEditor.AddPoint(XYZ point)</p></td></tr><tr><td><p>SlabShapeEditor.DrawSplitline</p></td><td><p>SlabShapeEditor.AddSplitLine(SlabShapeVertex startVertex, SlabShapeVertex endVertex)</p></td></tr></table><br /><br /><strong><u>Structure API changes</u></strong><br /><br /><span class="code"><em>Bending details in view</em></span><p>The following parameters were renamed without any changes to their functionality.</p><table><tr><th><p><strong>Deprecated member(s)</strong></p></th><th><p><strong>Replacement members(s)</strong></p></th></tr><tr><td><p>BENDING_DETAIL_SEGMENET_REPESENTATION</p></td><td><p>BENDING_DETAIL_SEGMENT_REPRESENTATION</p></td></tr><tr><td><p>BENDING_DETAIL_REPESENTATION_FOR_3D_BARS</p></td><td><p>BENDING_DETAIL_REPRESENTATION_FOR_3D_BARS</p></td></tr></table><br /><span class="code"><em>Analytical Surface</em></span><p>The following new method was added that allows users to verify if contour is valid for this Analytical Surface.</p><table><tr><th><p><strong>Deprecated member(s)</strong></p></th><th><p><strong>Replacement members(s)</strong></p></th></tr><tr><td><p>nalyticalSurfaceBase.isCurveLoopValid()</p></td><td><p>AnalyticalSurfaceBase.IsOuterContourValid()</p></td></tr></table><br /><br /><strong><u>Task Dialog API changes</u></strong><p>Support added so that FooterText property can contain a hyperlink of the form "rvthelptopic:[topic]" to launch Revit's contextual for the topic specified. Previously, the only option was to specify "#" as the hyperlink and set the Dialog Id, making it difficult to share dialogs with same Id, but different context and associated Help.</p><br /><br /><strong><u>Toposolid API changes</u></strong><p>The following parameters were renamed without any changes to their functionality.</p><table><tr><th><p><strong>Deprecated member(s)</strong></p></th><th><p><strong>Replacement members(s)</strong></p></th></tr><tr><td><p>SSE_POINT_ElEVATION_BASE_TYPE</p></td><td><p>SSE_POINT_ELEVATION_BASE_TYPE</p></td></tr><tr><td><p>SSE_POINT_ElEVATION</p></td><td><p>SSE_POINT_ELEVATION</p></td></tr><tr><td><p>TOPOSOLID_SUBDIVIDE_HEIGNT</p></td><td><p>TOPOSOLID_SUBDIVIDE_HEIGHT</p></td></tr></table></div><br /><br /><div class="collapsibleAreaRegion" id="S2"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDDAB')" onkeypress="SectionExpandCollapse_CheckKey('IDDAB', event)" tabindex="0"><img id="IDDABToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Obsolete API removal</span></div><div id="IDDABSection" class="collapsibleSection"><p>The following API members and classes which had previously been marked Deprecated have been removed in this release. Consult the API documentation from prior releases for information on the replacements to use:</p><strong>Classes</strong><ul><li>DocumentEntryPoint</li></ul><strong>Properties</strong><ul><li>ViewSchedule.ImageRowHeight</li><li>UIThemeManager.DefaultTheme</li></ul><strong>Methods</strong><ul><li>FamilyManager.AddParameter(ExternalDefinition, BuiltInParameterGroup, bool)</li><li>FamilyManager.AddParameter(string, BuiltInParameterGroup, Category, bool)</li><li>FamilyManager.ReplaceParameter(FamilyParameter, ExternalDefinition, BuiltInParameterGroup, bool)</li><li>FamilyManager.ReplaceParameter(FamilyParameter, string, BuiltInParameterGroup, bool)</li><li>FamilyManager.IsUserAssignableParameterGroup()</li><li>BindingMap.Insert()</li><li>BindingMap.ReInsert()</li><li>FilterNumericLess.Evaluate(int, int)</li><li>FilterNumericLessOrEqual.Evaluate(int, int)</li><li>FilterNumericGreater.Evaluate(int, int)</li><li>FilterNumericGreaterOrEqual.Evaluate(int, int)</li><li>FilterNumericEquals.Evaluate(int, int)</li><li>ParameterFilterRuleFactory.CreateEqualsRule(ElementId, AString, bool)</li><li>ParameterFilterRuleFactory.CreateNotEqualsRule(ElementId, AString, bool)</li><li>ParameterFilterRuleFactory.CreateGreaterRule(ElementId, AString, bool)</li><li>ParameterFilterRuleFactory.CreateGreaterOrEqualRule(ElementId, AString, bool)</li><li>ParameterFilterRuleFactory.CreateLessRule(ElementId, AString, bool)</li><li>ParameterFilterRuleFactory.CreateLessOrEqualRule(ElementId, AString, bool)</li><li>ParameterFilterRuleFactory.CreateContainsRule(ElementId, AString, bool)</li><li>ParameterFilterRuleFactory.CreateNotContainsRule(ElementId, AString, bool)</li><li>ParameterFilterRuleFactory.CreateBeginsWithRule(ElementId, AString, bool)</li><li>ParameterFilterRuleFactory.CreateNotBeginsWithRule(ElementId, AString, bool)</li><li>ParameterFilterRuleFactory.CreateEndsWithRule(ElementId, AString, bool)</li><li>ParameterFilterRuleFactory.CreateNotEndsWithRule(ElementId, AString, bool)</li></ul><strong>Enums</strong><ul><li>Autodesk.Revit.DB.Mechanical.OccupancyUnit - Removed enum value OccupancyUnit.UseDefaultValues</li><li>Autodesk.Revit.DB.BaseLoadOn - Removed enum value BaseLoadOn.kUseDefaultLoad</li></ul></div><br /><br /><div class="collapsibleAreaRegion" id="S3"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDGAB')" onkeypress="SectionExpandCollapse_CheckKey('IDGAB', event)" tabindex="0"><img id="IDGABToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />API additions</span></div><div id="IDGABSection" class="collapsibleSection"><strong><u>Add-ins and macros additions</u></strong><br /><br /><span class="code"><em>MacroManager API</em></span><p>The new property:</p><ul><li>MacroModule.ModuleFolder – Returns the folder of the module.</li></ul><p>The new interface:</p><ul><li>IModuleMaker</li></ul><p>allows users to create new module project by implementing this interface.</p><p>The new event:</p><ul><li>MacroUpdated</li></ul><p>is raised after the macro modules are updated.</p><br /><strong><u>Analysis API additions</u></strong><br /><br /><span class="code"><em>MEP Analytical networks</em></span><p>The new constructor allows users to traverse both sides of the specified analytical segment. In comparison, the existing constructor MEPNetworkIterator(Document, MEPAnalyticalNode, MEPAnalyticalSegment) only traverses one side of the analytical segment.</p><ul><li>Autodesk.Revit.DB.Analysis.MEPNetworkIterator(Document, MEPAnalyticalSegment)</li></ul><br /><span class="code"><em>MEP Duct/Pipe Pressure Loss calculation</em></span><p>Users now have access to Duct/Pipe pressure loss characteristic allowing them to correlate the element and understand the calculation logic.</p><p>The new classes:</p><ul><li>Autodesk.Revit.DB.Analysis.CriticalPathCollector - Provides the calculated flow and pressure drop values of the network critical path, so users can better select their equipment. </li><li>Autodesk.Revit.DB.Analysis.CriticalPathIterator - Allows users to traverse the analytical segments on the network critical path.</li></ul><br /><span class="code"><em>MEP Space Engineering Parameters</em></span><p>Users now have access to building operating day and year schedules allowing them to create and edit schedules that describe the usage of buildings (occupancy, power, lighting) for use in energy analysis.</p><p>The new classes:</p><ul><li>Autodesk.Revit.DB.Analysis.BuildingOperatingDaySchedule - An element that represents the 24 hour operating schedule.</li><li>Autodesk.Revit.DB.Analysis.BuildingOperatingYearSchedule - An element that represents the 365 day operating schedule.</li></ul><p>The new methods:</p><ul><li>BuildingOperatingDaySchedule.Create(Document, Name) - Allows creation of a new BuildingOperatingDaySchedule with that name and adds it to the document. It returns the newly created BuildingOperatingDaySchedule element, with all usages set to 0.</li><li>BuildingOperatingDaySchedule.GetValueForHour(Hour)</li><li>BuildingOperatingDaySchedule.SetValueForHour(Hour, Usage)</li><li>BuildingOperatingYearSchedule.Create(Document, DaySchedule, Name) - Allows creation of a new BuildingOperatingYearSchedule with that name and adds it to the document. It returns the newly created BuildingOperatingDaySchedule element, with all usages set to daySchedule.</li><li>BuildingOperatingDaySchedule.GetScheduleForDay(Day)</li><li>BuildingOperatingDaySchedule.SetValueForHour(Day, DaySchedule)</li></ul><p>The new properties:</p><ul><li>BuildingOperatingDaySchedule.ScheduleName</li><li>BuildingOperatingYearSchedule.ScheduleName</li></ul><br /><br /><strong><u>Annotations API additions</u></strong><p>Exposing the new class to fix different behavior of span direction symbol between UI and API.</p><p>The new class:</p><ul><li>Autodesk.Revit.DB.SpanDirectionSymbol</li></ul><p>represents an instance of a Span Direction Symbol in Autodesk Revit.</p><br /><br /><strong><u>Array API additions</u></strong><br /><br /><span class="code"><em>Linear Array</em></span><p>The new methods:</p><ul><li>LinearArray.GetMinimumSize() - Allows users to get the minimum size of a linear array based on if the document is a family document.</li><li>LinearArray.GetNumberOfMembersIncludingPlaceholders() - Allows users to get the number of members in a linear array, including placeholders that are still there in families with small array counts.</li><li>LinearArray.IsValidNumberOfMembers() - Indicates whether the input count is a valid size for an array based on the document.</li></ul><br /><br /><strong><u>MEP Fabrication API additions</u></strong><p>The new methods in the FabricationConfiguration class now provides support to check for bad connections between fabrication parts prior to reloading the configuration.</p><ul><li>CheckConnectionsForAllFabricationParts() - Allows users to check the connections for all fabrication parts in the current project. It will create reviewable warnings for all bad connections found.</li><li>ValidateConnectionsForAllFabricationParts() - Allows users to validate all fabrication part connections in the current project. Invalid connections found will be added to the connection validation information class. The validation checks for bad alignments or gaps, incompatible connection types, mismatches of size, mismatches of shapes.</li><li>PostReviewableWarningsForBadConnections() - Reviewable warnings are created for all entries contained in the connection validation information.</li><li>GetUpdatedStraightsFromValidateConnections() - Allows users to get the set of element identifiers of fabrication part straights that were previously updated. If no straights were updated, it will return an empty set of element identifiers.</li></ul><br /><br /><strong><u>DirectShape API additions</u></strong><p>The new method:</p><ul><li>DirectShapeType.SetShape(IList&lt;GeometryObject&gt;, DirectShapeTargetViewType) - Allows users to set a custom plan view representation of a DirectShapeType.</li></ul><br /><br /><strong><u>Dimension API additions</u></strong><p>Users can now create radial, linear and arc length dimensions via the API in a project document.</p><p>The new classes:</p><ul><li>RadialDimension</li><li>ArchLengthDimension</li><li>LinearDimension</li></ul><p>The new methods: </p><ul><li>RadialDimension.Create(Document, View, Reference, XYZ origin, bool isDiameterDimension)</li><li>ArcLengthDimension.Create(Document, View, Arc, Reference, Reference firstRef, Reference secondRef)</li><li>LinearDimension.Create(Document, View, Line, IList&lt;Reference&gt;)</li></ul><br /><strong><u>Electrical API additions</u></strong><p>Added functionality for high-leg delta and single-phase distribution system. User can now create and modify high-leg delta distribution system and single-phase load in electrical analytical distribution system, and get the per phase current on each node.</p><p>The new classes:</p><ul><li>Autodesk.Revit.DB.Electrical.ElectricalPerPhaseData - Represents per phase values including current and load.</li><li>Autodesk.Revit.DB.Electrical.AnalyticalPowerDistributableNodeData - Represents the data and parameters of a power distributable node.</li><li>Autodesk.Revit.DB.Electrical.AnalyticalTransformerData - Represents the data and parameters of analytical transformer node.</li></ul><p>The new properties:</p><ul><li>Electrical.DistributionSysType.HighLegPhase - Represents the high-leg phase in the 3 phase 4 wires delta distribution system.</li><li>AnalyticalPowerSourceData.ApparentPowerRating - Represents the apparent power rating value of the analytical power source.</li><li>AnalyticalDistributionNodePropertyData.ConnectedPhases - Represents the electrical connected phases of the electrical analytical node to its upstream node.</li><li>AnalyticalEquipmentLoadData.PhasesNumber - Represents the number of electrical phases of the analytical equipment load.</li><li>AnalyticalEquipmentLoadData.PowerFactorState - Represents the PowerFactorState type of the analytical equipment load.</li><li>AreaBasedLoadData.ConnectedPhases - Represents the electrical connected phases of the area based load to its upstream node.</li><li>AreaBasedLoadData.PhasesNumber - Allows users to set the number of electrical phases of the area based load.</li><li>AreaBasedLoadData.PowerFactorState - Represents the power factor state of the area based load.</li><li>AreaBasedLoadType.PowerFactorState - Represents the power factor state of the area based load type.</li></ul><p>The new enums:</p><ul><li>Autodesk.Revit.DB.Electrical.ElectricalPhaseLine - Defines the electrical phase.</li><li>Autodesk.Revit.DB.Electrical.ElectricalConnectedPhases - Defines the electrical connected phases of an electrical analytical node.</li></ul><br /><br /><strong><u>Energy Analysis API additions</u></strong><br /><span class="code"><em>gbXML export options</em></span><p>We now provide support for legacy export of gbXML based on a conceptual energy analytical model from a conceptual mass model from add-ins/add-ons.</p><p>The new methods:</p><ul><li>GetMassIds() - Allows users to get a list of masses to use as shading surfaces in the exported gbXML.</li><li>GetMassZoneIds() - Allows users to get a list of mass zones to analyze in the exported gbXML.</li></ul><p>The new constructor:</p><ul><li>GBXMLExportOptions(massZoneIds, massIds) - Allows users to construct a new instance of the options used to export a mass model to gbXML.</li></ul><p>The new property:</p><ul><li>IsConceptual - Indicates if the exported gbXML is based on a conceptual energy analytical model from a conceptual mass model.</li></ul><br /><br /><strong><u>IFC API additions</u></strong><br /><br /><span class="code"><em>IFC Hybrid Import</em></span><ul><li>IFCHybridImport.UpdateElements() - The new method allows users to update elements previously imported via a Hybrid IFC Link operation.</li><li>IFCHybridImport.GetIFCStepIdToElementIdMap() - The new method allows users to retrieve the association between the original IFC STEP identifiers and the created or updated Elements.</li></ul><br /><span class="code"><em>IFC Category Mapping</em></span><p>Added functionality that allows user to control the way how Revit categories are mapped to IFC Classes during IFC Export. User can now create, retrieve and modify IFC category mapping templates.</p><p>The new classes:</p><ul><li>Autodesk.Revit.DB.IFCCategoryTemplate - Represents an element that contains IFC category mapping template stored in a Revit document.</li><li>Autodesk.Revit.DB.ExportIFCCategoryKey - Represents a Revit category item stored in a template.</li><li>Autodesk.Revit.DB.ExportIFCCategoryInfo - Represents the mapped IFC information stored in the template.</li></ul><p>The new enums:</p><ul><li> CustomSubCategoryId - Represents pseudo sub-categories that can appear in a mapping template. It has the following values:<ul><li>None - Represents the default value for most Revit categories and subcategories.</li><li>InteriorWall - Represents the custom id for interior walls.</li><li>ExteriorWall - Represents the custom id for exterior walls.</li><li>FoundationWall - Represents the custom id for foundation walls.</li><li>RetainingWall - Represents the custom id for retaining walls.</li><li>Coreshaft - Represents the custom id for cores/shafts.</li><li>Soffit - Represents the custom id for soffits.</li></ul></li></ul><br /><br /><strong><u>Import Export API additions</u></strong><p>The new functionality provides support for importing, linking and exporting files of STEP format.</p><p>The new class:</p><ul><li>STEPImportOptions</li></ul><p>represents the options for STEP formats.</p><p>The new methods, uses the new class STEPImportOptions:</p><ul><li>Document.Import(String, STEPImportOptions, View) </li><li>Document.Link(String, STEPImportOptions, View)</li><li>Document.Export(String, String, STEPExportOptions)</li></ul><br /><br /><strong><u>PDF Export API additions</u></strong><br /><br /><p>Document export for PDF now allows using a separate Revit Worker to create the PDF in the background, leaving the main Revit process free for other work. FileExporting and FileExported events are triggered at the start and end of the export job respectively. There are new API calls for PDFExportOptions, FileExportedEventArgs, and FileExportingEventArgs. Third party Addins may interfere with the PDF generation using this feature if they change the appearance of Elements in a way that is not serialized.</p><p>The new method:</p><ul><li>PDFExportOptions.SetExportInBackground() - When set to true, Document.Export launches a new process to export the PDF that leaves Revit unblocked. Changes to the document made after the export has started are not accounted for in the PDF.</li></ul><p>The classes FileExportingEventArgs and FileExportedEventArgsBoth have a new member:</p><ul><li>BackgroundOperation - The value is true if a background process was requested for the background operation that raised the event.</li></ul><br /><br /><strong><u>Reinforcement API additions</u></strong><br /><br /><span class="code"><em>Rebar</em></span><p>Users now have the ability to create and modify rebar constraints to surfaces.</p><p>The new enum:</p><ul><li>RebarConstraintsStatus </li></ul><p>represents the status of the constraints.</p><p>The new value for RebarConstraintType enum: </p><ul><li>ToSurface </li></ul><p>represents handle is constrained to a surface.</p><p>The new methods: </p><ul><li>RebarConstraint.CreateConstraintToSurface() - Allows users to create a constraint of ToSurface type for a given RebarConstrainedHandle.</li><li>RebarConstraint.GetSurfaceForConstraintToSurface() - Allows users to retrieve the surface for a constraint of ToSurface type.</li><li>RebarConstraint.IsValidSurfaceToConstraintHandleTo() - Allows users to check if the surface can be used to create a constraint to it for a given RebarConstrainedhandle.</li><li>RebarConstraint.IsToSurface() - Returns true if the RebarConstraintType of the RebarConstraint is ToSurface, false otherwise.</li><li>RebarConstraint.GetRebarConstrainedHandle() - Allows users to get the RebarConstrainedHandle for which this constraint is.</li><li>RebarConstraint.FlipSideForClearBarSpacingZeroDistanceConstraint() - This method in RebarConstriant is applied for bar-on-bar constraint.  It flips the side on which a RebarConstrainedHandle constrained using clear bar distance with zero offset connects to another Rebar target handle.</li><li>RebarConstrainedHandle.IsEqual() - Returns true if the objects are equal, false otherwise.</li><li>RebarConstraintsManager.SetPreferredConstraintsToSurfaceForHandles() - For ShapeDriven rebar it will set a preferred 'ToSurface' RebarConstraint for each input handle. The surface that will be used by the constraint is the current surface that is used to compute the position of the handle. This function applies only for shape driven Rebar, and will throw exception for free form rebar.</li><li>RebarConstraintsManager.SetPreferredConstraint() - Allows users to set the RebarConstraint as preferred constraint for its RebarConstrainedHandle.</li><li>RebarConstraintsManager.GetAutomaticConstraintCandidatesForHandle() - For shape driven rebar returns all possible automatic RebarConstraints that could be used for a specified RebarConstrainedHandle. For free form rebar it returns an empty list.</li></ul><br /><span class="code"><em>Rebar splice type options and rules</em></span><p>Added functionality for splicing the rebar. Users can now splice a rebar, remove the splice (keeping the bars separated), unify into one bar, modify the data related to splice and modify the constraints of the spliced bars seeing as splice chain.</p><p>The new classes:</p><ul><li>Autodesk.Revit.DB.Structure.RebarSpliceTypeUtils - Utility class for dealing with rebar splice type operations.</li><li>Autodesk.Revit.DB.Structure.RebarSpliceOptions</li><li>Autodesk.Revit.DB.Structure.RebarSpliceGeometry - This class consists of a vector and a point which will be projected to the nearest rebar curve.</li><li>Autodesk.Revit.DB.Structure.RebarSpliceRules </li><li>Autodesk.Revit.DB.Structure.RebarSplice - A class that can used to access the data between two connected rebars.</li><li>Autodesk.Revit.DB.Structure.RebarSpliceByRulesResult</li><li>Autodesk.Revit.DB.Structure.RebarSpliceUtils </li></ul><p>The new methods:</p><ul><li>RebarBarType.GetLapLength()</li><li>RebarBarType.SetLapLength()</li><li>RebarBarType.GetAutoCalculatedLapLength()</li><li>RebarBarType.SetAutoCalculatedLapLength()</li><li>RebarBarType.GetStaggerLength)</li><li>RebarBarType.SetStaggerLength()</li><li>RebarBarType.GetAutoCalculatedStaggerLength()</li><li>RebarBarType.SetAutoCalculatedStaggerLength()</li><li>Rebar.GetRebarSplice() </li><li>Rebar.RemoveSplice()</li><li>Rebar.GetLapLength()</li><li>Rebar.GetSpliceStaggerLength()</li><li>RebarConstrainedHandle.GetHandleSurface()</li><li>RebarConstrainedHandle.Move()</li><li>RebarConstrainedHandle.CanSetBehavior()</li><li>RebarConstrainedHandle.GetPossibleHandleBehaviors()</li><li>RebarHostData.GetRebarHostDirectNeighbors() - Returns the first level of neighbors for the provided host that can host reinforcement, i.e. elements that are joined directly to the provided host element and not the neighbors of the joined elements.</li></ul><p>The new properties:</p><ul><li>RebarSpliceOptions.SpliceTypeId</li><li>RebarSpliceOptions.SplicePosition</li><li>Rebar.CanHaveVaryingLengthBars</li><li>Rebar.HasVariableLengthBars</li><li>RebarShapeDrivenAccessor.UseRebarConstraintsToProduceVaryingBars</li><li>RebarConstrainedHandle.HandleBehavior</li></ul><p>The new enums:</p><ul><li> RebarSplicePosition - Describes the position of the splice. It has the following values:<ul><li>End1 - Lap is towards the start of the splice chain.</li><li>Middle - Lap goes into both directions.</li><li>End2 - Lap is towards the end of the splice chain.</li></ul></li></ul><ul><li>RebarSpliceShiftOption - Describes the way bars are shifted in the splice relation. It has the following values:<ul><li>BarPlane - Represents the bar plane is shifted so that the spliced rebars are not clashing.</li><li>None - The bars are not shifted at all.</li></ul></li></ul><ul><li>RebarSpliceByRulesRunOutPosition - Describes the run-out position. It has the following values:<ul><li>Start - Represents the rest will remain at the start of the bar.</li><li>End - Represents the rest will remain at the end of the bar</li></ul></li></ul><ul><li>RebarSpliceError - Represents the states for splicing a Rebar. It has the following values:<ul><li>Success</li><li>Unknown - Represents there is an unexpected error.</li><li>InvalidRebar - Represents free form rebars or shape driven rebars that are multiplanar or having shape whose definition is RebarShapeDefinitionByArc or rebars part of a group that cannot be spliced.</li><li>InvalidLineOrLinePlaneNormal - Represents the line length is zero or the line direction is parallel with the line plane normal.</li><li>LineDoesNotIntersectRebarBoundingBox - Represents the line doesn't intersect the rebar bounding box.</li><li>SpliceGeometryOnHookOrFillet - Represents if the splice geometry is on a hook or a fillet, the rebar can't be spliced with it.</li><li>TooSmallSegments - Represents one of the resulting segments is too small to apply the lap.</li><li>SpliceGeometryDoesNotIntersectAllTheBarsInTheSet - Represents a plane obtained from splice geometry doesn't intersect all the bars in the set.</li><li>SpliceGeometryAlmostParallelToBarSegment - Represents the plane formed by splice geometry is almost parallel to bar segment plane.</li></ul></li></ul><ul><li>RebarSpliceByRulesError - Represents the states for splicing a Rebar by rules. It has the following values:<ul><li>Success</li><li>Unknown - Represents there is an unexpected error.</li><li>InvalidRebar - Represents free form rebars or shape driven rebars that are multiplanar or having shape whose definition is RebarShapeDefinitionByArc or rebars part of a group that cannot be spliced.</li><li>TooBigHook - Represents the hook lengths exceed the maximum length.</li><li>TooSmallRunOut - Represents the run-out is below minimum length, or the lap can't be applied to it.</li><li>MaximumLengthBiggerThanBarLength - Represents the maximum length exceeds the bar length.</li><li>TooBigArc - Represents the arc segment exceeds the maximum length.</li><li>CantSpliceAllTheBarsInSet - Represents  some bars in the varying set are not intersected by the resulting splice geometries.</li><li>LapLengthBiggerThanMaximumBarLength - Represents the lap length is greater than the maximum length.</li><li>InvalidCombinationOfMaximumMinimumBarLengthAndLapLength - Represents the combination of the maximum bar length, minimum bar length and lap length is invalid.</li></ul></li></ul><ul><li>RebarHandleBehavior - Represents different behaviors that can be applied to a RebarConstrainedHandle. It has the following values:<ul><li>Default - Represents the default behavior of a RebarConstrainedHandle. </li><li>SpliceMainEndOnEnd1Position</li><li>SpliceMainEndOnMiddlePosition - Represents the behavior can be set to a StartOfBar or EndOfBar RebarConstrainedHandle of a bar that is part of splice. On the connected bar there is a ToOtherRebar constraint whose target is the current rebar. The RebarConstrainedHandle's plane in the same position as the splice plane for Middle.</li><li>SpliceMainEndOnEnd2Position - Represents the behavior can be set to a StartOfBar or EndOfBar RebarConstrainedHandle of a bar that is part of splice. On the connected bar there is a ToOtherRebar constraint whose target is the current rebar. The RebarConstrainedHandle's plane in the same position as the splice plane for Middle</li><li>SpliceConnectedEndOnEnd1Position - Represents  the behavior can be set to a StartOfBar or EndOfBar RebarConstrainedHandle of a bar that is part of splice. On this RebarConstrainedHandle is a ToOtherRebar constraint whose target is the other bar involved in splice. The RebarConstrainedHandle's plane in the same position as the splice plane for End1.</li><li>SpliceConnectedEndOnMiddlePosition - Represents the behavior can be set to a StartOfBar or EndOfBar RebarConstrainedHandle of a bar that is part of splice. On this RebarConstrainedHandle is a ToOtherRebar constraint whose target is the other bar involved in splice. The RebarConstrainedHandle's plane in the same position as the splice plane for Middle</li><li>SpliceConnectedEndOnEnd2Position - Represents  the behavior can be set to a StartOfBar or EndOfBar RebarConstrainedHandle of a bar that is part of splice. On this RebarConstrainedHandle is a ToOtherRebar constraint whose target is the other bar involved in splice. RebarConstrainedHandle's plane in the same position as the splice plane for End2</li><li>SpliceRebarPlaneOnSpliceSetExtent - Represents the behavior can be set to a RebarPlane RebarConstrainedHandle of a bar that is part of splice</li><li>SpliceOutOfPlaneExtentOnSpliceSetExtent - Represents the behavior can be set to a OutOfPlaneExtent RebarConstrainedHandle of a bar that is part of splice.</li><li>SpliceEdge - Represents the behavior can be set to an edge segment that is connected to the other rebar of splice.</li></ul></li></ul><br /><br /><strong><u>Selection API additions</u></strong><br /><br /><span class="code"><em>UI Application</em></span><p>The new enum:</p><ul><li>ThemeType - Represents the application frame theme type. It has the following values:<ul><li>CanvasTheme - Indicates that the ThemeChanged event is triggered by canvas theme change.</li><li>UITheme - Indicates that the ThemeChanged event is triggered by the global UI theme change.</li></ul></li></ul><p>The new read-only property for ThemeChangedEventArgs:</p><ul><li>ThemeChangedType - Returns ThemeType enum that<strong> </strong>indicates the kind of change triggered the current event.</li></ul><br /><br /><strong><u>Sketched Element API additions</u></strong><br /><br /><span class="code"><em>Wall APIs</em></span><p>The new methods now allow users to selectively enable or disable end wrapping for a specific wall end when the wall's end wrap is activated in the Wall Type dialog.</p><ul><li>Revit.DB.Wall.GetWrappingLocationAsReferences(int locationIndex) - Allows users to get an array of references to faces at the location.</li><li>Revit.DB.Wall.GetWrappingLocationAsCurveParameter(int locationIndex) - Allows users to get the non-normalized (actual) curve parameter of the location.</li><li>Revit.DB.Wall.GetValidWrappingLocationIndices()</li><li>Revit.DB.Wall.AllowWrappingAtLocation(int locationIndex) </li><li>Revit.DB.Wall.DisallowWrappingAtLocation(int locationIndex)</li><li>Revit.DB.Wall.IsWrappingAtLocationAllowed(int locationIndex)</li></ul><br /><br /><strong><u>Structure API additions</u></strong><br /><br /><span class="code"><em>Analytical Elements</em></span><p>The new methods:</p><ul><li>AnalyticalElement.IsValidTransform() - Allows users to check whether the value set for Local Coordinate System is valid for an Analytical Element.</li><li>AnalyticalElement.SetTransform() - Allows users to set the transform of Analytical Element Local Coordinate System.</li></ul><br /><span class="code"><em>Analytical Surface</em></span><p>The new method:</p><ul><li>AnalyticalSurfaceBase.IsOuterContourValid() - Allows users to verify if contour is valid for this Analytical Surface.</li></ul><br /><span class="code"><em>Bending Details on Drawings</em></span><p>Added new functionality for enhancing bending details. These include the ability to create and customize the size of schematic bending detail boxes, set specific tag types for bending details, adjust the position and rotation of tags relative to the bending detail, customize the tag alignment option, and add multiple hosts for the schematic bending detail. This update offers greater flexibility and precision in the representation and annotation of bending details in Revit models.</p><p>The new methods:</p><ul><li>RebarBendingDetail.AddHosts()</li><li>RebarBendingDetail.GetHosts()</li><li>RebarBendingDetail.RemoveHosts()</li><li>RebarBendingDetail.SetTagRelativePosition()</li><li>RebarBendingDetail.SetTagRelativeRotation()</li><li>RebarBendingDetail.GetTagRelativePosition()</li><li>RebarBendingDetail.GetTagRelativeRotation()</li><li>RebarBendingDetail.IsSchematicBendingDetail()</li><li>RebarBendingDetail.IsRealisticBendingDetail()</li><li>RebarBendingDetail.ResetTagRelativePosition()</li><li>RebarBendingDetail.ResetAnnotationPositions()</li></ul><p>The new properties:</p><ul><li>RebarBendingDetailType.SchematicHeight - Represents  the height of the box where the schematic Bending Detail will be represented. </li><li>RebarBendingDetailType.SchematicWidth - Represents the width of the box where the schematic Bending Detail will be represented.</li><li>RebarBendingDetailType.TagTypeId - Represents the Id of the tag type which is used in the Bending Detail representation.</li><li>RebarBendingDetailType.DisplayMode - Represents the display mode for the bending detail.</li></ul><p>The new enum:</p><ul><li>Autodesk.Revit.DB.Structure.BendingDetailDisplayMode </li></ul><p>represents the mode in which the Bending Detail will be represented.</p><br /><span class="code"><em>Radial Array</em></span><p>The new methods:</p><ul><li>RadialArray.GetMinimumSize() - Allows users to get the minimum size of a radial array based on if the document is a family document.</li><li>RadialArray.GetNumberOfMembersIncludingPlaceholders() - Allows users to get the number of members in a radial array, including placeholders that are still there in families with small array counts.</li><li>RadialArray.IsValidNumberOfMembers() - Indicates whether the input count is a valid size for an array based on the document.</li></ul><br /><br /><strong><u>Tag/Keynotes API additions</u></strong><p>We now provide functionality to align multiple text, tags and keynotes with new contextual alignment tools in the ribbon.</p><p>The new class:</p><ul><li>Autodesk.Revit.DB.AnnotationMultipleAlignmentUtils</li></ul><p>allows users to align annotation elements to one another. Currently supports TextNotes, Tags and Keynotes.</p><p>The new methods:</p><ul><li>AnnotationMultipleAlignmentUtils.ElementSupportsMultiAlign() - allows users to check whether the element type can be aligned using the multiple allignment commands.</li><li>AnnotationMultipleAlignmentUtils.GetAnnotationOutlineWithoutLeaders() - allows users to get the four corners of the annotations bounding box, not including leaders. Outline calculations include leader/border offsets wherever applicable. (Eg. in the case of TextNotes).</li><li>AnnotationMultipleAlignmentUtils.MoveWithAnchoredLeaders() - allows users to move the given element to the position specified by the input moveVec, while keeping the leader end points anchored.</li></ul><br /><br /><strong><u>Toposolid API additions</u></strong><p>Added functionality for Toposolid smooth shading.</p><p>The new methods:</p><ul><li>Toposolid.ExcavateBy() - Allows users to excavate toposolid by a given element.</li><li>Toposolid.RemoveExcavationBy() - Allows users to remove the excavation between the given element and the toposolid.</li><li>Toposolid.CanBeExcavatedBy() - Allows users to check if the given element can be used to excavate the toposolid.</li><li>Toposolid.SetSmoothedSurface() - Allows users to set the smoothed surface setting of toposolid category in the given document.</li><li>Toposolid.IsSmoothedSurfaceEnabled() - Allows users to check if smoothed surface setting of toposolid category is enabled in the given document.</li><li>Toposolid.GetIntersectingElementData()</li><li>ToposolidType.SetContourSetting() - Allows users to set the contour setting for the current toposolid type by copying from an existing contour setting object.</li><li>ContourSetting.IsItemEnabled()</li><li>ContourSettingItem.GetContourSettingItemType()</li><li>FaceToposolid.Create()</li><li>FaceToposolid.UpdateToFace() - Allows users to reset the face toposolid to its defining face.</li><li>FaceToposolid.GetReferencedFaces()</li><li>FaceToposolid.SetReferencedFaces()</li></ul><p>The new classes:</p><ul><li>Autodesk.Revit.DB.IntersectingElementData - Stores information of an element that intersects with another element. </li><li>Autodesk.Revit.DB.FaceToposolid - represents a face-based Toposolid within the Autodesk Revit project.</li></ul><p>The new enum:</p><ul><li>Autodesk.Revit.DB.IntersectionType - It has the following values.<ul><li>Cut </li><li>Excavate</li></ul></li><li>Autodesk.Revit.DB.ContourSettingItemType - Represents the type of contour setting item. It has the following values:<ul><li>Single </li><li>UnboudedRange</li><li>BoundedRange. </li></ul></li></ul><p>The new properties:</p><ul><li>IntersectingElementData.IntersectionType</li><li>IntersectingElementData.IntersectingElementId</li><li>IntersectingElementData.IntersectedElementId</li><li>IntersectingElementData.IntersectionVolume</li></ul><br /><br /><strong><u>UI API additions</u></strong><br /><span class="code"><em>Context Menu</em></span><p>We now provide functionality to create context menu from an add-in.</p><p>The new Interface:</p><ul><li>Revit.UI.IContextMenuCreator - The interface users need to implement to build context menu.</li></ul><p>The new Constructor:</p><ul><li>Revit.UI.ContextMenu() - Allows users to create a new instance of Context Menu.</li><li>Revit.UI.CommandMenuItem(name , className, assemblyName ) - Allows users to create a new instance of command menu item with name, external command class name and external application assembly name.</li><li>Revit.UI.SubMenuItem(name , ContextMenu) - Allows users to create a new instance of flyout menu with name and sub menu instance.</li><li>Revit.UI.Separator() - Allows users to create a new instance of separator menu item.</li></ul><p>The new methods:</p><ul><li>ContextMenu.AddItem() - Allows users to add a specific type of MenuItem object to context menu.</li><li>CommandMenuItem.SetAvailabilityClassName() - Allows users to set availabilityClassName of CommandMenuItem.</li><li>CommandMenuItem.SetToolTip() - Allows users to set tooltip of CommandMenuItem.</li><li>IContextMenuCreator.BuildContextMenu() - Allows users to add menu items to the passed in ContextMenu object.</li><li>UIControlledApplication.RegisterContextMenu() - Allow user to add new context menu creators with application name.</li></ul><br /><br /><strong><u>View API additions</u></strong><br /><br /><span class="code"><em>SheetCollection</em></span><p>The new class:</p><ul><li>Autodesk.Revit.DB.SheetCollection - Represents a sheet collection in Autodesk Revit.</li></ul><p>The new methods:</p><ul><li>Autodesk.Revit.DB.SheetCollection.Create(document, name) - Allows users to create a new instance of sheet collection with a specified name and adds it to the document. It returns the newly created sheet collection element.</li><li>Autodesk.Revit.DB.SheetCollection.Create(document) - Allows users to create a new instance of sheet collection with an auto-generated name and adds it to the document. It returns the newly created sheet collection element.</li></ul><p>The new property:</p><ul><li>Autodesk.Revit.DB.ViewSheet.SheetCollectionId - Represents the Id of the sheet collection this sheet is associated with.</li></ul><br /><br /><strong><u>Link Visibility/Graphic Override API additions</u></strong><p>The new functionality allows Revit Link Visibility/Graphic Overrides, for the 'Custom' option.</p><p>The new methods in class Autodesk.Revit.DB.RevitLinkGraphicsSettings:</p><ul><li>RevitLinkGraphicsSettings.IsViewRangeSupported(View) – Allows users to check if the input view supports view range settings for RevitLinkGraphicsSettings graphic overrides.</li><li>RevitLinkGraphicsSettings.GetPhaseId()</li><li>RevitLinkGraphicsSettings.GetPhaseType()</li><li>RevitLinkGraphicsSettings.SetPhase(LinkVisibility, ElementId) – Allows users to configure phase and phase type of RevitLinkGraphicsSettings. Accepts LinkVisibility and ElementId of the phase from the linked document or ElementId.InvalidElementId.</li><li>RevitLinkGraphicsSettings.GetPhaseFilterId()</li><li>RevitLinkGraphicsSettings.GetPhaseFilterType()</li><li>RevitLinkGraphicsSettings.SetPhaseFilter(LinkVisibility, ElementId) – Allows users to configure phase filter and phase filter type of RevitLinkGraphicsSettings. Accepts LinkVisibility and ElementId of the phase filter from the linked document or ElementId.InvalidElementId.</li><li>RevitLinkGraphicsSettings.GetViewDetailLevel() </li><li>RevitLinkGraphicsSettings.GetViewDetailLevelType()</li><li>RevitLinkGraphicsSettings.SetViewDetailLevel(LinkVisibility, ViewDetailLevel) – Allows users to configure detail level and detail level type of RevitLinkGraphicsSettings. Accepts LinkVisibility and ViewDetailLevel types.</li><li>RevitLinkGraphicsSettings.GetDiscipline()</li><li>RevitLinkGraphicsSettings.GetDisciplineType()</li><li>RevitLinkGraphicsSettings.SetDiscipline(LinkVisibility, ViewDiscipline) – Allows users to configure discipline and discipline type of RevitLinkGraphicsSettings. Accepts LinkVisibility and ViewDiscipline types.</li></ul><p>The new properties in Autodesk.Revit.DB.RevitLinkGraphicsSettings:</p><ul><li>RevitLinkGraphicsSettings.ViewFilterType</li><li>RevitLinkGraphicsSettings.ViewRange</li><li>RevitLinkGraphicsSettings.ColorFill</li><li>RevitLinkGraphicsSettings.ObjectStyles</li><li>RevitLinkGraphicsSettings.NestedLinks</li></ul><br /><br /><strong><u>RevitServer Enterprise / Revit Cloud Worksharing API additions</u></strong><p>The following events have been supported for file-based worksharing since 2021. We now support them in RevitServer Enterprise/Revit Cloud Worksharing.</p><ul><li>DocumentReloadingLatest - Subscribe to the DocumentReloadingLatestEventArgs event to be notified when Revit is just about to reload latest changes from a central model.</li><li>DocumentReloadedLatest - Subscribe to the DocumentReloadedLatestEventArgs event to be notified immediately after Revit has finished reloading a document with central model.</li></ul></div></div></div><div id="PageFooter" class="pageFooter"><div class="feedbackLink">Send comments on this topic to
        <a id="HT_MailLink" href="mailto:revitapifeedback%40autodesk.com?Subject=Revit%202025%20API">Autodesk</a></div>
        <script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Your feedback is used to improve the documentation and the product. Your e-mail address will not be used for any other purpose and is disposed of after the issue you report is resolved. While working to resolve the issue that you report, you may be contacted via e-mail to get further details or clarification on the feedback you sent. After the issue you report has been addressed, you may receive an e-mail to let you know that your feedback has been addressed.");
        </script></div></body></html>