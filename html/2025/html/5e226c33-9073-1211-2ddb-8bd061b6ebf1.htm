<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><meta name="Microsoft.Help.SelfBranded" content="true" /><meta name="Language" content="en-us" /><meta name="Microsoft.Help.Locale" content="en-us" /><meta name="Microsoft.Help.TopicLocale" content="en-us" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"></script><title>RebarContainer.AppendItemFromCurves Method</title><meta name="Title" content="AppendItemFromCurves Method" /><meta name="Microsoft.Help.Id" content="M:Autodesk.Revit.DB.Structure.RebarContainer.AppendItemFromCurves(Autodesk.Revit.DB.Structure.RebarStyle,Autodesk.Revit.DB.Structure.RebarBarType,Autodesk.Revit.DB.Structure.RebarHookType,Autodesk.Revit.DB.Structure.RebarHookType,Autodesk.Revit.DB.XYZ,System.Collections.Generic.IList{Autodesk.Revit.DB.Curve},Autodesk.Revit.DB.Structure.RebarHookOrientation,Autodesk.Revit.DB.Structure.RebarHookOrientation,System.Boolean,System.Boolean)" /><meta name="Microsoft.Help.ContentType" content="Reference" /><meta name="System.Keywords" content="RebarContainer.AppendItemFromCurves method" /><meta name="System.Keywords" content="AppendItemFromCurves method" /><meta name="Microsoft.Help.F1" content="Autodesk.Revit.DB.Structure.RebarContainer.AppendItemFromCurves" /><meta name="Microsoft.Help.F1" content="RebarContainer.AppendItemFromCurves" /><meta name="Microsoft.Help.F1" content="AppendItemFromCurves" /><meta name="container" content="Autodesk.Revit.DB.Structure" /><meta name="file" content="5e226c33-9073-1211-2ddb-8bd061b6ebf1" /><meta name="guid" content="5e226c33-9073-1211-2ddb-8bd061b6ebf1" /><meta name="Microsoft.Help.Category" content="CSharp" /><meta name="Microsoft.Help.Category" content="VB" /><meta name="Description" content="Appends an Item to the RebarContainer. Fills its data on base of the Rebar." /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Help1.css" /></head><body onload="SetDefaultLanguage('cs');"><input type="hidden" id="userDataCache" class="userDataStyle" /><div id="PageHeader" class="pageHeader">Revit 2025 API</div><div class="pageBody"><div id="TopicContent" class="topicContent"><table class="titleTable"><tr><td class="titleColumn"><h1>Rebar<wbr />Container<span id="LST3CBF41B7_0" data-languageSpecificText="cpp=::|nu=."></span>Append<wbr />Item<wbr />From<wbr />Curves Method</h1></td></tr></table><div class="summary">
   Appends an Item to the RebarContainer. Fills its data on base of the Rebar.
</div><br /><strong>Namespace:</strong> <a href="d586b341-f687-9d90-e96d-255806b7d4fc.htm">Autodesk.Revit.DB.Structure</a><br /><strong>Assembly:</strong> RevitAPI (in RevitAPI.dll) Version: 25.0.0.0 (25.0.0.0)<div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDB')" onkeypress="SectionExpandCollapse_CheckKey('IDB', event)" tabindex="0"><img id="IDBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Syntax</span></div><div id="IDBSection" class="collapsibleSection"><div id="IDAB" class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="IDAB_tab1" class="codeSnippetContainerTab"><a href="#" onclick="ChangeTab('IDAB','cs','1','4');return false;">C#</a></div><div id="IDAB_tab2" class="codeSnippetContainerTab"><a href="#" onclick="ChangeTab('IDAB','vb','2','4');return false;">VB</a></div><div id="IDAB_tab3" class="codeSnippetContainerTab"><a href="#" onclick="ChangeTab('IDAB','cpp','3','4');return false;">C++</a></div><div id="IDAB_tab4" class="codeSnippetContainerTab"><a href="#" onclick="ChangeTab('IDAB','fs','4','4');return false;">F#</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="IDAB_copyCode" href="#" class="copyCodeSnippet" onclick="CopyToClipboard('IDAB');return false;" title="Copy">Copy</a></div></div><div id="IDAB_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="keyword">public</span> <span class="identifier">RebarContainerItem</span> <span class="identifier">AppendItemFromCurves</span>(
	<span class="identifier">RebarStyle</span> <span class="parameter">style</span>,
	<span class="identifier">RebarBarType</span> <span class="parameter">barType</span>,
	<span class="identifier">RebarHookType</span> <span class="parameter">startHook</span>,
	<span class="identifier">RebarHookType</span> <span class="parameter">endHook</span>,
	<span class="identifier">XYZ</span> <span class="parameter">normal</span>,
	<span class="identifier">IList</span>&lt;<span class="identifier">Curve</span>&gt; <span class="parameter">curves</span>,
	<span class="identifier">RebarHookOrientation</span> <span class="parameter">startHookOrient</span>,
	<span class="identifier">RebarHookOrientation</span> <span class="parameter">endHookOrient</span>,
	<span class="identifier">bool</span> <span class="parameter">useExistingShapeIfPossible</span>,
	<span class="identifier">bool</span> <span class="parameter">createNewShape</span>
)</pre></div><div id="IDAB_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">Public</span> <span class="keyword">Function</span> <span class="identifier">AppendItemFromCurves</span> ( 
	<span class="parameter">style</span> <span class="keyword">As</span> <span class="identifier">RebarStyle</span>,
	<span class="parameter">barType</span> <span class="keyword">As</span> <span class="identifier">RebarBarType</span>,
	<span class="parameter">startHook</span> <span class="keyword">As</span> <span class="identifier">RebarHookType</span>,
	<span class="parameter">endHook</span> <span class="keyword">As</span> <span class="identifier">RebarHookType</span>,
	<span class="parameter">normal</span> <span class="keyword">As</span> <span class="identifier">XYZ</span>,
	<span class="parameter">curves</span> <span class="keyword">As</span> <span class="identifier">IList</span>(<span class="keyword">Of</span> <span class="identifier">Curve</span>),
	<span class="parameter">startHookOrient</span> <span class="keyword">As</span> <span class="identifier">RebarHookOrientation</span>,
	<span class="parameter">endHookOrient</span> <span class="keyword">As</span> <span class="identifier">RebarHookOrientation</span>,
	<span class="parameter">useExistingShapeIfPossible</span> <span class="keyword">As</span> <span class="identifier">Boolean</span>,
	<span class="parameter">createNewShape</span> <span class="keyword">As</span> <span class="identifier">Boolean</span>
) <span class="keyword">As</span> <span class="identifier">RebarContainerItem</span></pre></div><div id="IDAB_code_Div3" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">public</span>:
<span class="identifier">RebarContainerItem</span>^ <span class="identifier">AppendItemFromCurves</span>(
	<span class="identifier">RebarStyle</span> <span class="parameter">style</span>, 
	<span class="identifier">RebarBarType</span>^ <span class="parameter">barType</span>, 
	<span class="identifier">RebarHookType</span>^ <span class="parameter">startHook</span>, 
	<span class="identifier">RebarHookType</span>^ <span class="parameter">endHook</span>, 
	<span class="identifier">XYZ</span>^ <span class="parameter">normal</span>, 
	<span class="identifier">IList</span>&lt;<span class="identifier">Curve</span>^&gt;^ <span class="parameter">curves</span>, 
	<span class="identifier">RebarHookOrientation</span> <span class="parameter">startHookOrient</span>, 
	<span class="identifier">RebarHookOrientation</span> <span class="parameter">endHookOrient</span>, 
	<span class="identifier">bool</span> <span class="parameter">useExistingShapeIfPossible</span>, 
	<span class="identifier">bool</span> <span class="parameter">createNewShape</span>
)</pre></div><div id="IDAB_code_Div4" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">member</span> <span class="identifier">AppendItemFromCurves</span> : 
        <span class="parameter">style</span> : <span class="identifier">RebarStyle</span> * 
        <span class="parameter">barType</span> : <span class="identifier">RebarBarType</span> * 
        <span class="parameter">startHook</span> : <span class="identifier">RebarHookType</span> * 
        <span class="parameter">endHook</span> : <span class="identifier">RebarHookType</span> * 
        <span class="parameter">normal</span> : <span class="identifier">XYZ</span> * 
        <span class="parameter">curves</span> : <span class="identifier">IList</span>&lt;<span class="identifier">Curve</span>&gt; * 
        <span class="parameter">startHookOrient</span> : <span class="identifier">RebarHookOrientation</span> * 
        <span class="parameter">endHookOrient</span> : <span class="identifier">RebarHookOrientation</span> * 
        <span class="parameter">useExistingShapeIfPossible</span> : <span class="identifier">bool</span> * 
        <span class="parameter">createNewShape</span> : <span class="identifier">bool</span> <span class="keyword">-&gt;</span> <span class="identifier">RebarContainerItem</span> </pre></div></div></div><h4>Parameters</h4><dl><dt class="has-text-weight-normal"><span class="parameter">style</span>  <a href="a9ac65a6-29e6-25e5-caca-502e21385f47.htm">RebarStyle</a></dt><dd>
   The usage of the bar, "standard" or "stirrup/tie".
</dd><dt class="has-text-weight-normal"><span class="parameter">barType</span>  <a href="467b44cc-54e7-3ecf-07e1-ad15d05fe800.htm">RebarBarType</a></dt><dd>
   A RebarBarType element that defines bar diameter, bend radius and material of the rebar.
</dd><dt class="has-text-weight-normal"><span class="parameter">startHook</span>  <a href="3c7a78d5-f92b-e58b-e7c9-7927537498fd.htm">RebarHookType</a></dt><dd>
   A RebarHookType element that defines the hook for the start of the bar.
   If this parameter is <span class="keyword"><span id="LST3CBF41B7_1" data-languageSpecificText="cpp=nullptr|vb=Nothing|nu=null"></span></span>, it means to create a rebar with no hook.
</dd><dt class="has-text-weight-normal"><span class="parameter">endHook</span>  <a href="3c7a78d5-f92b-e58b-e7c9-7927537498fd.htm">RebarHookType</a></dt><dd>
   A RebarHookType element that defines the hook for the end of the bar.
   If this parameter is <span class="keyword"><span id="LST3CBF41B7_2" data-languageSpecificText="cpp=nullptr|vb=Nothing|nu=null"></span></span>, it means to create a rebar with no hook.
</dd><dt class="has-text-weight-normal"><span class="parameter">normal</span>  <a href="c2fd995c-95c0-58fb-f5de-f3246cbc5600.htm">XYZ</a></dt><dd>
   The normal to the plane that the rebar curves lie on.
</dd><dt class="has-text-weight-normal"><span class="parameter">curves</span>  <a href="https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1" target="_blank" rel="noopener noreferrer">IList</a><span id="LST3CBF41B7_3" data-languageSpecificText="cpp=&lt;|cs=&lt;|fs=&lt;|vb=(Of |nu=("></span><a href="400cc9b6-9ff7-de85-6fd8-c20002209d25.htm">Curve</a><span id="LST3CBF41B7_4" data-languageSpecificText="cpp=&gt;|cs=&gt;|fs=&gt;|vb=)|nu=)"></span></dt><dd>
   An array of curves that define the shape of the rebar curves.
   They must belong to the plane defined by the normal and origin.
   Bends and hooks should not be included in the array of curves.
</dd><dt class="has-text-weight-normal"><span class="parameter">startHookOrient</span>  <a href="e8365754-0811-8d4e-864a-55bf34af3a87.htm">RebarHookOrientation</a></dt><dd>
   Defines the orientation of the hook plane at the start of the rebar with respect to the orientation of the first curve and the plane normal.
   Only two values are permitted:
   Value = Right: The hook is on your right as you stand at the end of the bar,
   with the bar behind you, taking the bar's normal as "up."
   Value = Left: The hook is on your left as you stand at the end of the bar,
   with the bar behind you, taking the bar's normal as "up."
</dd><dt class="has-text-weight-normal"><span class="parameter">endHookOrient</span>  <a href="e8365754-0811-8d4e-864a-55bf34af3a87.htm">RebarHookOrientation</a></dt><dd>
   Defines the orientation of the hook plane at the end of the rebar with respect to the orientation of the last curve and the plane normal.
   Only two values are permitted:
   Value = Right: The hook is on your right as you stand at the end of the bar,
   with the bar behind you, taking the bar's normal as "up."
   Value = Left: The hook is on your left as you stand at the end of the bar,
   with the bar behind you, taking the bar's normal as "up."
</dd><dt class="has-text-weight-normal"><span class="parameter">useExistingShapeIfPossible</span>  <a href="https://learn.microsoft.com/dotnet/api/system.boolean" target="_blank" rel="noopener noreferrer">Boolean</a></dt><dd>
   Attempts to assign a RebarShape from those existing in the document. If no shape matches, NewRebar returns  or creates a new shape, according to the parameter createNewShape.
   When both parameters are "true", the behavior is the same as sketching rebar in the UI. At least one of these parameters must be "true".
   If the RebarShapeDefinesHooks flag in ReinforcementSettings has been set to false, and a RebarShape cannot be found with both matching curves and hooks,
   then this method will perform a second search, ignoring hook information.
</dd><dt class="has-text-weight-normal"><span class="parameter">createNewShape</span>  <a href="https://learn.microsoft.com/dotnet/api/system.boolean" target="_blank" rel="noopener noreferrer">Boolean</a></dt><dd>
   Creates a shape in the document to match the curves, hooks, and style specified, and assigns it to the new rebar instance.
   Shape creation will not succeed unless one or more other shapes already exist in the document, and these shapes
   have enough shape parameters to define a shape for these curves.
</dd></dl><h4>Return Value</h4><a href="764f647c-9c3e-b971-1c44-b63f756e1448.htm">RebarContainerItem</a><br />
   The Rebar Container Item.
</div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDMC')" onkeypress="SectionExpandCollapse_CheckKey('IDMC', event)" tabindex="0"><img id="IDMCToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Exceptions</span></div><div id="IDMCSection" class="collapsibleSection"><table><tr><th>Exception</th><th>Condition</th></tr><tr><td><a href="2e6e4206-97a8-dd4b-df5d-4269f4bb6088.htm">ArgumentException</a></td><td>
   The input curves is empty.
   -or-
   The input curves contains at least one curve which is not a bound Line or bound Arc
   and is not supported for this operation.
   -or-
   curves do not form a valid CurveLoop.
   -or-
   The input curves contains at least one helical curve and is not supported for this operation.
</td></tr><tr><td><a href="631e1424-60f4-929b-4e52-dda9dcd26316.htm">ArgumentNullException</a></td><td>
   A non-optional argument was null
</td></tr><tr><td><a href="60f148c9-ece0-a6bb-4e12-bb4a9c8c8a24.htm">ArgumentOutOfRangeException</a></td><td>
   normal has zero length.
   -or-
   A value passed for an enumeration argument is not a member of that enumeration
</td></tr><tr><td><a href="05972c68-fa6d-3a83-d720-ad84fbc4780f.htm">ArgumentsInconsistentException</a></td><td>
   Both useExistingShapeIfPossible and createNewShape are false.
   -or-
   curves contains non-fillet arcs with radii that are less than the
   minimum bend radius for the RebarBarType and bar style.
</td></tr></table></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDRC')" onkeypress="SectionExpandCollapse_CheckKey('IDRC', event)" tabindex="0"><img id="IDRCToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Example</span></div><div id="IDRCSection" class="collapsibleSection"><div id="IDARC" class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="IDARC_tab1" class="codeSnippetContainerTab"><a href="#" onclick="ChangeTab('IDARC','cs','1','4');return false;">C#</a></div><div id="IDARC_tab2" class="codeSnippetContainerTab"><a href="#" onclick="ChangeTab('IDARC','vb','2','4');return false;">VB</a></div><div id="IDARC_tab3" class="codeSnippetContainerTabPhantom"><a href="#" onclick="ChangeTab('IDARC','cpp','3','4');return false;">C++</a></div><div id="IDARC_tab4" class="codeSnippetContainerTabPhantom"><a href="#" onclick="ChangeTab('IDARC','fs','4','4');return false;">F#</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="IDARC_copyCode" href="#" class="copyCodeSnippet" onclick="CopyToClipboard('IDARC');return false;" title="Copy">Copy</a></div></div><div id="IDARC_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">void</span> AddItemsToRebarContainer(RebarContainer container, FamilyInstance beam, RebarBarType barType, RebarHookType hookType)
{
    <span class="highlight-comment">// Define the rebar geometry information - Line rebar</span>
    LocationCurve location = beam.Location <span class="highlight-keyword">as</span> LocationCurve;
    XYZ origin = location.Curve.GetEndPoint(<span class="highlight-number">0</span>);
    <span class="highlight-comment">// create rebar along the length of the beam</span>
    XYZ rebarLineEnd = location.Curve.GetEndPoint(<span class="highlight-number">1</span>);
    Line line = Line.CreateBound(origin, rebarLineEnd);
    XYZ normal = <span class="highlight-keyword">new</span> XYZ(<span class="highlight-number">1</span>, <span class="highlight-number">0</span>, <span class="highlight-number">0</span>);
    Curve rebarLine = line.CreateOffset(<span class="highlight-number">0.5</span>, normal);

    <span class="highlight-comment">// Create the line rebar</span>
    IList&lt;Curve&gt; curves = <span class="highlight-keyword">new</span> List&lt;Curve&gt;();
    curves.Add(rebarLine);

    RebarContainerItem item = container.AppendItemFromCurves(RebarStyle.Standard, barType, hookType, hookType, normal, curves, RebarHookOrientation.Right, RebarHookOrientation.Left,
                                                                <span class="highlight-keyword">true</span>, <span class="highlight-keyword">true</span>);

    <span class="highlight-keyword">if</span> (<span class="highlight-keyword">null</span> != item)
    {
        <span class="highlight-comment">// set specific layout for new rebar as fixed number, with 10 bars, distribution path length of 1.5'</span>
        <span class="highlight-comment">// with bars of the bar set on the same side of the rebar plane as indicated by normal</span>
        <span class="highlight-comment">// and both first and last bar in the set are shown</span>
        item.SetLayoutAsFixedNumber(<span class="highlight-number">10</span>, <span class="highlight-number">1.5</span>, <span class="highlight-keyword">true</span>, <span class="highlight-keyword">true</span>, <span class="highlight-keyword">true</span>);
    }

    <span class="highlight-comment">// Hide the new item in the active view</span>
    container.SetItemHiddenStatus(container.Document.ActiveView, item.ItemIndex, <span class="highlight-keyword">true</span>);
}</pre></div><div id="IDARC_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="highlight-keyword">Private</span> <span class="highlight-keyword">Sub</span> AddItemsToRebarContainer(container <span class="highlight-keyword">As</span> RebarContainer, beam <span class="highlight-keyword">As</span> FamilyInstance, barType <span class="highlight-keyword">As</span> RebarBarType, hookType <span class="highlight-keyword">As</span> RebarHookType)
    <span class="highlight-comment">' Define the rebar geometry information - Line rebar</span>
    <span class="highlight-keyword">Dim</span> location <span class="highlight-keyword">As</span> LocationCurve = <span class="highlight-keyword">TryCast</span>(beam.Location, LocationCurve)
    <span class="highlight-keyword">Dim</span> origin <span class="highlight-keyword">As</span> XYZ = location.Curve.GetEndPoint(<span class="highlight-number">0</span>)
    <span class="highlight-comment">' create rebar along the length of the beam</span>
    <span class="highlight-keyword">Dim</span> rebarLineEnd <span class="highlight-keyword">As</span> XYZ = location.Curve.GetEndPoint(<span class="highlight-number">1</span>)
    <span class="highlight-keyword">Dim</span> line__1 <span class="highlight-keyword">As</span> Line = Line.CreateBound(origin, rebarLineEnd)
    <span class="highlight-keyword">Dim</span> normal <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> XYZ(<span class="highlight-number">1</span>, <span class="highlight-number">0</span>, <span class="highlight-number">0</span>)
    <span class="highlight-keyword">Dim</span> rebarLine <span class="highlight-keyword">As</span> Curve = line__1.CreateOffset(<span class="highlight-number">0.5</span>, normal)

    <span class="highlight-comment">' Create the line rebar</span>
    <span class="highlight-keyword">Dim</span> curves <span class="highlight-keyword">As</span> IList(<span class="highlight-keyword">Of</span> Curve) = <span class="highlight-keyword">New</span> List(<span class="highlight-keyword">Of</span> Curve)()
    curves.Add(rebarLine)

    <span class="highlight-keyword">Dim</span> item <span class="highlight-keyword">As</span> RebarContainerItem = container.AppendItemFromCurves(RebarStyle.Standard, barType, hookType, hookType, normal, curves, _
        RebarHookOrientation.Right, RebarHookOrientation.Left, <span class="highlight-keyword">True</span>, <span class="highlight-keyword">True</span>)

    <span class="highlight-keyword">If</span> item <span class="highlight-keyword">IsNot</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
        <span class="highlight-comment">' set specific layout for new rebar as fixed number, with 10 bars, distribution path length of 1.5'</span>
        <span class="highlight-comment">' with bars of the bar set on the same side of the rebar plane as indicated by normal</span>
        <span class="highlight-comment">' and both first and last bar in the set are shown</span>
        item.SetLayoutAsFixedNumber(<span class="highlight-number">10</span>, <span class="highlight-number">1.5</span>, <span class="highlight-keyword">True</span>, <span class="highlight-keyword">True</span>, <span class="highlight-keyword">True</span>)
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

    <span class="highlight-comment">' Hide the new item in the active view</span>
    container.SetItemHiddenStatus(container.Document.ActiveView, item.ItemIndex, <span class="highlight-keyword">True</span>)
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span></pre></div><div id="IDARC_code_Div3" class="codeSnippetContainerCode" style="display: none"><p>No code example is currently available or this language may not be supported.</p></div><div id="IDARC_code_Div4" class="codeSnippetContainerCode" style="display: none"><p>No code example is currently available or this language may not be supported.</p></div></div></div></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('seeAlso')" onkeypress="SectionExpandCollapse_CheckKey('seeAlso', event)" tabindex="0"><img id="seeAlsoToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />See Also</span></div><div id="seeAlsoSection" class="collapsibleSection"><h4>Reference</h4><div><a href="61979a57-facc-d97a-7a35-ee04eed59156.htm">RebarContainer Class</a></div><div><a href="d586b341-f687-9d90-e96d-255806b7d4fc.htm">Autodesk.Revit.DB.Structure Namespace</a></div></div></div></div><div id="PageFooter" class="pageFooter"><div class="feedbackLink">Send comments on this topic to
        <a id="HT_MailLink" href="mailto:revitapifeedback%40autodesk.com?Subject=Revit%202025%20API">Autodesk</a></div>
        <script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Your feedback is used to improve the documentation and the product. Your e-mail address will not be used for any other purpose and is disposed of after the issue you report is resolved. While working to resolve the issue that you report, you may be contacted via e-mail to get further details or clarification on the feedback you sent. After the issue you report has been addressed, you may receive an e-mail to let you know that your feedback has been addressed.");
        </script></div></body></html>