<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><meta name="Microsoft.Help.SelfBranded" content="true" /><meta name="Language" content="en-us" /><meta name="Microsoft.Help.Locale" content="en-us" /><meta name="Microsoft.Help.TopicLocale" content="en-us" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"></script><title>GlobalParameter.SetValue Method</title><meta name="Title" content="SetValue Method" /><meta name="Microsoft.Help.Id" content="M:Autodesk.Revit.DB.GlobalParameter.SetValue(Autodesk.Revit.DB.ParameterValue)" /><meta name="Microsoft.Help.ContentType" content="Reference" /><meta name="System.Keywords" content="GlobalParameter.SetValue method" /><meta name="System.Keywords" content="SetValue method" /><meta name="Microsoft.Help.F1" content="Autodesk.Revit.DB.GlobalParameter.SetValue" /><meta name="Microsoft.Help.F1" content="GlobalParameter.SetValue" /><meta name="Microsoft.Help.F1" content="SetValue" /><meta name="container" content="Autodesk.Revit.DB" /><meta name="file" content="df012c22-6e65-8de5-1057-f15660d02288" /><meta name="guid" content="df012c22-6e65-8de5-1057-f15660d02288" /><meta name="Microsoft.Help.Category" content="CSharp" /><meta name="Microsoft.Help.Category" content="VB" /><meta name="Description" content="Sets a new value of the global parameter." /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Help1.css" /></head><body onload="SetDefaultLanguage('cs');"><input type="hidden" id="userDataCache" class="userDataStyle" /><div id="PageHeader" class="pageHeader">Revit 2025 API</div><div class="pageBody"><div id="TopicContent" class="topicContent"><table class="titleTable"><tr><td class="titleColumn"><h1>Global<wbr />Parameter<span id="LSTCF4267B8_0" data-languageSpecificText="cpp=::|nu=."></span>Set<wbr />Value Method</h1></td></tr></table><div class="summary">
   Sets a new value of the global parameter.
</div><br /><strong>Namespace:</strong> <a href="87546ba7-461b-c646-cbb1-2cb8f5bff8b2.htm">Autodesk.Revit.DB</a><br /><strong>Assembly:</strong> RevitAPI (in RevitAPI.dll) Version: 25.0.0.0 (25.0.0.0)<div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDB')" onkeypress="SectionExpandCollapse_CheckKey('IDB', event)" tabindex="0"><img id="IDBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Syntax</span></div><div id="IDBSection" class="collapsibleSection"><div id="IDAB" class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="IDAB_tab1" class="codeSnippetContainerTab"><a href="#" onclick="ChangeTab('IDAB','cs','1','4');return false;">C#</a></div><div id="IDAB_tab2" class="codeSnippetContainerTab"><a href="#" onclick="ChangeTab('IDAB','vb','2','4');return false;">VB</a></div><div id="IDAB_tab3" class="codeSnippetContainerTab"><a href="#" onclick="ChangeTab('IDAB','cpp','3','4');return false;">C++</a></div><div id="IDAB_tab4" class="codeSnippetContainerTab"><a href="#" onclick="ChangeTab('IDAB','fs','4','4');return false;">F#</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="IDAB_copyCode" href="#" class="copyCodeSnippet" onclick="CopyToClipboard('IDAB');return false;" title="Copy">Copy</a></div></div><div id="IDAB_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">void</span> <span class="identifier">SetValue</span>(
	<span class="identifier">ParameterValue</span> <span class="parameter">value</span>
)</pre></div><div id="IDAB_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">Public</span> <span class="keyword">Sub</span> <span class="identifier">SetValue</span> ( 
	<span class="parameter">value</span> <span class="keyword">As</span> <span class="identifier">ParameterValue</span>
)</pre></div><div id="IDAB_code_Div3" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">public</span>:
<span class="keyword">void</span> <span class="identifier">SetValue</span>(
	<span class="identifier">ParameterValue</span>^ <span class="parameter">value</span>
)</pre></div><div id="IDAB_code_Div4" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">member</span> <span class="identifier">SetValue</span> : 
        <span class="parameter">value</span> : <span class="identifier">ParameterValue</span> <span class="keyword">-&gt;</span> <span class="keyword">unit</span> </pre></div></div></div><h4>Parameters</h4><dl><dt class="has-text-weight-normal"><span class="parameter">value</span>  <a href="366521ef-ecc2-c3e3-feb5-81b3bbd8df0c.htm">ParameterValue</a></dt><dd>
   An instance of one of the value classes derived from ParameterValue.
</dd></dl></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDDC')" onkeypress="SectionExpandCollapse_CheckKey('IDDC', event)" tabindex="0"><img id="IDDCToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Exceptions</span></div><div id="IDDCSection" class="collapsibleSection"><table><tr><th>Exception</th><th>Condition</th></tr><tr><td><a href="2e6e4206-97a8-dd4b-df5d-4269f4bb6088.htm">ArgumentException</a></td><td>
   The given value argument is not a valid instance of ParameterValue!
   -or-
   The given parameter value arguments is not of the storage type the global parameter expects.
</td></tr><tr><td><a href="631e1424-60f4-929b-4e52-dda9dcd26316.htm">ArgumentNullException</a></td><td>
   A non-optional argument was null
</td></tr><tr><td><a href="9e715f03-3884-e539-4dd6-8d7545733adc.htm">InvalidOperationException</a></td><td>
   This is a formula-driven parameter. As such it does not allow the current operation.
   -or-
   This is a dimension-driven parameter. As such it does not allow the current operation.
</td></tr></table></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDBC')" onkeypress="SectionExpandCollapse_CheckKey('IDBC', event)" tabindex="0"><img id="IDBCToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Remarks</span></div><div id="IDBCSection" class="collapsibleSection"><p>Note that a value can only be set for parameters that are neither
   formula-driven nor dimension-driven, as those have their values determined
   by evaluating the formula or by the dimension, respectively.</p><p>The argument this method accepts is of the same type of <a href="366521ef-ecc2-c3e3-feb5-81b3bbd8df0c.htm">ParameterValue</a>
   that is returned by <a href="56eb0e54-eac4-9b51-3122-e4fb065b63f0.htm">GetValue<span id="LSTCF4267B8_1" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></a>. However, the type can also be easily deduced:
   <b>Text</b> parameters accept only <a href="2f79fff4-9773-471a-83f8-5636459bdbe5.htm">StringParameterValue</a>.
   <b>Integer</b> and <b>YesNo</b> parameters accept only <a href="14c16038-74bf-205b-ac93-6ffa6274c034.htm">IntegerParameterValue</a>.
   All other types of parameters accept only <a href="561ef32b-c3bc-3847-ef2a-27f4a011e650.htm">DoubleParameterValue</a>.
   Curiously, the actual value of a <b>YesNo</b> parameter can be only either 0 or 1.</p></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDHC')" onkeypress="SectionExpandCollapse_CheckKey('IDHC', event)" tabindex="0"><img id="IDHCToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Example</span></div><div id="IDHCSection" class="collapsibleSection"><div id="IDAHC" class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="IDAHC_tab1" class="codeSnippetContainerTab"><a href="#" onclick="ChangeTab('IDAHC','cs','1','4');return false;">C#</a></div><div id="IDAHC_tab2" class="codeSnippetContainerTab"><a href="#" onclick="ChangeTab('IDAHC','vb','2','4');return false;">VB</a></div><div id="IDAHC_tab3" class="codeSnippetContainerTabPhantom"><a href="#" onclick="ChangeTab('IDAHC','cpp','3','4');return false;">C++</a></div><div id="IDAHC_tab4" class="codeSnippetContainerTabPhantom"><a href="#" onclick="ChangeTab('IDAHC','fs','4','4');return false;">F#</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="IDAHC_copyCode" href="#" class="copyCodeSnippet" onclick="CopyToClipboard('IDAHC');return false;" title="Copy">Copy</a></div></div><div id="IDAHC_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-comment">/// &lt;summary&gt;</span>
<span class="highlight-comment">/// Modifies values of certain types of global parameters so that</span>
<span class="highlight-comment">/// - integer values will be incremented by one</span>
<span class="highlight-comment">/// - double values will be multiplied by two</span>
<span class="highlight-comment">/// - boolean values will be negated</span>
<span class="highlight-comment">/// &lt;/summary&gt;</span>
<span class="highlight-comment">/// &lt;param name="document"&gt;Revit project document in which we create global parameters.&lt;/param&gt;</span>
<span class="highlight-comment">/// &lt;param name="gpset"&gt;A set of ElementIds of global parameter elements&lt;/param&gt;</span>
<span class="highlight-comment">/// &lt;returns&gt;Number of actually modified values&lt;/returns&gt;</span>
<span class="highlight-keyword">public</span> <span class="highlight-keyword">int</span> ModifyGlobalParametersValues(Document document, ISet&lt;ElementId&gt; gpset)
{
    <span class="highlight-keyword">int</span> nChangedValues = <span class="highlight-number">0</span>;     <span class="highlight-comment">// number of values changed</span>

    <span class="highlight-comment">// we need a transaction to modify the model</span>
    <span class="highlight-keyword">using</span> (Transaction trans = <span class="highlight-keyword">new</span> Transaction(document, <span class="highlight-literal">"Change global parameters values"</span>))
    {
        trans.Start();

        <span class="highlight-keyword">foreach</span>(ElementId gpid <span class="highlight-keyword">in</span> gpset)
        {
            <span class="highlight-comment">// filter out element Ids that are not of a global parameters</span>
            <span class="highlight-comment">// (in production code, this would be an assert-able situation)</span>
            <span class="highlight-keyword">if</span> (!GlobalParametersManager.IsValidGlobalParameter(document, gpid))
                <span class="highlight-keyword">continue</span>;

            <span class="highlight-comment">// get the current value of the global parameter</span>
            GlobalParameter gp = document.GetElement(gpid) <span class="highlight-keyword">as</span> GlobalParameter;
            ParameterValue gpvalue = gp.GetValue();

            <span class="highlight-comment">// test whether it is a Double or Integer</span>
            <span class="highlight-keyword">if</span> (gp.GetType() == <span class="highlight-keyword">typeof</span>(DoubleParameterValue))
            {
                DoubleParameterValue dvalue = gpvalue <span class="highlight-keyword">as</span> DoubleParameterValue;
                dvalue.Value *= <span class="highlight-number">2.0</span>;
                gp.SetValue(dvalue);
                nChangedValues += <span class="highlight-number">1</span>;
            }
            <span class="highlight-keyword">else</span> <span class="highlight-keyword">if</span> (gp.GetType() == <span class="highlight-keyword">typeof</span>(IntegerParameterValue))
            {
                <span class="highlight-comment">// Integer values may represent Boolean parameters too</span>
                IntegerParameterValue ivalue = gpvalue <span class="highlight-keyword">as</span> IntegerParameterValue;
                <span class="highlight-keyword">if</span> (gp.GetDefinition().GetDataType() == SpecTypeId.Boolean.YesNo)
                {
                    ivalue.Value = (ivalue.Value == <span class="highlight-number">0</span>) ? <span class="highlight-number">1</span> : <span class="highlight-number">0</span>;
                }
                <span class="highlight-keyword">else</span>   <span class="highlight-comment">// common integers</span>
                {
                    ivalue.Value += <span class="highlight-number">1</span>;
                }
                gp.SetValue(ivalue);
                nChangedValues += <span class="highlight-number">1</span>;
            }
        }

        trans.Commit();
    }

    <span class="highlight-keyword">return</span> nChangedValues;
}</pre></div><div id="IDAHC_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="highlight-comment">' &lt;summary&gt;</span>
<span class="highlight-comment">' Modifies values of certain types of global parameters so that</span>
<span class="highlight-comment">' - integer values will be incremented by one</span>
<span class="highlight-comment">' - double values will be multiplied by two</span>
<span class="highlight-comment">' - boolean values will be negated</span>
<span class="highlight-comment">' &lt;/summary&gt;</span>
<span class="highlight-comment">' &lt;param name="document"&gt;Revit project document in which we create global parameters.&lt;/param&gt;</span>
<span class="highlight-comment">' &lt;param name="gpset"&gt;A set of ElementIds of global parameter elements&lt;/param&gt;</span>
<span class="highlight-comment">' &lt;returns&gt;Number of actually modified values&lt;/returns&gt;</span>
<span class="highlight-keyword">Public</span> <span class="highlight-keyword">Function</span> ModifyGlobalParametersValues(document <span class="highlight-keyword">As</span> Document, gpset <span class="highlight-keyword">As</span> ISet(<span class="highlight-keyword">Of</span> ElementId)) <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span>
    <span class="highlight-keyword">Dim</span> nChangedValues <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">0</span>
    <span class="highlight-comment">' number of values changed</span>
    <span class="highlight-comment">' we need a transaction to modify the model</span>
    <span class="highlight-keyword">Using</span> trans <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> Transaction(document, <span class="highlight-literal">"Change global parameters values"</span>)
        trans.Start()

        <span class="highlight-keyword">For</span> <span class="highlight-keyword">Each</span> gpid <span class="highlight-keyword">As</span> ElementId <span class="highlight-keyword">In</span> gpset
            <span class="highlight-comment">' filter out element Ids that are not of a global parameters</span>
            <span class="highlight-comment">' (in production code, this would be an assert-able situation)</span>
            <span class="highlight-keyword">If</span> <span class="highlight-keyword">Not</span> GlobalParametersManager.IsValidGlobalParameter(document, gpid) <span class="highlight-keyword">Then</span>
                <span class="highlight-keyword">Continue</span> <span class="highlight-keyword">For</span>
            <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

            <span class="highlight-comment">' get the current value of the global parameter</span>
            <span class="highlight-keyword">Dim</span> gp <span class="highlight-keyword">As</span> GlobalParameter = <span class="highlight-keyword">TryCast</span>(document.GetElement(gpid), GlobalParameter)
            <span class="highlight-keyword">Dim</span> gpvalue <span class="highlight-keyword">As</span> ParameterValue = gp.GetValue()

            <span class="highlight-comment">' test whether it is a Double or Integer</span>
            <span class="highlight-keyword">If</span> gp.[<span class="highlight-keyword">GetType</span>]() = <span class="highlight-keyword">GetType</span>(DoubleParameterValue) <span class="highlight-keyword">Then</span>
                <span class="highlight-keyword">Dim</span> dvalue <span class="highlight-keyword">As</span> DoubleParameterValue = <span class="highlight-keyword">TryCast</span>(gpvalue, DoubleParameterValue)
                dvalue.Value *= <span class="highlight-number">2.0</span>
                gp.SetValue(dvalue)
                nChangedValues += <span class="highlight-number">1</span>
            <span class="highlight-keyword">ElseIf</span> gp.[<span class="highlight-keyword">GetType</span>]() = <span class="highlight-keyword">GetType</span>(IntegerParameterValue) <span class="highlight-keyword">Then</span>
                <span class="highlight-comment">' Integer values may represent Boolean parameters too</span>
                <span class="highlight-keyword">Dim</span> ivalue <span class="highlight-keyword">As</span> IntegerParameterValue = <span class="highlight-keyword">TryCast</span>(gpvalue, IntegerParameterValue)
          <span class="highlight-keyword">If</span> gp.GetDefinition().GetDataType() = SpecTypeId.<span class="highlight-keyword">Boolean</span>.YesNo <span class="highlight-keyword">Then</span>
             ivalue.Value = <span class="highlight-keyword">If</span>((ivalue.Value = <span class="highlight-number">0</span>), <span class="highlight-number">1</span>, <span class="highlight-number">0</span>)
          <span class="highlight-keyword">Else</span>
             <span class="highlight-comment">' common integers</span>
             ivalue.Value += <span class="highlight-number">1</span>
                <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
                gp.SetValue(ivalue)
                nChangedValues += <span class="highlight-number">1</span>
            <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
        <span class="highlight-keyword">Next</span>

        trans.Commit()
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Using</span>

    <span class="highlight-keyword">Return</span> nChangedValues
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Function</span></pre></div><div id="IDAHC_code_Div3" class="codeSnippetContainerCode" style="display: none"><p>No code example is currently available or this language may not be supported.</p></div><div id="IDAHC_code_Div4" class="codeSnippetContainerCode" style="display: none"><p>No code example is currently available or this language may not be supported.</p></div></div></div></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('seeAlso')" onkeypress="SectionExpandCollapse_CheckKey('seeAlso', event)" tabindex="0"><img id="seeAlsoToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />See Also</span></div><div id="seeAlsoSection" class="collapsibleSection"><h4>Reference</h4><div><a href="b0e53a4a-84ad-abb4-358d-9797870f101b.htm">GlobalParameter Class</a></div><div><a href="87546ba7-461b-c646-cbb1-2cb8f5bff8b2.htm">Autodesk.Revit.DB Namespace</a></div></div></div></div><div id="PageFooter" class="pageFooter"><div class="feedbackLink">Send comments on this topic to
        <a id="HT_MailLink" href="mailto:revitapifeedback%40autodesk.com?Subject=Revit%202025%20API">Autodesk</a></div>
        <script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Your feedback is used to improve the documentation and the product. Your e-mail address will not be used for any other purpose and is disposed of after the issue you report is resolved. While working to resolve the issue that you report, you may be contacted via e-mail to get further details or clarification on the feedback you sent. After the issue you report has been addressed, you may receive an e-mail to let you know that your feedback has been addressed.");
        </script></div></body></html>