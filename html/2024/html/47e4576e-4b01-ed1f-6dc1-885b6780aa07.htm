<html xmlns:MSHelp="http://msdn.microsoft.com/mshelp" xmlns:mshelp="http://msdn.microsoft.com/mshelp" xmlns:ddue="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:msxsl="urn:schemas-microsoft-com:xslt"><head><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8" /><META NAME="save" CONTENT="history" /><title>StairsEditScope Class</title><meta name="Language" content="en-us" /><meta name="System.Keywords" content="StairsEditScope class" /><meta name="System.Keywords" content="Autodesk.Revit.DB.StairsEditScope class" /><meta name="System.Keywords" content="StairsEditScope class, about StairsEditScope class" /><meta name="Microsoft.Help.F1" content="Autodesk.Revit.DB.StairsEditScope" /><meta name="Microsoft.Help.Id" content="T:Autodesk.Revit.DB.StairsEditScope" /><meta name="Description" content="StairsEditScope allows user to maintain a stairs-editing session." /><meta name="Microsoft.Help.ContentType" content="Reference" /><link rel="stylesheet" type="text/css" href="../styles/Presentation.css" /><link rel="stylesheet" type="text/css" href="ms-help://Hx/HxRuntime/HxLink.css" /><script type="text/javascript" src="../scripts/EventUtilities.js"> </script><script type="text/javascript" src="../scripts/SplitScreen.js"> </script><script type="text/javascript" src="../scripts/Dropdown.js"> </script><script type="text/javascript" src="../scripts/script_manifold.js"> </script><script type="text/javascript" src="../scripts/script_feedBack.js"> </script><script type="text/javascript" src="../scripts/CheckboxMenu.js"> </script><script type="text/javascript" src="../scripts/CommonUtilities.js"> </script><meta name="container" content="Autodesk.Revit.DB" /><meta name="file" content="47e4576e-4b01-ed1f-6dc1-885b6780aa07" /><meta name="guid" content="47e4576e-4b01-ed1f-6dc1-885b6780aa07" /><xml><MSHelp:Attr Name="AssetID" Value="T:Autodesk.Revit.DB.StairsEditScope" /><MSHelp:TOCTitle Title="StairsEditScope Class" /><MSHelp:RLTitle Title="StairsEditScope Class (Autodesk.Revit.DB)" /><MSHelp:Keyword Index="A" Term="T:Autodesk.Revit.DB.StairsEditScope" /><MSHelp:Keyword Index="A" Term="frlrfAutodeskRevitDBStairsEditScopeClassTopic" /><MSHelp:Keyword Index="K" Term="StairsEditScope class" /><MSHelp:Keyword Index="K" Term="Autodesk.Revit.DB.StairsEditScope class" /><MSHelp:Keyword Index="K" Term="StairsEditScope class, about StairsEditScope class" /><MSHelp:Keyword Index="F" Term="Autodesk.Revit.DB.StairsEditScope" /><MSHelp:Attr Name="HelpPriority" Value="2" /><MSHelp:Attr Name="APIType" Value="Managed" /><MSHelp:Attr Name="APILocation" Value="RevitAPI.dll" /><MSHelp:Attr Name="APIName" Value="Autodesk.Revit.DB.StairsEditScope" /><MSHelp:Attr Name="DevLang" Value="CSharp" /><MSHelp:Attr Name="DevLang" Value="VB" /><MSHelp:Attr Name="Locale" Value="en-us" /><MSHelp:Attr Name="TopicType" Value="kbSyntax" /><MSHelp:Attr Name="TopicType" Value="apiref" /><MSHelp:Attr Name="Abstract" Value="StairsEditScope allows user to maintain a stairs-editing session." /><MSHelp:Attr Name="AssemblyVersion" Value="24.0.0.0" /></xml><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script></head><body><input type="hidden" id="userDataCache" class="userDataStyle" /><input type="hidden" id="hiddenScrollOffset" /><img id="collapseImage" style="display:none; height:0; width:0;" src="../icons/collapse_all.gif" alt="Collapse image" title="Collapse image" /><img id="expandImage" style="display:none; height:0; width:0;" src="../icons/expand_all.gif" alt="Expand Image" title="Expand Image" /><img id="collapseAllImage" style="display:none; height:0; width:0;" src="../icons/collapse_all.gif" /><img id="expandAllImage" style="display:none; height:0; width:0;" src="../icons/expand_all.gif" /><img id="dropDownImage" style="display:none; height:0; width:0;" src="../icons/dropdown.gif" /><img id="dropDownHoverImage" style="display:none; height:0; width:0;" src="../icons/dropdownHover.gif" /><img id="copyImage" style="display:none; height:0; width:0;" src="../icons/copycode.gif" alt="Copy image" title="Copy image" /><img id="copyHoverImage" style="display:none; height:0; width:0;" src="../icons/copycodeHighlight.gif" alt="CopyHover image" title="CopyHover image" /><div id="header"><table id="topTable" cellspacing="0" cellpadding="0"><tr><td><span onclick="ExpandCollapseAll(toggleAllImage)" style="cursor:default;" onkeypress="ExpandCollapseAll_CheckKey(toggleAllImage, event)" tabindex="0"><img ID="toggleAllImage" class="toggleAll" src="../icons/collapse_all.gif" /> <label id="collapseAllLabel" for="toggleAllImage" style="display: none;">Collapse All</label><label id="expandAllLabel" for="toggleAllImage" style="display: none;">Expand All</label> </span><span>    </span><span id="devlangsDropdown" class="filter" tabindex="0"><img id="devlangsDropdownImage" src="../icons/dropdown.gif" /> <label id="devlangsMenuAllLabel" for="devlangsDropdownImage" style="display: none;"><nobr>Code: All </nobr></label><label id="devlangsMenuMultipleLabel" for="devlangsDropdownImage" style="display: none;"><nobr>Code: Multiple </nobr></label><label id="devlangsMenuCSharpLabel" for="devlangsDropdownImage" style="display: none;"><nobr>Code: C# </nobr></label><label id="devlangsMenuVisualBasicLabel" for="devlangsDropdownImage" style="display: none;"><nobr>Code: Visual Basic </nobr></label><label id="devlangsMenuManagedCPlusPlusLabel" for="devlangsDropdownImage" style="display: none;"><nobr>Code: Visual C++ </nobr></label></span></td></tr></table><div id="devlangsMenu"><input id="CSharpCheckbox" type="checkbox" data="CSharp,cs,'persist'" value="on" onClick="SetLanguage(this)" /><label class="checkboxLabel" for="CSharpCheckbox">C#</label><br /><input id="VisualBasicCheckbox" type="checkbox" data="VisualBasic,vb,'persist'" value="on" onClick="SetLanguage(this)" /><label class="checkboxLabel" for="VisualBasicCheckbox">Visual Basic</label><br /><input id="ManagedCPlusPlusCheckbox" type="checkbox" data="ManagedCPlusPlus,cpp,'persist'" value="on" onClick="SetLanguage(this)" /><label class="checkboxLabel" for="ManagedCPlusPlusCheckbox">Visual C++</label><br /></div><table id="bottomTable" cellpadding="0" cellspacing="0"><tr id="headerTableRow1"><td align="left"><span id="runningHeaderText">Revit 2024 API</span></td></tr><tr id="headerTableRow2"><td align="left"><span id="nsrTitle">StairsEditScope Class</span></td></tr><tr id="headerTableRow3"><td align="left"><a href="c57f50f2-cb5b-9ed4-441a-13c8d90199b9.htm">Members</a> <a href="#exampleToggle" onclick="OpenSection(exampleToggle)">Example</a> <a href="#seeAlsoToggle" onclick="OpenSection(seeAlsoToggle)">See Also</a> <span id="headfeedbackarea" class="feedbackhead"><a href="javascript:SubmitFeedback('revitapifeedback@autodesk.com','Revit 2024 API','','','','%0\dYour%20feedback%20is%20used%20to%20improve%20the%20documentation%20and%20the%20product.%20Your%20e-mail%20address%20will%20not%20be%20used%20for%20any%20other%20purpose%20and%20is%20disposed%20of%20after%20the%20issue%20you%20report%20is%20resolved.%20%20While%20working%20to%20resolve%20the%20issue%20that%20you%20report,%20you%20may%20be%20contacted%20via%20e-mail%20to%20get%20further%20details%20or%20clarification%20on%20the%20feedback%20you%20sent.%20After%20the%20issue%20you%20report%20has%20been%20addressed,%20you%20may%20receive%20an%20e-mail%20to%20let%20you%20know%20that%20your%20feedback%20has%20been%20addressed.%0\A%0\d','Customer%20Feedback');">Send Feedback</a></span></td></tr></table><table id="gradientTable"><tr><td class="nsrBottom" background="../icons/gradient.gif" /></tr></table></div><div id="mainSection"><div id="mainBody"><div id="allHistory" class="saveHistory" onsave="saveAll()" onload="loadAll()" /><span style="color: DarkGray"></span><div class="summary">
   StairsEditScope allows user to maintain a stairs-editing session.
</div><p /><b>Namespace:</b> <a href="87546ba7-461b-c646-cbb1-2cb8f5bff8b2.htm">Autodesk.Revit.DB</a><br /><b>Assembly:</b> <span sdata="assembly">RevitAPI</span> (in RevitAPI.dll) Version: 24.0.0.0 (24.0.0.0)<br /><b>Since:</b> 
   2013
<h1 class="heading"><span onclick="ExpandCollapse(syntaxToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(syntaxToggle, event)" tabindex="0"><img id="syntaxToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />Syntax</span></h1><div id="syntaxSection" class="section" name="collapseableSection" style=""><div id="syntaxCodeBlocks" class="code"><span codeLanguage="CSharp"><table><tr><th>C#</th></tr><tr><td><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">class</span> <span class="identifier">StairsEditScope</span> : <a href="bac11282-3a3b-953e-8bc4-960c62da4946.htm">EditScope</a></pre></td></tr></table></span><span codeLanguage="VisualBasicDeclaration"><table><tr><th>Visual Basic</th></tr><tr><td><pre xml:space="preserve"><span class="keyword">Public</span> <span class="keyword">Class</span> <span class="identifier">StairsEditScope</span> _
	<span class="keyword">Inherits</span> <a href="bac11282-3a3b-953e-8bc4-960c62da4946.htm">EditScope</a></pre></td></tr></table></span><span codeLanguage="ManagedCPlusPlus"><table><tr><th>Visual C++</th></tr><tr><td><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">ref class</span> <span class="identifier">StairsEditScope</span> : <span class="keyword">public</span> <a href="bac11282-3a3b-953e-8bc4-960c62da4946.htm">EditScope</a></pre></td></tr></table></span></div></div><h1 class="heading"><span onclick="ExpandCollapse(remarksToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(remarksToggle, event)" tabindex="0"><img id="remarksToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />Remarks</span></h1><div id="remarksSection" class="section" name="collapseableSection" style="">
   Start/end of a StairsEditScope will start/end a transaction group. After a StairsEditScope is started, user can start transactions and edit the stairs.
   Individual transactions the user creates inside StairsEditScope will not appear in the undo menu.
   All transactions committed during the edit mode will be merged into a single one which will bear the given name passed into StairsEditScope constructor.
</div><h1 class="heading"><span onclick="ExpandCollapse(exampleToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(exampleToggle, event)" tabindex="0"><img id="exampleToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />Examples</span></h1><div id="exampleSection" class="section" name="collapseableSection" style=""><span id="cbc_1" x-lang="CSharp" codeLanguage="CSharp"><div class="highlight-title"><span class="highlight-copycode" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" tabindex="0" onmouseover="CopyCodeChangeIcon(this)" onmouseout="CopyCodeChangeIcon(this)" onclick="javascript:CopyColorizedCode(this.parentNode);"><img style="margin-right: 5px;" src="../icons/CopyCode.gif" />Copy</span>C#</div><div class="code"><pre xml:space="preserve"><span class="highlight-keyword">private</span> ElementId CreateStairs(Document document, Level levelBottom, Level levelTop)
{
    ElementId newStairsId = <span class="highlight-keyword">null</span>;

    <span class="highlight-keyword">using</span> (StairsEditScope newStairsScope = <span class="highlight-keyword">new</span> StairsEditScope(document, <span class="highlight-literal">"New Stairs"</span>))
    {
        newStairsId = newStairsScope.Start(levelBottom.Id, levelTop.Id);

        <span class="highlight-keyword">using</span> (Transaction stairsTrans = <span class="highlight-keyword">new</span> Transaction(document, <span class="highlight-literal">"Add Runs and Landings to Stairs"</span>))
        {
            stairsTrans.Start();

            <span class="highlight-comment">// Create a sketched run for the stairs</span>
            IList&lt;Curve&gt; bdryCurves = <span class="highlight-keyword">new</span> List&lt;Curve&gt;();
            IList&lt;Curve&gt; riserCurves = <span class="highlight-keyword">new</span> List&lt;Curve&gt;();
            IList&lt;Curve&gt; pathCurves = <span class="highlight-keyword">new</span> List&lt;Curve&gt;();
            XYZ pnt1 = <span class="highlight-keyword">new</span> XYZ(<span class="highlight-number">0</span>, <span class="highlight-number">0</span>, <span class="highlight-number">0</span>);
            XYZ pnt2 = <span class="highlight-keyword">new</span> XYZ(<span class="highlight-number">15</span>, <span class="highlight-number">0</span>, <span class="highlight-number">0</span>);
            XYZ pnt3 = <span class="highlight-keyword">new</span> XYZ(<span class="highlight-number">0</span>, <span class="highlight-number">10</span>, <span class="highlight-number">0</span>);
            XYZ pnt4 = <span class="highlight-keyword">new</span> XYZ(<span class="highlight-number">15</span>, <span class="highlight-number">10</span>, <span class="highlight-number">0</span>);

            <span class="highlight-comment">// boundaries       </span>
            bdryCurves.Add(Line.CreateBound(pnt1, pnt2));
            bdryCurves.Add(Line.CreateBound(pnt3, pnt4));

            <span class="highlight-comment">// riser curves</span>
            <span class="highlight-keyword">const</span> <span class="highlight-keyword">int</span> riserNum = <span class="highlight-number">20</span>;
            <span class="highlight-keyword">for</span> (<span class="highlight-keyword">int</span> ii = <span class="highlight-number">0</span>; ii &lt;= riserNum; ii++)
            {
                XYZ end0 = (pnt1 + pnt2) * ii / (<span class="highlight-keyword">double</span>)riserNum;
                XYZ end1 = (pnt3 + pnt4) * ii / (<span class="highlight-keyword">double</span>)riserNum;
                XYZ end2 = <span class="highlight-keyword">new</span> XYZ(end1.X, <span class="highlight-number">10</span>, <span class="highlight-number">0</span>);
                riserCurves.Add(Line.CreateBound(end0, end2));
            }

            <span class="highlight-comment">//stairs path curves</span>
            XYZ pathEnd0 = (pnt1 + pnt3) / <span class="highlight-number">2.0</span>;
            XYZ pathEnd1 = (pnt2 + pnt4) / <span class="highlight-number">2.0</span>;
            pathCurves.Add(Line.CreateBound(pathEnd0, pathEnd1));

            StairsRun newRun1 = StairsRun.CreateSketchedRun(document, newStairsId, levelBottom.Elevation, bdryCurves, riserCurves, pathCurves);

            <span class="highlight-comment">// Add a straight run</span>
            Line locationLine = Line.CreateBound(<span class="highlight-keyword">new</span> XYZ(<span class="highlight-number">20</span>, <span class="highlight-number">-5</span>, newRun1.TopElevation), <span class="highlight-keyword">new</span> XYZ(<span class="highlight-number">35</span>, <span class="highlight-number">-5</span>, newRun1.TopElevation));
            StairsRun newRun2 = StairsRun.CreateStraightRun(document, newStairsId, locationLine, StairsRunJustification.Center);
            newRun2.ActualRunWidth = <span class="highlight-number">10</span>;

            <span class="highlight-comment">// Add a landing between the runs</span>
            CurveLoop landingLoop = <span class="highlight-keyword">new</span> CurveLoop();
            XYZ p1 = <span class="highlight-keyword">new</span> XYZ(<span class="highlight-number">15</span>, <span class="highlight-number">10</span>, <span class="highlight-number">0</span>); 
            XYZ p2 = <span class="highlight-keyword">new</span> XYZ(<span class="highlight-number">20</span>, <span class="highlight-number">10</span>, <span class="highlight-number">0</span>);
            XYZ p3 = <span class="highlight-keyword">new</span> XYZ(<span class="highlight-number">20</span>, <span class="highlight-number">-10</span>, <span class="highlight-number">0</span>);
            XYZ p4 = <span class="highlight-keyword">new</span> XYZ(<span class="highlight-number">15</span>, <span class="highlight-number">-10</span>, <span class="highlight-number">0</span>);
            Line curve_1 = Line.CreateBound(p1, p2);
            Line curve_2 = Line.CreateBound(p2, p3);
            Line curve_3 = Line.CreateBound(p3, p4);
            Line curve_4 = Line.CreateBound(p4, p1);

            landingLoop.Append(curve_1);
            landingLoop.Append(curve_2);
            landingLoop.Append(curve_3);
            landingLoop.Append(curve_4);
            StairsLanding newLanding = StairsLanding.CreateSketchedLanding(document, newStairsId, landingLoop, newRun1.TopElevation);

            stairsTrans.Commit();
        }
        <span class="highlight-comment">// A failure preprocessor is to handle possible failures during the edit mode commitment process.</span>
        newStairsScope.Commit(<span class="highlight-keyword">new</span> StairsFailurePreprocessor());
    }

    <span class="highlight-keyword">return</span> newStairsId;
}</pre></div></span><span id="cbc_2" x-lang="VisualBasic" codeLanguage="VisualBasic"><div class="highlight-title"><span class="highlight-copycode" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" tabindex="0" onmouseover="CopyCodeChangeIcon(this)" onmouseout="CopyCodeChangeIcon(this)" onclick="javascript:CopyColorizedCode(this.parentNode);"><img style="margin-right: 5px;" src="../icons/CopyCode.gif" />Copy</span>VB.NET</div><div class="code"><pre xml:space="preserve"><span class="highlight-keyword">Private</span> <span class="highlight-keyword">Function</span> CreateStairs(document <span class="highlight-keyword">As</span> Document, levelBottom <span class="highlight-keyword">As</span> Level, levelTop <span class="highlight-keyword">As</span> Level) <span class="highlight-keyword">As</span> ElementId
    <span class="highlight-keyword">Dim</span> newStairsId <span class="highlight-keyword">As</span> ElementId = <span class="highlight-keyword">Nothing</span>

    <span class="highlight-keyword">Using</span> newStairsScope <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> StairsEditScope(document, <span class="highlight-literal">"New Stairs"</span>)
        newStairsId = newStairsScope.Start(levelBottom.Id, levelTop.Id)

        <span class="highlight-keyword">Using</span> stairsTrans <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> Transaction(document, <span class="highlight-literal">"Add Runs and Landings to Stairs"</span>)
            stairsTrans.Start()

            <span class="highlight-comment">' Create a sketched run for the stairs</span>
            <span class="highlight-keyword">Dim</span> bdryCurves <span class="highlight-keyword">As</span> IList(<span class="highlight-keyword">Of</span> Curve) = <span class="highlight-keyword">New</span> List(<span class="highlight-keyword">Of</span> Curve)()
            <span class="highlight-keyword">Dim</span> riserCurves <span class="highlight-keyword">As</span> IList(<span class="highlight-keyword">Of</span> Curve) = <span class="highlight-keyword">New</span> List(<span class="highlight-keyword">Of</span> Curve)()
            <span class="highlight-keyword">Dim</span> pathCurves <span class="highlight-keyword">As</span> IList(<span class="highlight-keyword">Of</span> Curve) = <span class="highlight-keyword">New</span> List(<span class="highlight-keyword">Of</span> Curve)()
            <span class="highlight-keyword">Dim</span> pnt1 <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> XYZ(<span class="highlight-number">0</span>, <span class="highlight-number">0</span>, <span class="highlight-number">0</span>)
            <span class="highlight-keyword">Dim</span> pnt2 <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> XYZ(<span class="highlight-number">15</span>, <span class="highlight-number">0</span>, <span class="highlight-number">0</span>)
            <span class="highlight-keyword">Dim</span> pnt3 <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> XYZ(<span class="highlight-number">0</span>, <span class="highlight-number">10</span>, <span class="highlight-number">0</span>)
            <span class="highlight-keyword">Dim</span> pnt4 <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> XYZ(<span class="highlight-number">15</span>, <span class="highlight-number">10</span>, <span class="highlight-number">0</span>)

            <span class="highlight-comment">' boundaries       </span>
            bdryCurves.Add(Line.CreateBound(pnt1, pnt2))
            bdryCurves.Add(Line.CreateBound(pnt3, pnt4))

            <span class="highlight-comment">' riser curves</span>
            <span class="highlight-keyword">Const</span> riserNum <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">20</span>
            <span class="highlight-keyword">For</span> ii <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">0</span> <span class="highlight-keyword">To</span> riserNum
                <span class="highlight-keyword">Dim</span> end0 <span class="highlight-keyword">As</span> XYZ = (pnt1 + pnt2) * ii / <span class="highlight-keyword">CDbl</span>(riserNum)
                <span class="highlight-keyword">Dim</span> end1 <span class="highlight-keyword">As</span> XYZ = (pnt3 + pnt4) * ii / <span class="highlight-keyword">CDbl</span>(riserNum)
                <span class="highlight-keyword">Dim</span> end2 <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> XYZ(end1.X, <span class="highlight-number">10</span>, <span class="highlight-number">0</span>)
                riserCurves.Add(Line.CreateBound(end0, end2))
            <span class="highlight-keyword">Next</span>

            <span class="highlight-comment">'stairs path curves</span>
            <span class="highlight-keyword">Dim</span> pathEnd0 <span class="highlight-keyword">As</span> XYZ = (pnt1 + pnt3) / <span class="highlight-number">2.0</span>
            <span class="highlight-keyword">Dim</span> pathEnd1 <span class="highlight-keyword">As</span> XYZ = (pnt2 + pnt4) / <span class="highlight-number">2.0</span>
            pathCurves.Add(Line.CreateBound(pathEnd0, pathEnd1))

            <span class="highlight-keyword">Dim</span> newRun1 <span class="highlight-keyword">As</span> StairsRun = StairsRun.CreateSketchedRun(document, newStairsId, levelBottom.Elevation, bdryCurves, riserCurves, pathCurves)

            <span class="highlight-comment">' Add a straight run</span>
            <span class="highlight-keyword">Dim</span> locationLine <span class="highlight-keyword">As</span> Line = Line.CreateBound(<span class="highlight-keyword">New</span> XYZ(<span class="highlight-number">20</span>, <span class="highlight-number">-5</span>, newRun1.TopElevation), <span class="highlight-keyword">New</span> XYZ(<span class="highlight-number">35</span>, <span class="highlight-number">-5</span>, newRun1.TopElevation))
            <span class="highlight-keyword">Dim</span> newRun2 <span class="highlight-keyword">As</span> StairsRun = StairsRun.CreateStraightRun(document, newStairsId, locationLine, StairsRunJustification.Center)
            newRun2.ActualRunWidth = <span class="highlight-number">10</span>

            <span class="highlight-comment">' Add a landing between the runs</span>
            <span class="highlight-keyword">Dim</span> landingLoop <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> CurveLoop()
            <span class="highlight-keyword">Dim</span> p1 <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> XYZ(<span class="highlight-number">15</span>, <span class="highlight-number">10</span>, <span class="highlight-number">0</span>)
            <span class="highlight-keyword">Dim</span> p2 <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> XYZ(<span class="highlight-number">20</span>, <span class="highlight-number">10</span>, <span class="highlight-number">0</span>)
            <span class="highlight-keyword">Dim</span> p3 <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> XYZ(<span class="highlight-number">20</span>, <span class="highlight-number">-10</span>, <span class="highlight-number">0</span>)
            <span class="highlight-keyword">Dim</span> p4 <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> XYZ(<span class="highlight-number">15</span>, <span class="highlight-number">-10</span>, <span class="highlight-number">0</span>)
            <span class="highlight-keyword">Dim</span> curve_1 <span class="highlight-keyword">As</span> Line = Line.CreateBound(p1, p2)
            <span class="highlight-keyword">Dim</span> curve_2 <span class="highlight-keyword">As</span> Line = Line.CreateBound(p2, p3)
            <span class="highlight-keyword">Dim</span> curve_3 <span class="highlight-keyword">As</span> Line = Line.CreateBound(p3, p4)
            <span class="highlight-keyword">Dim</span> curve_4 <span class="highlight-keyword">As</span> Line = Line.CreateBound(p4, p1)

            landingLoop.Append(curve_1)
            landingLoop.Append(curve_2)
            landingLoop.Append(curve_3)
            landingLoop.Append(curve_4)
            <span class="highlight-keyword">Dim</span> newLanding <span class="highlight-keyword">As</span> StairsLanding = StairsLanding.CreateSketchedLanding(document, newStairsId, landingLoop, newRun1.TopElevation)

            stairsTrans.Commit()
        <span class="highlight-keyword">End</span> <span class="highlight-keyword">Using</span>
        <span class="highlight-comment">' A failure preprocessor is to handle possible failures during the edit mode commitment process.</span>
        newStairsScope.Commit(<span class="highlight-keyword">New</span> StairsFailurePreprocessor())
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Using</span>

    <span class="highlight-keyword">Return</span> newStairsId
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Function</span></pre></div></span></div><h1 class="heading"><span onclick="ExpandCollapse(familyToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(familyToggle, event)" tabindex="0"><img id="familyToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />Inheritance Hierarchy</span></h1><div id="familySection" class="section" name="collapseableSection" style=""><span class="nolink">System<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>Object</span><br />  <a href="bac11282-3a3b-953e-8bc4-960c62da4946.htm">Autodesk.Revit.DB<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>EditScope</a><br />    <span class="selflink">Autodesk.Revit.DB<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>StairsEditScope</span><br /></div><h1 class="heading"><span onclick="ExpandCollapse(seeAlsoToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(seeAlsoToggle, event)" tabindex="0"><img id="seeAlsoToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />See Also</span></h1><div id="seeAlsoSection" class="section" name="collapseableSection" style=""><div class="seeAlsoStyle"><a href="c57f50f2-cb5b-9ed4-441a-13c8d90199b9.htm">StairsEditScope Members</a></div><div class="seeAlsoStyle"><a href="87546ba7-461b-c646-cbb1-2cb8f5bff8b2.htm">Autodesk.Revit.DB Namespace</a></div></div></div><div id="footer"><div class="footerLine"><img width="100%" height="3px" src="../icons/footer.gif" alt="Footer image" title="Footer image" /></div><A NAME="feedback"></A><span id="fb" class="feedbackcss"></span><p />Send comments on this topic to
        <a id="HT_MailLink" href="mailto:revitapifeedback%40autodesk.com?Subject=Revit 2024 API">Autodesk</a><script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        var HT_mailLinkText = HT_mailLink.innerHTML;
        HT_mailLink.href += ": " + document.title;
        HT_mailLink.innerHTML = HT_mailLinkText;
        </script></div></div></body></html>