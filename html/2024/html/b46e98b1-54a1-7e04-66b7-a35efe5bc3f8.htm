<html xmlns:MSHelp="http://msdn.microsoft.com/mshelp" xmlns:mshelp="http://msdn.microsoft.com/mshelp" xmlns:ddue="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:msxsl="urn:schemas-microsoft-com:xslt"><head><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8" /><META NAME="save" CONTENT="history" /><title>NewType Method </title><meta name="Language" content="en-us" /><meta name="System.Keywords" content="NewType method" /><meta name="System.Keywords" content="FamilyManager.NewType method" /><meta name="Microsoft.Help.F1" content="Autodesk.Revit.DB.FamilyManager.NewType" /><meta name="Microsoft.Help.Id" content="M:Autodesk.Revit.DB.FamilyManager.NewType(System.String)" /><meta name="Description" content="Add a new family type with a given name and makes it be the current type." /><meta name="Microsoft.Help.ContentType" content="Reference" /><link rel="stylesheet" type="text/css" href="../styles/Presentation.css" /><link rel="stylesheet" type="text/css" href="ms-help://Hx/HxRuntime/HxLink.css" /><script type="text/javascript" src="../scripts/EventUtilities.js"> </script><script type="text/javascript" src="../scripts/SplitScreen.js"> </script><script type="text/javascript" src="../scripts/Dropdown.js"> </script><script type="text/javascript" src="../scripts/script_manifold.js"> </script><script type="text/javascript" src="../scripts/script_feedBack.js"> </script><script type="text/javascript" src="../scripts/CheckboxMenu.js"> </script><script type="text/javascript" src="../scripts/CommonUtilities.js"> </script><meta name="container" content="Autodesk.Revit.DB" /><meta name="file" content="b46e98b1-54a1-7e04-66b7-a35efe5bc3f8" /><meta name="guid" content="b46e98b1-54a1-7e04-66b7-a35efe5bc3f8" /><xml><MSHelp:Attr Name="AssetID" Value="M:Autodesk.Revit.DB.FamilyManager.NewType(System.String)" /><MSHelp:TOCTitle Title="NewType Method " /><MSHelp:RLTitle Title="FamilyManager.NewType Method  (Autodesk.Revit.DB)" /><MSHelp:Keyword Index="A" Term="M:Autodesk.Revit.DB.FamilyManager.NewType(System.String)" /><MSHelp:Keyword Index="A" Term="frlrfAutodeskRevitDBFamilyManagerClassNewTypeTopic" /><MSHelp:Keyword Index="K" Term="NewType method" /><MSHelp:Keyword Index="K" Term="FamilyManager.NewType method" /><MSHelp:Keyword Index="F" Term="Autodesk.Revit.DB.FamilyManager.NewType" /><MSHelp:Attr Name="APIType" Value="Managed" /><MSHelp:Attr Name="APILocation" Value="RevitAPI.dll" /><MSHelp:Attr Name="APIName" Value="Autodesk.Revit.DB.FamilyManager.NewType" /><MSHelp:Attr Name="DevLang" Value="CSharp" /><MSHelp:Attr Name="DevLang" Value="VB" /><MSHelp:Attr Name="Locale" Value="en-us" /><MSHelp:Attr Name="TopicType" Value="kbSyntax" /><MSHelp:Attr Name="TopicType" Value="apiref" /><MSHelp:Attr Name="Abstract" Value="Add a new family type with a given name and makes it be the current type." /><MSHelp:Attr Name="AssemblyVersion" Value="24.0.0.0" /></xml><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script></head><body><input type="hidden" id="userDataCache" class="userDataStyle" /><input type="hidden" id="hiddenScrollOffset" /><img id="collapseImage" style="display:none; height:0; width:0;" src="../icons/collapse_all.gif" alt="Collapse image" title="Collapse image" /><img id="expandImage" style="display:none; height:0; width:0;" src="../icons/expand_all.gif" alt="Expand Image" title="Expand Image" /><img id="collapseAllImage" style="display:none; height:0; width:0;" src="../icons/collapse_all.gif" /><img id="expandAllImage" style="display:none; height:0; width:0;" src="../icons/expand_all.gif" /><img id="dropDownImage" style="display:none; height:0; width:0;" src="../icons/dropdown.gif" /><img id="dropDownHoverImage" style="display:none; height:0; width:0;" src="../icons/dropdownHover.gif" /><img id="copyImage" style="display:none; height:0; width:0;" src="../icons/copycode.gif" alt="Copy image" title="Copy image" /><img id="copyHoverImage" style="display:none; height:0; width:0;" src="../icons/copycodeHighlight.gif" alt="CopyHover image" title="CopyHover image" /><div id="header"><table id="topTable" cellspacing="0" cellpadding="0"><tr><td><span onclick="ExpandCollapseAll(toggleAllImage)" style="cursor:default;" onkeypress="ExpandCollapseAll_CheckKey(toggleAllImage, event)" tabindex="0"><img ID="toggleAllImage" class="toggleAll" src="../icons/collapse_all.gif" /> <label id="collapseAllLabel" for="toggleAllImage" style="display: none;">Collapse All</label><label id="expandAllLabel" for="toggleAllImage" style="display: none;">Expand All</label> </span><span>    </span><span id="devlangsDropdown" class="filter" tabindex="0"><img id="devlangsDropdownImage" src="../icons/dropdown.gif" /> <label id="devlangsMenuAllLabel" for="devlangsDropdownImage" style="display: none;"><nobr>Code: All </nobr></label><label id="devlangsMenuMultipleLabel" for="devlangsDropdownImage" style="display: none;"><nobr>Code: Multiple </nobr></label><label id="devlangsMenuCSharpLabel" for="devlangsDropdownImage" style="display: none;"><nobr>Code: C# </nobr></label><label id="devlangsMenuVisualBasicLabel" for="devlangsDropdownImage" style="display: none;"><nobr>Code: Visual Basic </nobr></label><label id="devlangsMenuManagedCPlusPlusLabel" for="devlangsDropdownImage" style="display: none;"><nobr>Code: Visual C++ </nobr></label></span></td></tr></table><div id="devlangsMenu"><input id="CSharpCheckbox" type="checkbox" data="CSharp,cs,'persist'" value="on" onClick="SetLanguage(this)" /><label class="checkboxLabel" for="CSharpCheckbox">C#</label><br /><input id="VisualBasicCheckbox" type="checkbox" data="VisualBasic,vb,'persist'" value="on" onClick="SetLanguage(this)" /><label class="checkboxLabel" for="VisualBasicCheckbox">Visual Basic</label><br /><input id="ManagedCPlusPlusCheckbox" type="checkbox" data="ManagedCPlusPlus,cpp,'persist'" value="on" onClick="SetLanguage(this)" /><label class="checkboxLabel" for="ManagedCPlusPlusCheckbox">Visual C++</label><br /></div><table id="bottomTable" cellpadding="0" cellspacing="0"><tr id="headerTableRow1"><td align="left"><span id="runningHeaderText">Revit 2024 API</span></td></tr><tr id="headerTableRow2"><td align="left"><span id="nsrTitle">FamilyManager<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>NewType Method </span></td></tr><tr id="headerTableRow3"><td align="left"><a href="1cc4fe6c-0e9f-7439-0021-32d2e06f4c33.htm">FamilyManager Class</a> <a href="#exampleToggle" onclick="OpenSection(exampleToggle)">Example</a> <a href="#seeAlsoToggle" onclick="OpenSection(seeAlsoToggle)">See Also</a> <span id="headfeedbackarea" class="feedbackhead"><a href="javascript:SubmitFeedback('revitapifeedback@autodesk.com','Revit 2024 API','','','','%0\dYour%20feedback%20is%20used%20to%20improve%20the%20documentation%20and%20the%20product.%20Your%20e-mail%20address%20will%20not%20be%20used%20for%20any%20other%20purpose%20and%20is%20disposed%20of%20after%20the%20issue%20you%20report%20is%20resolved.%20%20While%20working%20to%20resolve%20the%20issue%20that%20you%20report,%20you%20may%20be%20contacted%20via%20e-mail%20to%20get%20further%20details%20or%20clarification%20on%20the%20feedback%20you%20sent.%20After%20the%20issue%20you%20report%20has%20been%20addressed,%20you%20may%20receive%20an%20e-mail%20to%20let%20you%20know%20that%20your%20feedback%20has%20been%20addressed.%0\A%0\d','Customer%20Feedback');">Send Feedback</a></span></td></tr></table><table id="gradientTable"><tr><td class="nsrBottom" background="../icons/gradient.gif" /></tr></table></div><div id="mainSection"><div id="mainBody"><div id="allHistory" class="saveHistory" onsave="saveAll()" onload="loadAll()" /><span style="color: DarkGray"></span><div class="summary">Add a new family type with a given name and makes it be the current type.</div><p /><b>Namespace:</b> <a href="87546ba7-461b-c646-cbb1-2cb8f5bff8b2.htm">Autodesk.Revit.DB</a><br /><b>Assembly:</b> <span sdata="assembly">RevitAPI</span> (in RevitAPI.dll) Version: 24.0.0.0 (24.0.0.0)<h1 class="heading"><span onclick="ExpandCollapse(syntaxToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(syntaxToggle, event)" tabindex="0"><img id="syntaxToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />Syntax</span></h1><div id="syntaxSection" class="section" name="collapseableSection" style=""><div id="syntaxCodeBlocks" class="code"><span codeLanguage="CSharp"><table><tr><th>C#</th></tr><tr><td><pre xml:space="preserve"><span class="keyword">public</span> <a href="7f15b213-c99b-db59-3622-3280757b82d9.htm">FamilyType</a> <span class="identifier">NewType</span>(
	<span class="nolink">string</span> <span class="parameter">typeName</span>
)</pre></td></tr></table></span><span codeLanguage="VisualBasicDeclaration"><table><tr><th>Visual Basic</th></tr><tr><td><pre xml:space="preserve"><span class="keyword">Public</span> <span class="keyword">Function</span> <span class="identifier">NewType</span> ( _
	<span class="parameter">typeName</span> <span class="keyword">As</span> <span class="nolink">String</span> _
) <span class="keyword">As</span> <a href="7f15b213-c99b-db59-3622-3280757b82d9.htm">FamilyType</a></pre></td></tr></table></span><span codeLanguage="ManagedCPlusPlus"><table><tr><th>Visual C++</th></tr><tr><td><pre xml:space="preserve"><span class="keyword">public</span>:
<a href="7f15b213-c99b-db59-3622-3280757b82d9.htm">FamilyType</a>^ <span class="identifier">NewType</span>(
	<span class="nolink">String</span>^ <span class="parameter">typeName</span>
)</pre></td></tr></table></span></div><div id="parameters"><h4 class="subHeading">Parameters</h4><dl paramName="typeName"><dt><span class="parameter">typeName</span></dt><dd>Type: <span class="nolink">System<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>String</span><br />The name of new family type.</dd></dl></div></div><h1 class="heading"><span onclick="ExpandCollapse(exampleToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(exampleToggle, event)" tabindex="0"><img id="exampleToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />Examples</span></h1><div id="exampleSection" class="section" name="collapseableSection" style=""><span id="cbc_1" x-lang="CSharp" codeLanguage="CSharp"><div class="highlight-title"><span class="highlight-copycode" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" tabindex="0" onmouseover="CopyCodeChangeIcon(this)" onmouseout="CopyCodeChangeIcon(this)" onclick="javascript:CopyColorizedCode(this.parentNode);"><img style="margin-right: 5px;" src="../icons/CopyCode.gif" />Copy</span>C#</div><div class="code"><pre xml:space="preserve"><span class="highlight-keyword">public</span> <span class="highlight-keyword">void</span> EditFamilyTypes(Document document, FamilyInstance familyInstance)
{
    <span class="highlight-comment">// example works best when familyInstance is a rectangular concrete element</span>

    <span class="highlight-keyword">if</span> ((<span class="highlight-keyword">null</span> == document) || (<span class="highlight-keyword">null</span> == familyInstance.Symbol))
    {
        <span class="highlight-keyword">return</span>;   <span class="highlight-comment">// invalid arguments</span>
    }

    <span class="highlight-comment">// Get family associated with this</span>
    Family family = familyInstance.Symbol.Family;
    <span class="highlight-keyword">if</span> (<span class="highlight-keyword">null</span> == family)
    {
        <span class="highlight-keyword">return</span>;    <span class="highlight-comment">// could not get the family</span>
    }

    <span class="highlight-comment">// Get Family document for family</span>
    Document familyDoc = document.EditFamily(family);
    <span class="highlight-keyword">if</span> (<span class="highlight-keyword">null</span> == familyDoc)
    {
        <span class="highlight-keyword">return</span>;    <span class="highlight-comment">// could not open a family for edit</span>
    }

    FamilyManager familyManager = familyDoc.FamilyManager;
    <span class="highlight-keyword">if</span> (<span class="highlight-keyword">null</span> == familyManager)
    {
        <span class="highlight-keyword">return</span>;  <span class="highlight-comment">// cuould not get a family manager</span>
    }

    <span class="highlight-comment">// Start transaction for the family document</span>
    <span class="highlight-keyword">using</span> (Transaction newFamilyTypeTransaction = <span class="highlight-keyword">new</span> Transaction(familyDoc, <span class="highlight-literal">"Add Type to Family"</span>))
    {
        <span class="highlight-keyword">int</span> changesMade = <span class="highlight-number">0</span>;
        newFamilyTypeTransaction.Start();

        <span class="highlight-comment">// add a new type and edit its parameters</span>
        FamilyType newFamilyType = familyManager.NewType(<span class="highlight-literal">"2X2"</span>);

        <span class="highlight-keyword">if</span> (newFamilyType != <span class="highlight-keyword">null</span>)
        {
            <span class="highlight-comment">// look for 'b' and 'h' parameters and set them to 2 feet</span>
            FamilyParameter familyParam = familyManager.get_Parameter(<span class="highlight-literal">"b"</span>);
            <span class="highlight-keyword">if</span> (<span class="highlight-keyword">null</span> != familyParam)
            {
                familyManager.Set(familyParam, <span class="highlight-number">2.0</span>);
                changesMade += <span class="highlight-number">1</span>;
            }

            familyParam = familyManager.get_Parameter(<span class="highlight-literal">"h"</span>);
            <span class="highlight-keyword">if</span> (<span class="highlight-keyword">null</span> != familyParam)
            {
                familyManager.Set(familyParam, <span class="highlight-number">2.0</span>);
                changesMade += <span class="highlight-number">1</span>;
            }
        }

        <span class="highlight-keyword">if</span> (<span class="highlight-number">2</span> == changesMade)   <span class="highlight-comment">// set both paramaters?</span>
        {
            newFamilyTypeTransaction.Commit();
        }
        <span class="highlight-keyword">else</span>   <span class="highlight-comment">// could not make the change -&gt; should roll back </span>
        {
            newFamilyTypeTransaction.RollBack();
        }

        <span class="highlight-comment">// if could not make the change or could not commit it, we return</span>
        <span class="highlight-keyword">if</span> (newFamilyTypeTransaction.GetStatus() != TransactionStatus.Committed)
        {
            <span class="highlight-keyword">return</span>;
        }
    }

    <span class="highlight-comment">// now update the Revit project with Family which has a new type</span>
    LoadOpts loadOptions = <span class="highlight-keyword">new</span> LoadOpts();

    <span class="highlight-comment">// This overload is necessary for reloading an edited family</span>
    <span class="highlight-comment">// back into the source document from which it was extracted</span>
    family = familyDoc.LoadFamily(document, loadOptions);
    <span class="highlight-keyword">if</span> (<span class="highlight-keyword">null</span> != family)
    {
        <span class="highlight-comment">// find the new type and assign it to FamilyInstance</span>
        ISet&lt;ElementId&gt; familySymbolIds = family.GetFamilySymbolIds();
        <span class="highlight-keyword">foreach</span> (ElementId id <span class="highlight-keyword">in</span> familySymbolIds)
        {
            FamilySymbol familySymbol = family.Document.GetElement(id) <span class="highlight-keyword">as</span> FamilySymbol;
            <span class="highlight-keyword">if</span> ((<span class="highlight-keyword">null</span> != familySymbol) &amp;&amp; familySymbol.Name == <span class="highlight-literal">"2X2"</span>)
            {
                <span class="highlight-keyword">using</span> (Transaction changeSymbol = <span class="highlight-keyword">new</span> Transaction(document, <span class="highlight-literal">"Change Symbol Assignment"</span>))
                {
                    changeSymbol.Start();
                    familyInstance.Symbol = familySymbol;
                    changeSymbol.Commit();
                }
                <span class="highlight-keyword">break</span>;
            }
        }
    }
}

<span class="highlight-keyword">class</span> LoadOpts : IFamilyLoadOptions
{
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">bool</span> OnFamilyFound(<span class="highlight-keyword">bool</span> familyInUse, <span class="highlight-keyword">out</span> <span class="highlight-keyword">bool</span> overwriteParameterValues)
    {
        overwriteParameterValues = <span class="highlight-keyword">true</span>;
        <span class="highlight-keyword">return</span> <span class="highlight-keyword">true</span>;
    }

    <span class="highlight-keyword">public</span> <span class="highlight-keyword">bool</span> OnSharedFamilyFound(Family sharedFamily, <span class="highlight-keyword">bool</span> familyInUse, <span class="highlight-keyword">out</span> FamilySource source, <span class="highlight-keyword">out</span> <span class="highlight-keyword">bool</span> overwriteParameterValues)
    {
        source = FamilySource.Family;
        overwriteParameterValues = <span class="highlight-keyword">true</span>;
        <span class="highlight-keyword">return</span> <span class="highlight-keyword">true</span>;
    }
}</pre></div></span><span id="cbc_2" x-lang="VisualBasic" codeLanguage="VisualBasic"><div class="highlight-title"><span class="highlight-copycode" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" tabindex="0" onmouseover="CopyCodeChangeIcon(this)" onmouseout="CopyCodeChangeIcon(this)" onclick="javascript:CopyColorizedCode(this.parentNode);"><img style="margin-right: 5px;" src="../icons/CopyCode.gif" />Copy</span>VB.NET</div><div class="code"><pre xml:space="preserve"><span class="highlight-keyword">Public</span> <span class="highlight-keyword">Sub</span> EditFamilyTypes(document <span class="highlight-keyword">As</span> Document, familyInstance <span class="highlight-keyword">As</span> FamilyInstance)
    <span class="highlight-comment">' example works best when familyInstance is a rectangular concrete element</span>


    <span class="highlight-keyword">If</span> (document <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span>) <span class="highlight-keyword">OrElse</span> (familyInstance.Symbol <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span>) <span class="highlight-keyword">Then</span>
        <span class="highlight-comment">' invalid arguments</span>
        <span class="highlight-keyword">Return</span>
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

    <span class="highlight-comment">' Get family associated with this</span>
    <span class="highlight-keyword">Dim</span> family <span class="highlight-keyword">As</span> Family = familyInstance.Symbol.Family
    <span class="highlight-keyword">If</span> family <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
        <span class="highlight-comment">' could not get the family</span>
        <span class="highlight-keyword">Return</span>
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

    <span class="highlight-comment">' Get Family document for family</span>
    <span class="highlight-keyword">Dim</span> familyDoc <span class="highlight-keyword">As</span> Document = document.EditFamily(family)
    <span class="highlight-keyword">If</span> familyDoc <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
        <span class="highlight-comment">' could not open a family for edit</span>
        <span class="highlight-keyword">Return</span>
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

    <span class="highlight-keyword">Dim</span> familyManager <span class="highlight-keyword">As</span> FamilyManager = familyDoc.FamilyManager
    <span class="highlight-keyword">If</span> familyManager <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
        <span class="highlight-comment">' cuould not get a family manager</span>
        <span class="highlight-keyword">Return</span>
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

    <span class="highlight-comment">' Start transaction for the family document</span>
    <span class="highlight-keyword">Using</span> newFamilyTypeTransaction <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> Transaction(familyDoc, <span class="highlight-literal">"Add Type to Family"</span>)
        <span class="highlight-keyword">Dim</span> changesMade <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">0</span>
        newFamilyTypeTransaction.Start()

        <span class="highlight-comment">' add a new type and edit its parameters</span>
        <span class="highlight-keyword">Dim</span> newFamilyType <span class="highlight-keyword">As</span> FamilyType = familyManager.NewType(<span class="highlight-literal">"2X2"</span>)

        <span class="highlight-keyword">If</span> newFamilyType <span class="highlight-keyword">IsNot</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
            <span class="highlight-comment">' look for 'b' and 'h' parameters and set them to 2 feet</span>
            <span class="highlight-keyword">Dim</span> familyParam <span class="highlight-keyword">As</span> FamilyParameter = familyManager.Parameter(<span class="highlight-literal">"b"</span>)
            <span class="highlight-keyword">If</span> familyParam <span class="highlight-keyword">IsNot</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
                familyManager.[<span class="highlight-keyword">Set</span>](familyParam, <span class="highlight-number">2.0</span>)
                changesMade += <span class="highlight-number">1</span>
            <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

            familyParam = familyManager.Parameter(<span class="highlight-literal">"h"</span>)
            <span class="highlight-keyword">If</span> familyParam <span class="highlight-keyword">IsNot</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
                familyManager.[<span class="highlight-keyword">Set</span>](familyParam, <span class="highlight-number">2.0</span>)
                changesMade += <span class="highlight-number">1</span>
            <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
        <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

        <span class="highlight-keyword">If</span> <span class="highlight-number">2</span> = changesMade <span class="highlight-keyword">Then</span>
            <span class="highlight-comment">' set both paramaters?</span>
            newFamilyTypeTransaction.Commit()
        <span class="highlight-keyword">Else</span>
            <span class="highlight-comment">' could not make the change -&gt; should roll back </span>
            newFamilyTypeTransaction.RollBack()
        <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

        <span class="highlight-comment">' if could not make the change or could not commit it, we return</span>
        <span class="highlight-keyword">If</span> newFamilyTypeTransaction.GetStatus() &lt;&gt; TransactionStatus.Committed <span class="highlight-keyword">Then</span>
            <span class="highlight-keyword">Return</span>
        <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Using</span>

    <span class="highlight-comment">' now update the Revit project with Family which has a new type</span>
    <span class="highlight-keyword">Dim</span> loadOptions <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> LoadOpts()

    <span class="highlight-comment">' This overload is necessary for reloading an edited family</span>
    <span class="highlight-comment">' back into the source document from which it was extracted</span>
    family = familyDoc.LoadFamily(document, loadOptions)
    <span class="highlight-keyword">If</span> family <span class="highlight-keyword">IsNot</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
        <span class="highlight-comment">' find the new type and assign it to FamilyInstance</span>
        <span class="highlight-keyword">Dim</span> familySymbolIds <span class="highlight-keyword">As</span> ISet(<span class="highlight-keyword">Of</span> ElementId) = family.GetFamilySymbolIds()
        <span class="highlight-keyword">For</span> <span class="highlight-keyword">Each</span> id <span class="highlight-keyword">As</span> ElementId <span class="highlight-keyword">In</span> familySymbolIds
            <span class="highlight-keyword">Dim</span> familySymbol <span class="highlight-keyword">As</span> FamilySymbol = <span class="highlight-keyword">TryCast</span>(family.Document.GetElement(id), FamilySymbol)
            <span class="highlight-keyword">If</span> (familySymbol <span class="highlight-keyword">IsNot</span> <span class="highlight-keyword">Nothing</span>) <span class="highlight-keyword">AndAlso</span> familySymbol.Name = <span class="highlight-literal">"2X2"</span> <span class="highlight-keyword">Then</span>
                <span class="highlight-keyword">Using</span> changeSymbol <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> Transaction(document, <span class="highlight-literal">"Change Symbol Assignment"</span>)
                    changeSymbol.Start()
                    familyInstance.Symbol = familySymbol
                    changeSymbol.Commit()
                <span class="highlight-keyword">End</span> <span class="highlight-keyword">Using</span>
                <span class="highlight-keyword">Exit</span> <span class="highlight-keyword">For</span>
            <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
        <span class="highlight-keyword">Next</span>
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span>

<span class="highlight-keyword">Private</span> <span class="highlight-keyword">Class</span> LoadOpts
    <span class="highlight-keyword">Implements</span> IFamilyLoadOptions
    <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Function</span> OnFamilyFound(familyInUse <span class="highlight-keyword">As</span> <span class="highlight-keyword">Boolean</span>, <span class="highlight-keyword">ByRef</span> overwriteParameterValues <span class="highlight-keyword">As</span> <span class="highlight-keyword">Boolean</span>) <span class="highlight-keyword">As</span> <span class="highlight-keyword">Boolean</span> <span class="highlight-keyword">Implements</span> IFamilyLoadOptions.OnFamilyFound
        overwriteParameterValues = <span class="highlight-keyword">True</span>
        <span class="highlight-keyword">Return</span> <span class="highlight-keyword">True</span>
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Function</span>

    <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Function</span> OnSharedFamilyFound(sharedFamily <span class="highlight-keyword">As</span> Family, familyInUse <span class="highlight-keyword">As</span> <span class="highlight-keyword">Boolean</span>, <span class="highlight-keyword">ByRef</span> source <span class="highlight-keyword">As</span> FamilySource, <span class="highlight-keyword">ByRef</span> overwriteParameterValues <span class="highlight-keyword">As</span> <span class="highlight-keyword">Boolean</span>) <span class="highlight-keyword">As</span> <span class="highlight-keyword">Boolean</span> <span class="highlight-keyword">Implements</span> IFamilyLoadOptions.OnSharedFamilyFound
        source = FamilySource.Family
        overwriteParameterValues = <span class="highlight-keyword">True</span>
        <span class="highlight-keyword">Return</span> <span class="highlight-keyword">True</span>
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Function</span>
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Class</span></pre></div></span></div><h1 class="heading"><span onclick="ExpandCollapse(exceptionsToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(exceptionsToggle, event)" tabindex="0"><img id="exceptionsToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />Exceptions</span></h1><div id="exceptionsSection" class="section" name="collapseableSection" style=""><div class="tableSection"><table width="100%" cellspacing="2" cellpadding="5" frame="lhs"><tr><th class="exceptionNameColumn">Exception</th><th class="exceptionConditionColumn">Condition</th></tr><tr><td><a href="631e1424-60f4-929b-4e52-dda9dcd26316.htm">Autodesk.Revit.Exceptions<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>ArgumentNullException</a></td><td>
Thrown when the input argument-"typeName"-is <span class="keyword"><span class="languageSpecificText"><span class="cs">null</span><span class="vb">Nothing</span><span class="cpp">nullptr</span></span></span><span class="nu">a null reference (<span class="keyword">Nothing</span> in Visual Basic)</span>.
</td></tr><tr><td><a href="2e6e4206-97a8-dd4b-df5d-4269f4bb6088.htm">Autodesk.Revit.Exceptions<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>ArgumentException</a></td><td>
Thrown when the input argument-"typeName"-is already in use.
</td></tr><tr><td><a href="9e715f03-3884-e539-4dd6-8d7545733adc.htm">Autodesk.Revit.Exceptions<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>InvalidOperationException</a></td><td>
Thrown when the family type creation failed.
</td></tr></table></div></div><h1 class="heading"><span onclick="ExpandCollapse(seeAlsoToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(seeAlsoToggle, event)" tabindex="0"><img id="seeAlsoToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />See Also</span></h1><div id="seeAlsoSection" class="section" name="collapseableSection" style=""><div class="seeAlsoStyle"><a href="1cc4fe6c-0e9f-7439-0021-32d2e06f4c33.htm">FamilyManager Class</a></div><div class="seeAlsoStyle"><a href="87546ba7-461b-c646-cbb1-2cb8f5bff8b2.htm">Autodesk.Revit.DB Namespace</a></div></div></div><div id="footer"><div class="footerLine"><img width="100%" height="3px" src="../icons/footer.gif" alt="Footer image" title="Footer image" /></div><A NAME="feedback"></A><span id="fb" class="feedbackcss"></span><p />Send comments on this topic to
        <a id="HT_MailLink" href="mailto:revitapifeedback%40autodesk.com?Subject=Revit 2024 API">Autodesk</a><script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        var HT_mailLinkText = HT_mailLink.innerHTML;
        HT_mailLink.href += ": " + document.title;
        HT_mailLink.innerHTML = HT_mailLinkText;
        </script></div></div></body></html>