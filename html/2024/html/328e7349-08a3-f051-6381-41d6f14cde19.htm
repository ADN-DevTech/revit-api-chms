<html xmlns:MSHelp="http://msdn.microsoft.com/mshelp" xmlns:mshelp="http://msdn.microsoft.com/mshelp" xmlns:ddue="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:msxsl="urn:schemas-microsoft-com:xslt"><head><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8" /><META NAME="save" CONTENT="history" /><title>SetComponents Method </title><meta name="Language" content="en-us" /><meta name="System.Keywords" content="SetComponents method" /><meta name="System.Keywords" content="LoadCombination.SetComponents method" /><meta name="Microsoft.Help.F1" content="Autodesk.Revit.DB.Structure.LoadCombination.SetComponents" /><meta name="Microsoft.Help.Id" content="M:Autodesk.Revit.DB.Structure.LoadCombination.SetComponents(System.Collections.Generic.IList{Autodesk.Revit.DB.Structure.LoadComponent})" /><meta name="Description" content="Sets a collection of the load combination components." /><meta name="Microsoft.Help.ContentType" content="Reference" /><link rel="stylesheet" type="text/css" href="../styles/Presentation.css" /><link rel="stylesheet" type="text/css" href="ms-help://Hx/HxRuntime/HxLink.css" /><script type="text/javascript" src="../scripts/EventUtilities.js"> </script><script type="text/javascript" src="../scripts/SplitScreen.js"> </script><script type="text/javascript" src="../scripts/Dropdown.js"> </script><script type="text/javascript" src="../scripts/script_manifold.js"> </script><script type="text/javascript" src="../scripts/script_feedBack.js"> </script><script type="text/javascript" src="../scripts/CheckboxMenu.js"> </script><script type="text/javascript" src="../scripts/CommonUtilities.js"> </script><meta name="container" content="Autodesk.Revit.DB.Structure" /><meta name="file" content="328e7349-08a3-f051-6381-41d6f14cde19" /><meta name="guid" content="328e7349-08a3-f051-6381-41d6f14cde19" /><xml><MSHelp:Attr Name="AssetID" Value="M:Autodesk.Revit.DB.Structure.LoadCombination.SetComponents(System.Collections.Generic.IList{Autodesk.Revit.DB.Structure.LoadComponent})" /><MSHelp:TOCTitle Title="SetComponents Method " /><MSHelp:RLTitle Title="LoadCombination.SetComponents Method  (Autodesk.Revit.DB.Structure)" /><MSHelp:Keyword Index="A" Term="M:Autodesk.Revit.DB.Structure.LoadCombination.SetComponents(System.Collections.Generic.IList{Autodesk.Revit.DB.Structure.LoadComponent})" /><MSHelp:Keyword Index="A" Term="frlrfAutodeskRevitDBStructureLoadCombinationClassSetComponentsTopic" /><MSHelp:Keyword Index="K" Term="SetComponents method" /><MSHelp:Keyword Index="K" Term="LoadCombination.SetComponents method" /><MSHelp:Keyword Index="F" Term="Autodesk.Revit.DB.Structure.LoadCombination.SetComponents" /><MSHelp:Attr Name="APIType" Value="Managed" /><MSHelp:Attr Name="APILocation" Value="RevitAPI.dll" /><MSHelp:Attr Name="APIName" Value="Autodesk.Revit.DB.Structure.LoadCombination.SetComponents" /><MSHelp:Attr Name="DevLang" Value="CSharp" /><MSHelp:Attr Name="DevLang" Value="VB" /><MSHelp:Attr Name="Locale" Value="en-us" /><MSHelp:Attr Name="TopicType" Value="kbSyntax" /><MSHelp:Attr Name="TopicType" Value="apiref" /><MSHelp:Attr Name="Abstract" Value="Sets a collection of the load combination components." /><MSHelp:Attr Name="AssemblyVersion" Value="24.0.0.0" /></xml><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script></head><body><input type="hidden" id="userDataCache" class="userDataStyle" /><input type="hidden" id="hiddenScrollOffset" /><img id="collapseImage" style="display:none; height:0; width:0;" src="../icons/collapse_all.gif" alt="Collapse image" title="Collapse image" /><img id="expandImage" style="display:none; height:0; width:0;" src="../icons/expand_all.gif" alt="Expand Image" title="Expand Image" /><img id="collapseAllImage" style="display:none; height:0; width:0;" src="../icons/collapse_all.gif" /><img id="expandAllImage" style="display:none; height:0; width:0;" src="../icons/expand_all.gif" /><img id="dropDownImage" style="display:none; height:0; width:0;" src="../icons/dropdown.gif" /><img id="dropDownHoverImage" style="display:none; height:0; width:0;" src="../icons/dropdownHover.gif" /><img id="copyImage" style="display:none; height:0; width:0;" src="../icons/copycode.gif" alt="Copy image" title="Copy image" /><img id="copyHoverImage" style="display:none; height:0; width:0;" src="../icons/copycodeHighlight.gif" alt="CopyHover image" title="CopyHover image" /><div id="header"><table id="topTable" cellspacing="0" cellpadding="0"><tr><td><span onclick="ExpandCollapseAll(toggleAllImage)" style="cursor:default;" onkeypress="ExpandCollapseAll_CheckKey(toggleAllImage, event)" tabindex="0"><img ID="toggleAllImage" class="toggleAll" src="../icons/collapse_all.gif" /> <label id="collapseAllLabel" for="toggleAllImage" style="display: none;">Collapse All</label><label id="expandAllLabel" for="toggleAllImage" style="display: none;">Expand All</label> </span><span>    </span><span id="devlangsDropdown" class="filter" tabindex="0"><img id="devlangsDropdownImage" src="../icons/dropdown.gif" /> <label id="devlangsMenuAllLabel" for="devlangsDropdownImage" style="display: none;"><nobr>Code: All </nobr></label><label id="devlangsMenuMultipleLabel" for="devlangsDropdownImage" style="display: none;"><nobr>Code: Multiple </nobr></label><label id="devlangsMenuCSharpLabel" for="devlangsDropdownImage" style="display: none;"><nobr>Code: C# </nobr></label><label id="devlangsMenuVisualBasicLabel" for="devlangsDropdownImage" style="display: none;"><nobr>Code: Visual Basic </nobr></label><label id="devlangsMenuManagedCPlusPlusLabel" for="devlangsDropdownImage" style="display: none;"><nobr>Code: Visual C++ </nobr></label></span></td></tr></table><div id="devlangsMenu"><input id="CSharpCheckbox" type="checkbox" data="CSharp,cs,'persist'" value="on" onClick="SetLanguage(this)" /><label class="checkboxLabel" for="CSharpCheckbox">C#</label><br /><input id="VisualBasicCheckbox" type="checkbox" data="VisualBasic,vb,'persist'" value="on" onClick="SetLanguage(this)" /><label class="checkboxLabel" for="VisualBasicCheckbox">Visual Basic</label><br /><input id="ManagedCPlusPlusCheckbox" type="checkbox" data="ManagedCPlusPlus,cpp,'persist'" value="on" onClick="SetLanguage(this)" /><label class="checkboxLabel" for="ManagedCPlusPlusCheckbox">Visual C++</label><br /></div><table id="bottomTable" cellpadding="0" cellspacing="0"><tr id="headerTableRow1"><td align="left"><span id="runningHeaderText">Revit 2024 API</span></td></tr><tr id="headerTableRow2"><td align="left"><span id="nsrTitle">LoadCombination<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>SetComponents Method </span></td></tr><tr id="headerTableRow3"><td align="left"><a href="82891124-6fb9-e612-ca8c-6f4e32e2c121.htm">LoadCombination Class</a> <a href="#exampleToggle" onclick="OpenSection(exampleToggle)">Example</a> <a href="#seeAlsoToggle" onclick="OpenSection(seeAlsoToggle)">See Also</a> <span id="headfeedbackarea" class="feedbackhead"><a href="javascript:SubmitFeedback('revitapifeedback@autodesk.com','Revit 2024 API','','','','%0\dYour%20feedback%20is%20used%20to%20improve%20the%20documentation%20and%20the%20product.%20Your%20e-mail%20address%20will%20not%20be%20used%20for%20any%20other%20purpose%20and%20is%20disposed%20of%20after%20the%20issue%20you%20report%20is%20resolved.%20%20While%20working%20to%20resolve%20the%20issue%20that%20you%20report,%20you%20may%20be%20contacted%20via%20e-mail%20to%20get%20further%20details%20or%20clarification%20on%20the%20feedback%20you%20sent.%20After%20the%20issue%20you%20report%20has%20been%20addressed,%20you%20may%20receive%20an%20e-mail%20to%20let%20you%20know%20that%20your%20feedback%20has%20been%20addressed.%0\A%0\d','Customer%20Feedback');">Send Feedback</a></span></td></tr></table><table id="gradientTable"><tr><td class="nsrBottom" background="../icons/gradient.gif" /></tr></table></div><div id="mainSection"><div id="mainBody"><div id="allHistory" class="saveHistory" onsave="saveAll()" onload="loadAll()" /><span style="color: DarkGray"></span><div class="summary">
   Sets a collection of the load combination components.
</div><p /><b>Namespace:</b> <a href="d586b341-f687-9d90-e96d-255806b7d4fc.htm">Autodesk.Revit.DB.Structure</a><br /><b>Assembly:</b> <span sdata="assembly">RevitAPI</span> (in RevitAPI.dll) Version: 24.0.0.0 (24.0.0.0)<br /><b>Since:</b> 
   2016
<h1 class="heading"><span onclick="ExpandCollapse(syntaxToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(syntaxToggle, event)" tabindex="0"><img id="syntaxToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />Syntax</span></h1><div id="syntaxSection" class="section" name="collapseableSection" style=""><div id="syntaxCodeBlocks" class="code"><span codeLanguage="CSharp"><table><tr><th>C#</th></tr><tr><td><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">void</span> <span class="identifier">SetComponents</span>(
	<span class="nolink">IList</span>&lt;<a href="62ee3920-2a87-4fd1-d9e8-af9655d04456.htm">LoadComponent</a>&gt; <span class="parameter">components</span>
)</pre></td></tr></table></span><span codeLanguage="VisualBasicDeclaration"><table><tr><th>Visual Basic</th></tr><tr><td><pre xml:space="preserve"><span class="keyword">Public</span> <span class="keyword">Sub</span> <span class="identifier">SetComponents</span> ( _
	<span class="parameter">components</span> <span class="keyword">As</span> <span class="nolink">IList</span>(<span class="keyword">Of</span> <a href="62ee3920-2a87-4fd1-d9e8-af9655d04456.htm">LoadComponent</a>) _
)</pre></td></tr></table></span><span codeLanguage="ManagedCPlusPlus"><table><tr><th>Visual C++</th></tr><tr><td><pre xml:space="preserve"><span class="keyword">public</span>:
<span class="keyword">void</span> <span class="identifier">SetComponents</span>(
	<span class="nolink">IList</span>&lt;<a href="62ee3920-2a87-4fd1-d9e8-af9655d04456.htm">LoadComponent</a>^&gt;^ <span class="parameter">components</span>
)</pre></td></tr></table></span></div><div id="parameters"><h4 class="subHeading">Parameters</h4><dl paramName="components"><dt><span class="parameter">components</span></dt><dd>Type: <span class="nolink">System.Collections.Generic<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>IList</span><span class="languageSpecificText"><span class="cs">&lt;</span><span class="vb">(Of </span><span class="cpp">&lt;</span><span class="nu">(</span><span class="fs">&lt;'</span></span><a href="62ee3920-2a87-4fd1-d9e8-af9655d04456.htm">LoadComponent</a><span class="languageSpecificText"><span class="cs">&gt;</span><span class="vb">)</span><span class="cpp">&gt;</span><span class="nu">)</span><span class="fs">&gt;</span></span><br />
   A collection of the load combination components.
</dd></dl></div></div><h1 class="heading"><span onclick="ExpandCollapse(exampleToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(exampleToggle, event)" tabindex="0"><img id="exampleToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />Examples</span></h1><div id="exampleSection" class="section" name="collapseableSection" style=""><span id="cbc_1" x-lang="CSharp" codeLanguage="CSharp"><div class="highlight-title"><span class="highlight-copycode" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" tabindex="0" onmouseover="CopyCodeChangeIcon(this)" onmouseout="CopyCodeChangeIcon(this)" onclick="javascript:CopyColorizedCode(this.parentNode);"><img style="margin-right: 5px;" src="../icons/CopyCode.gif" />Copy</span>C#</div><div class="code"><pre xml:space="preserve"><span class="highlight-preprocessor">#region</span> Autodesk.Revit.DB.Structure.LoadCombination.SetUsageIds(System.Collections.Generic.IList{Autodesk.Revit.DB.ElementId})
LoadCombination CreateLoadCombinationLoadCaseLoadUsageLoadNatureAndLoadComponent(Document document)
{
    <span class="highlight-comment">// Create a new load combination</span>
    LoadCombination loadCombination = LoadCombination.Create(document, <span class="highlight-literal">"DL1 + RAIN1"</span>, LoadCombinationType.Combination, LoadCombinationState.Ultimate);
    <span class="highlight-keyword">if</span> (loadCombination == <span class="highlight-keyword">null</span>)
       <span class="highlight-keyword">throw</span> <span class="highlight-keyword">new</span> Exception(<span class="highlight-literal">"Create new load combination failed."</span>);

    <span class="highlight-comment">// Get all existing LoadCase</span>
    FilteredElementCollector collector = <span class="highlight-keyword">new</span> FilteredElementCollector(document);
    ICollection&lt;Element&gt; collection = collector.OfClass(<span class="highlight-keyword">typeof</span>(LoadCase)).ToElements();

    <span class="highlight-comment">// Find LoadCase "DL1"</span>
    LoadCase case1 = <span class="highlight-keyword">null</span>;
    <span class="highlight-keyword">foreach</span> (Element e <span class="highlight-keyword">in</span> collection)
    {
       LoadCase loadCase = e <span class="highlight-keyword">as</span> LoadCase;
       <span class="highlight-keyword">if</span> (loadCase.Name == <span class="highlight-literal">"DL1"</span>)
       {
          case1 = loadCase;
          <span class="highlight-keyword">break</span>;
       }
    }

    <span class="highlight-comment">// Get all existing LoadNature</span>
    collector = <span class="highlight-keyword">new</span> FilteredElementCollector(document);
    collection = collector.OfClass(<span class="highlight-keyword">typeof</span>(LoadNature)).ToElements();

    <span class="highlight-comment">// Find LoadNature "Dead"</span>
    LoadNature nature1 = <span class="highlight-keyword">null</span>;
    <span class="highlight-keyword">foreach</span> (Element e <span class="highlight-keyword">in</span> collection)
    {
       LoadNature loadNature = e <span class="highlight-keyword">as</span> LoadNature;
       <span class="highlight-keyword">if</span> (loadNature.Name == <span class="highlight-literal">"Dead"</span>)
       {
          nature1 = loadNature;
          <span class="highlight-keyword">break</span>;
       }
    }

    <span class="highlight-comment">// Create LoadNature "Dead" if not exist</span>
    <span class="highlight-keyword">if</span> (nature1 == <span class="highlight-keyword">null</span>)
       nature1 = LoadNature.Create(document, <span class="highlight-literal">"Dead"</span>);

    <span class="highlight-comment">// Create LoadCase "DL1" if not exist</span>
    <span class="highlight-keyword">if</span> (case1 == <span class="highlight-keyword">null</span>)
       case1 = LoadCase.Create(document, <span class="highlight-literal">"DL1"</span>, nature1.Id, LoadCaseCategory.Dead);

    <span class="highlight-comment">// Create LoadNature "Rain"</span>
    LoadNature nature2 = LoadNature.Create(document, <span class="highlight-literal">"Rain"</span>);
    <span class="highlight-keyword">if</span> (nature2 == <span class="highlight-keyword">null</span>)
       <span class="highlight-keyword">throw</span> <span class="highlight-keyword">new</span> Exception(<span class="highlight-literal">"Create new load nature failed."</span>);

    <span class="highlight-comment">// Create LoadCase "RAIN1"</span>
    LoadCase case2 = LoadCase.Create(document, <span class="highlight-literal">"RAIN1"</span>, nature2.Id, LoadCaseCategory.Snow);
    <span class="highlight-keyword">if</span> (case1 == <span class="highlight-keyword">null</span> || case2 == <span class="highlight-keyword">null</span>)
       <span class="highlight-keyword">throw</span> <span class="highlight-keyword">new</span> Exception(<span class="highlight-literal">"Create new load case failed."</span>);

    <span class="highlight-comment">// Create LoadComponents - they consist of LoadCases or nested LoadCombination and Factors</span>
    List&lt;LoadComponent&gt; components = <span class="highlight-keyword">new</span> List&lt;LoadComponent&gt;();
    components.Add(<span class="highlight-keyword">new</span> LoadComponent(case1.Id, <span class="highlight-number">2.0</span>));
    components.Add(<span class="highlight-keyword">new</span> LoadComponent(case2.Id, <span class="highlight-number">1.5</span>));

    <span class="highlight-comment">// Add components to combination</span>
    loadCombination.SetComponents(components);

    <span class="highlight-comment">// Create LoadUsages</span>
    LoadUsage usage1 = LoadUsage.Create(document, <span class="highlight-literal">"Frequent"</span>);
    LoadUsage usage2 = LoadUsage.Create(document, <span class="highlight-literal">"Rare"</span>);

    <span class="highlight-keyword">if</span> (usage1 == <span class="highlight-keyword">null</span> || usage2 == <span class="highlight-keyword">null</span>)
       <span class="highlight-keyword">throw</span> <span class="highlight-keyword">new</span> Exception(<span class="highlight-literal">"Create new load usage failed."</span>);

    <span class="highlight-comment">// Add load usages to combination</span>
    loadCombination.SetUsageIds(<span class="highlight-keyword">new</span> List&lt;ElementId&gt;() {usage1.Id, usage2.Id});

    <span class="highlight-comment">// Give the user some information</span>
    TaskDialog.Show(<span class="highlight-literal">"Revit"</span>, <span class="highlight-keyword">string</span>.Format(<span class="highlight-literal">"Load Combination ID='{0}' created successfully."</span>, loadCombination.Id.ToString()));

    <span class="highlight-keyword">return</span> loadCombination;
}
<span class="highlight-preprocessor">#endregion</span></pre></div></span><span id="cbc_2" x-lang="VisualBasic" codeLanguage="VisualBasic"><div class="highlight-title"><span class="highlight-copycode" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" tabindex="0" onmouseover="CopyCodeChangeIcon(this)" onmouseout="CopyCodeChangeIcon(this)" onclick="javascript:CopyColorizedCode(this.parentNode);"><img style="margin-right: 5px;" src="../icons/CopyCode.gif" />Copy</span>VB.NET</div><div class="code"><pre xml:space="preserve"><span class="highlight-preprocessor">#Region</span> <span class="highlight-literal">"Autodesk.Revit.DB.Structure.LoadCombination.SetUsageIds(System.Collections.Generic.IList{Autodesk.Revit.DB.ElementId})"</span>
        <span class="highlight-keyword">Private</span> <span class="highlight-keyword">Function</span> CreateLoadCombinationLoadCaseLoadUsageLoadNatureAndLoadComponent(document <span class="highlight-keyword">As</span> Document) <span class="highlight-keyword">As</span> LoadCombination
            <span class="highlight-comment">' Create a new load combination</span>
            <span class="highlight-keyword">Dim</span> loadCombination__1 <span class="highlight-keyword">As</span> LoadCombination = LoadCombination.Create(document, <span class="highlight-literal">"DL1 + RAIN1"</span>, LoadCombinationType.Combination, LoadCombinationState.Ultimate)
            <span class="highlight-keyword">If</span> loadCombination__1 <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
                <span class="highlight-keyword">Throw</span> <span class="highlight-keyword">New</span> Exception(<span class="highlight-literal">"Create new load combination failed."</span>)
            <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

            <span class="highlight-comment">' Get all existing LoadCase</span>
            <span class="highlight-keyword">Dim</span> collector <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> FilteredElementCollector(document)
            <span class="highlight-keyword">Dim</span> collection <span class="highlight-keyword">As</span> ICollection(<span class="highlight-keyword">Of</span> Element) = collector.OfClass(<span class="highlight-keyword">GetType</span>(LoadCase)).ToElements()

            <span class="highlight-comment">' Find LoadCase "DL1"</span>
            <span class="highlight-keyword">Dim</span> case1 <span class="highlight-keyword">As</span> LoadCase = <span class="highlight-keyword">Nothing</span>
            <span class="highlight-keyword">For</span> <span class="highlight-keyword">Each</span> e <span class="highlight-keyword">As</span> Element <span class="highlight-keyword">In</span> collection
                <span class="highlight-keyword">Dim</span> loadCase__2 <span class="highlight-keyword">As</span> LoadCase = <span class="highlight-keyword">TryCast</span>(e, LoadCase)
                <span class="highlight-keyword">If</span> loadCase__2.Name = <span class="highlight-literal">"DL1"</span> <span class="highlight-keyword">Then</span>
                    case1 = loadCase__2
                    <span class="highlight-keyword">Exit</span> <span class="highlight-keyword">For</span>
                <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
            <span class="highlight-keyword">Next</span>

            <span class="highlight-comment">' Get all existing LoadNature</span>
            collector = <span class="highlight-keyword">New</span> FilteredElementCollector(document)
            collection = collector.OfClass(<span class="highlight-keyword">GetType</span>(LoadNature)).ToElements()

            <span class="highlight-comment">' Find LoadNature "Dead"</span>
            <span class="highlight-keyword">Dim</span> nature1 <span class="highlight-keyword">As</span> LoadNature = <span class="highlight-keyword">Nothing</span>
            <span class="highlight-keyword">For</span> <span class="highlight-keyword">Each</span> e <span class="highlight-keyword">As</span> Element <span class="highlight-keyword">In</span> collection
                <span class="highlight-keyword">Dim</span> loadNature__3 <span class="highlight-keyword">As</span> LoadNature = <span class="highlight-keyword">TryCast</span>(e, LoadNature)
                <span class="highlight-keyword">If</span> loadNature__3.Name = <span class="highlight-literal">"Dead"</span> <span class="highlight-keyword">Then</span>
                    nature1 = loadNature__3
                    <span class="highlight-keyword">Exit</span> <span class="highlight-keyword">For</span>
                <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
            <span class="highlight-keyword">Next</span>

            <span class="highlight-comment">' Create LoadNature "Dead" if not exist</span>
            <span class="highlight-keyword">If</span> nature1 <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
                nature1 = LoadNature.Create(document, <span class="highlight-literal">"Dead"</span>)
            <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

            <span class="highlight-comment">' Create LoadCase "DL1" if not exist</span>
            <span class="highlight-keyword">If</span> case1 <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
                case1 = LoadCase.Create(document, <span class="highlight-literal">"DL1"</span>, nature1.Id, LoadCaseCategory.Dead)
            <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

            <span class="highlight-comment">' Create LoadNature "Rain"</span>
            <span class="highlight-keyword">Dim</span> nature2 <span class="highlight-keyword">As</span> LoadNature = LoadNature.Create(document, <span class="highlight-literal">"Rain"</span>)
            <span class="highlight-keyword">If</span> nature2 <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
                <span class="highlight-keyword">Throw</span> <span class="highlight-keyword">New</span> Exception(<span class="highlight-literal">"Create new load nature failed."</span>)
            <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

            <span class="highlight-comment">' Create LoadCase "RAIN1"</span>
            <span class="highlight-keyword">Dim</span> case2 <span class="highlight-keyword">As</span> LoadCase = LoadCase.Create(document, <span class="highlight-literal">"RAIN1"</span>, nature2.Id, LoadCaseCategory.Snow)
            <span class="highlight-keyword">If</span> case1 <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">OrElse</span> case2 <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
                <span class="highlight-keyword">Throw</span> <span class="highlight-keyword">New</span> Exception(<span class="highlight-literal">"Create new load case failed."</span>)
            <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

            <span class="highlight-comment">' Create LoadComponents - they consist of LoadCases or nested LoadCombination and Factors</span>
            <span class="highlight-keyword">Dim</span> components <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> List(<span class="highlight-keyword">Of</span> LoadComponent)()
            components.Add(<span class="highlight-keyword">New</span> LoadComponent(case1.Id, <span class="highlight-number">2.0</span>))
            components.Add(<span class="highlight-keyword">New</span> LoadComponent(case2.Id, <span class="highlight-number">1.5</span>))

            <span class="highlight-comment">' Add components to combination</span>
            loadCombination__1.SetComponents(components)

            <span class="highlight-comment">' Create LoadUsages</span>
            <span class="highlight-keyword">Dim</span> usage1 <span class="highlight-keyword">As</span> LoadUsage = LoadUsage.Create(document, <span class="highlight-literal">"Frequent"</span>)
            <span class="highlight-keyword">Dim</span> usage2 <span class="highlight-keyword">As</span> LoadUsage = LoadUsage.Create(document, <span class="highlight-literal">"Rare"</span>)

            <span class="highlight-keyword">If</span> usage1 <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">OrElse</span> usage2 <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
                <span class="highlight-keyword">Throw</span> <span class="highlight-keyword">New</span> Exception(<span class="highlight-literal">"Create new load usage failed."</span>)
            <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

            <span class="highlight-comment">' Add load usages to combination</span>
            loadCombination__1.SetUsageIds(<span class="highlight-keyword">New</span> List(<span class="highlight-keyword">Of</span> ElementId)() From {
                usage1.Id,
                usage2.Id
            })

            <span class="highlight-comment">' Give the user some information</span>
            TaskDialog.Show(<span class="highlight-literal">"Revit"</span>, <span class="highlight-keyword">String</span>.Format(<span class="highlight-comment">"Load Combination ID='{0}' created successfully."</span>, loadCombination__1.Id.ToString()))

            <span class="highlight-keyword">Return</span> loadCombination__1
        <span class="highlight-keyword">End</span> <span class="highlight-keyword">Function</span>
<span class="highlight-preprocessor">#End Region</span></pre></div></span></div><h1 class="heading"><span onclick="ExpandCollapse(exceptionsToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(exceptionsToggle, event)" tabindex="0"><img id="exceptionsToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />Exceptions</span></h1><div id="exceptionsSection" class="section" name="collapseableSection" style=""><div class="tableSection"><table width="100%" cellspacing="2" cellpadding="5" frame="lhs"><tr><th class="exceptionNameColumn">Exception</th><th class="exceptionConditionColumn">Condition</th></tr><tr><td><a href="631e1424-60f4-929b-4e52-dda9dcd26316.htm">Autodesk.Revit.Exceptions<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>ArgumentNullException</a></td><td>
   A non-optional argument was null
</td></tr></table></div></div><h1 class="heading"><span onclick="ExpandCollapse(seeAlsoToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(seeAlsoToggle, event)" tabindex="0"><img id="seeAlsoToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />See Also</span></h1><div id="seeAlsoSection" class="section" name="collapseableSection" style=""><div class="seeAlsoStyle"><a href="82891124-6fb9-e612-ca8c-6f4e32e2c121.htm">LoadCombination Class</a></div><div class="seeAlsoStyle"><a href="d586b341-f687-9d90-e96d-255806b7d4fc.htm">Autodesk.Revit.DB.Structure Namespace</a></div></div></div><div id="footer"><div class="footerLine"><img width="100%" height="3px" src="../icons/footer.gif" alt="Footer image" title="Footer image" /></div><A NAME="feedback"></A><span id="fb" class="feedbackcss"></span><p />Send comments on this topic to
        <a id="HT_MailLink" href="mailto:revitapifeedback%40autodesk.com?Subject=Revit 2024 API">Autodesk</a><script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        var HT_mailLinkText = HT_mailLink.innerHTML;
        HT_mailLink.href += ": " + document.title;
        HT_mailLink.innerHTML = HT_mailLinkText;
        </script></div></div></body></html>