<!DOCTYPE html>
<html>
<head>
<title>What's New</title>

<style>

h1,h2,h3, h4
{
font-family:"Trebuchet MS",sans-serif;
color:#27f;
}

h2, h4
{
color:#000;
}


p, tr, td, span, div, li
{
font-family:sans-serif;
font-size:10pt;
}
</style>

</head>

<body>
    <h1 style="color:#000" ;>Major changes and renovations to the Revit API</h1>
    <h1 id="RevitAPIChanges2024-APIChanges">API changes</h1>
    <h2>CefSharp upgrade</h2>
    <p>Revit and Autodesk add-ins use the CEFsharp library internally for several features. Some third-party add-ins do so as well.  Occasionally, when different versions of the library are used, it leads to instability issues for Revit. In order to avoid version conflicts, we are clarifying what CEFsharp version is being used, and loading it prior to all add-in initializations. </p>
    <ul>
        <li>
            In this version, Revit uses CEFsharp version <strong style="letter-spacing: 0.0px;"> <span class="js-issue-title markdown-title">v105.3.390</span> </strong>
        </li>
    </ul>
    <p>
        <br />
    </p>
    <h2>Upgrade ElementId Storage to 64-Bit.</h2>
    <p>The internal storage of Autodesk.Revit.DB.ElementId was updated from a 32-bit integer to a 64-bit size value (long long in C++/CLI,  long in C#). </p>
    <p>This resulted in changes to the ElementId class and members and some other tools.</p>
    <p>
        <br />
    </p>
    <table border="1" class="wrapped">
        <colgroup> <col /> <col /> <col /> </colgroup>
        <tbody>
            <tr>
                <th>Deprecated member(s)</th>
                <th>Replacement member(s)</th>
                <th>Notes</th>
            </tr>
            <tr>
                <td>Autodesk.Revit.DB.ElementId.IntegerValue </td>
                <td>Autodesk.Revit.DB.ElementId.Value</td>
                <td>
                    <p>IntegerValue will <strong>throw an exception</strong> if called on an ElementId whose value is high enough to need more than 32 bits to describe it. It is replaced by the new Value property that returns the full 64-bit value. </p>
                </td>
            </tr>
            <tr>
                <td>
                    <p>Autodesk.Revit.DB.ElementId()</p>
                </td>
                <td>Autodesk.Revit.DB.ElementId(System::Int64 id)</td>
                <td>Replaced by a constructor that takes the full 64-bit Value.</td>
            </tr>
        </tbody>
    </table>
    <p>The new property:</p>
    <ul>
        <li>Autodesk.Revit.DB.ElementId.Value</li>
    </ul>
    <p>allows users to provide the value of the ElementId as System::Int64 </p>
    <p>The new constructor:</p>
    <ul>
        <li>Autodesk.Revit.DB.ElementId(System.Int64 id)</li>
    </ul>
    <p>allows users to create an ElementId handle with the given Int64 id.</p>
    <h3>Changes to pre-existing enumerated types</h3>
    <p>To support storage/conversion of Autodesk.Revit.DB.BuiltInCategory as an Autodesk.Revit.DB.ElementId, the underlying type size of the enum was upgraded from 32-bit to 64-bit.</p>
    <ul>
        <li>This requires little to no <strong>code</strong> changes, however, code built against pre-2024 versions of the API may experience type cast and other type related exceptions when run against the 2024 versions of the API when working with the enum. </li>
        <li>In order to run successfully, code needs to be rebuilt against the Revit 2024 API.</li>
    </ul>
    <h3>Binary breaking change to the Autodesk.Revit.DB.BuiltInParameter enumeration.</h3>
    <p>To support storage/conversion of Autodesk.Revit.DB.BuiltInParameter as an Autodesk.Revit.DB.ElementId, the underlying type size of the enum was upgraded from 32-bit to 64-bit.</p>
    <ul>
        <li>This requires little to no <strong>code</strong> changes, however, code built against pre-2024 versions of the API may experience type cast and other type related exceptions when run against the 2024 versions of the API when working with the enum. </li>
        <li>In order to run successfully, code needs to be rebuilt against the Revit 2024 API.</li>
    </ul>
    <h3>Changes to other APIs</h3>
    <p>Support was added for System.Int64 types to Extensible Storage.</p>
    <ul>
        <li>Updated Autodesk.Revit.DB.ExtensibleStorage.SchemaBuilder.AddSimpleField() now accepts System.Int64 as a valid type for the fieldType.</li>
        <li>Updated Autodesk.Revit.DB.ExtensibleStorage.SchemaBuilder.AddMapField() now accepts System.Int64 as a valid type for the keyType and valueType. </li>
    </ul>
    <h3>
        <strong>Changes to decal properties</strong>
    </h3>
    <p>The decal asset properties named decalelementId and materialId are changed from type AssetPropertyInteger to AssetPropertyInt64.</p>
    <p>The code that would find these properties and then use them as AssetPropertyInteger/ AssetPropertyType.Integer type should be changed to use them as AssetPropertyInt64 / AssetPropertyType.Longlong type. For example:</p>
    <ul>
        <li>AssetPropertyInteger decalElementIdProp= (asset.FindByName("decalelementId") as AssetPropertyInteger);</li>
        <li>if (decalElementIdProp.Type == AssetPropertyType.Integer)</li>
    </ul>
    <p>should be changed to</p>
    <ul>
        <li>AssetPropertyInt64 decalElementIdProp= (asset.FindByName("decalelementId") as AssetPropertyInt64);</li>
        <li>if (decalElementIdProp.Type == AssetPropertyType.Longlong)</li>
    </ul>
    <p>
        <br />
    </p>
    <h2>Replacement of TopographySurface with Toposolid</h2>
    <p>TopographySurface and SiteSubRegion elements have been superseded as of Revit 2024 by a new element (Autodesk.Revit.DB.Architecture.Toposolid) and related classes. It is recommended that all newly created elements and modifications operate from the new Toposolid class. The TopographySurface element remains in the API for backwards compatibility and upgrade.</p>
    <p>As a result of this change, the following methods are marked as deprecated:</p>
    <table border="1" class="wrapped">
        <colgroup> <col /> <col /> <col /> </colgroup>
        <tbody>
            <tr>
                <th>Deprecated member(s)</th>
                <th>Replacement member(s)</th>
                <th>Notes</th>
            </tr>
            <tr>
                <td>TopographySurface.Create()</td>
                <td>Toposolid.Create() (from points or curve profiles)</td>
                <td>Toposolid.CreateFromTopographySurface() is also available to convert an older element to its more modern replacement.</td>
            </tr>
            <tr>
                <td>
                    <p>TopographySurface.AddPoints()</p>
                    <p>TopographySurface.DeletePoints()</p>
                    <p>TopographySurface.MovePoint()</p>
                    <p>TopographySurface.ChangePointElevation()</p>
                    <p>TopographySurface.ChangePointsElevation()</p>
                </td>
                <td>Toposolid.GetSlabShapeEditor() </td>
                <td>Use the SlabShapeEditor to query, add, modify and delete individual points</td>
            </tr>
            <tr>
                <td>SiteSubRegion.Create()</td>
                <td>Toposolid.CreateSubDivision()</td>
                <td>
                    <br />
                </td>
            </tr>
            <tr>
                <td>SiteSubRegion.SetBoundary()</td>
                <td>Edit the sketch of the subdivision Toposolid element using SketchEditScope</td>
                <td>
                    <br />
                </td>
            </tr>
        </tbody>
    </table>
    <h3>Point Visibility Settings</h3>
    <p>The new class:</p>
    <ul>
        <li>Autodesk.Revit.DB.SSEPointVisibilitySettings</li>
    </ul>
    <p>offers tools to control the point visibility for SlabShapeEditor based elements (floors, roofs and toposolids) on a per-category basis.</p>
    <p>
        <br />
    </p>
    <h2>Family API changes</h2>
    <h3>Placement of Level based instances in family documents</h3>
    <p>The API for placing new family instances for level based families was available in previous releases but could only be used in the project environment.</p>
    <p>The method:</p>
    <ul>
        <li>NewFamilyInstance(XYZ, FamilySymbol, Level, StructuralType)</li>
    </ul>
    <p>has been moved to the Autodesk.Revit.Creation.ItemFactoryBase class and can now be accessed in both family and project documents using the appropriate version.</p>
    <ul>
        <li>Autodesk.Revit.Creation.Document.NewFamilyInstance()</li>
        <li>Autodesk.Revit.Creation.FamilyItemFactory.NewFamilyInstance()</li>
    </ul>
    <h3>FamilyManager</h3>
    <table border="1" class="wrapped">
        <colgroup>
            <col />
            <col />
        </colgroup>
        <tbody>
            <tr>
                <th>Deprecated member(s)</th>
                <th>Replacement member(s)</th>
            </tr>
            <tr>
                <td>
                    <p>FamilyManager.AddParameter(ExternalDefinition, BuiltInParameterGroup, bool)</p>
                </td>
                <td>FamilyManager.AddParameter(ExternalDefinition, ForgeTypeId, bool)</td>
            </tr>
            <tr>
                <td>
                    <p>FamilyManager.AddParameter(string, BuiltInParameterGroup, Category, bool)</p>
                </td>
                <td>FamilyManager.AddParameter(String, ForgeTypeId, Category, bool)</td>
            </tr>
            <tr>
                <td>FamilyManager.ReplaceParameter(FamilyParameter, ExternalDefinition, BuiltInParameterGroup, bool)</td>
                <td>FamilyManager.ReplaceParameter(FamilyParameter, ExternalDefinition, ForgeTypeId, bool)</td>
            </tr>
            <tr>
                <td>FamilyManager.ReplaceParameter(FamilyParameter, string, BuiltInParameterGroup, bool)</td>
                <td>FamilyManager.ReplaceParameter(FamilyParameter, ExternalDefinition, ForgeTypeId, bool)</td>
            </tr>
            <tr>
                <td>FamilyManager.IsUserAssignableParameterGroup(BuiltInParameterGroup)</td>
                <td>FamilyManager.IsUserAssignableParameterGroup(ForgeTypeId)</td>
            </tr>
        </tbody>
    </table>
    <p>
        <br />
    </p>
    <h2>FamilyInstance API changes</h2>
    <p>The behavior of the following methods has changed. When the Phase does not apply to the FamilyInstance (e.g., FamilyInstance for annotation), they now return null instead of throwing InvalidOperationException. </p>
    <ul>
        <li>FamilyInstance.Room()</li>
        <li>FamilyInstance.Room(Phase)</li>
        <li>FamilyInstance.FromRoom</li>
        <li>FamilyInstance.FromRoom(Phase)</li>
        <li>FamilyInstance.ToRoom</li>
        <li>FamilyInstance.ToRoom(Phase)</li>
        <li>FamilyInstance.Space</li>
        <li>FamilyInstance.Space(Phase)</li>
    </ul>
    <p>
        <br />
    </p>
    <h2>Removal of Open ADSK workflow</h2>
    <p>Open ADSK functionality has been removed from Revit, including the associated API:</p>
    <ul>
        <li>Application.OpenBuildingComponentDocument()</li>
    </ul>
    <p>
        <br />
    </p>
    <h2>ImportExport API changes</h2>
    <p>The base class</p>
    <ul>
        <li>ATFExportOptions</li>
    </ul>
    <p>was renamed to BIMExportOptions to better reflect the purpose that it serves in the export options hierarchy. No functionality was changed.</p>
    <p>
        <br />
    </p>
    <h2>Copy/Paste  API changes</h2>
    <p>The Copy/Paste API has been improved to support several new scenarios in Sketch Edit Mode. Method signatures remain unchanged. </p>
    <p>The method:</p>
    <ul>
        <li>ElementTransformUtils.CopyElements(View, ICollection(ElementId), View, Transform, CopyPasteOptions)</li>
    </ul>
    <p>can now be used to copy sketch members from a sketch to the main document. </p>
    <p>Additional supported copy/paste cases:</p>
    <ul>
        <li>Copying within one Sketch - If there is an active sketch edit mode, you can now copy sketch members of the active sketch. The copied elements will be added to the active sketch.</li>
        <li>Copying between Sketches - Allows you to copy sketch members from one sketch to another. To do this, sketches must be parallel and the destination sketch must be in edit mode.</li>
        <li>Copying ModelCurves from the Document to a Sketch - Allows you to copy ModelCurves from the document to a sketch, if the sketch is in edit mode. To do this, the sketch plane must be parallel to the WorkPlane that ModelCurves are based on.</li>
    </ul>
    <h3>Additional validation for Copy and Mirror API</h3>
    <p>The methods:</p>
    <ul>
        <li>ElementTransformUtils.CopyElements()</li>
        <li>ElementTransformUtils.MirrorElements()</li>
    </ul>
    <p>have had additional validation added to handle copying within or between sketches. All copied elements must come from the same sketch. Also, to paste elements into a sketch, that sketch must be within sketch edit mode. </p>
    <p>Additionally, copying between two sketches is only allowed if the sketches are parallel. This validation has been applied to all copy methods.</p>
    <p>
        <br />
    </p>
    <h2>Correction of deprecation of Mass Level Data API</h2>
    <p>The class:</p>
    <ul>
        <li>Autodesk.Revit.DB.Analysis.MassLevelData</li>
    </ul>
    <p>was mistakenly marked for deprecation in Revit 2023, but the class is still applicable, so it is now no longer marked for deprecation.</p>
    <p>
        <br />
    </p>
    <h2>Schedule API changes</h2>
    <table border="1" class="wrapped">
        <colgroup> <col /> <col /> </colgroup>
        <tbody>
            <tr>
                <th>Deprecated member</th>
                <th>Replacement member</th>
            </tr>
            <tr>
                <td>ViewSchedule.ImageRowHeight</td>
                <td>ViewSchedule.RowHeight</td>
            </tr>
        </tbody>
    </table>
    <p>
        <br />
    </p>
    <h2>UI API Changes</h2>
    <p>The DefaultTheme property allowed users to read or write the theme type from .ini file. The new property CurrentTheme has been extended to have similar function, so deprecated DefaultTheme to avoid the functional overlap.</p>
    <table border="1" class="wrapped">
        <colgroup> <col /> <col /> </colgroup>
        <tbody>
            <tr>
                <th>Deprecated member</th>
                <th>Replacement member</th>
            </tr>
            <tr>
                <td>Autodesk.Revit.UI.UIThemeManager.DefaultTheme</td>
                <td>Autodesk.Revit.UI.UIThemeManager.CurrentTheme</td>
            </tr>
        </tbody>
    </table>
    <p>
        <br />
    </p>
    <h2>Structure API changes</h2>
    <p>The following members will now throw InvalidOperationException if the load is un-hosted:</p>
    <ul>
        <li>AreaLoad.SetLoops()</li>
        <li>LineLoad.SetPoints()</li>
        <li>PointLoad.Point { set; }</li>
    </ul>
    <p>
        <br />
    </p>
    <h2>Fabrication API changes</h2>
    <p>Some flow-related parameters are renamed.</p>
    <table border="1" class="wrapped">
        <tbody>
            <tr>
                <th>Original parameter name</th>
                <th>Renamed value</th>
                <th>Notes</th>
            </tr>
            <tr>
                <td>RBS_PIPE_RELATIVE_ROUGHNESS_PARAM </td>
                <td>RELATIVE_ROUGHNESS </td>
                <td>Covers all design and fabrication elements.</td>
            </tr>
            <tr>
                <td>RBS_PIPE_FRICTION_FACTOR_PARAM </td>
                <td>FRICTION_FACTOR</td>
                <td>Covers all design and fabrication elements.</td>
            </tr>
            <tr>
                <td>RBS_CURVETYPE_ROUGHNESS_PARAM </td>
                <td>DUCT_ROUGHNESS </td>
                <td>Covers design and fabrication ducts.</td>
            </tr>
            <tr>
                <td>RBS_PIPE_ROUGHNESS_PARAM</td>
                <td>PIPE_ROUGHNESS </td>
                <td>Covers design and fabrication pipes.</td>
            </tr>
        </tbody>
    </table>
    <p>
        <br />
    </p>
    <h2>DirectShape API changes</h2>
    <p>You can now provide an external tag to reference geometry. There is a change in behavior for the following methods: </p>
    <ul>
        <li>DirectShape.AddReferencePlane()</li>
        <li>DirectShape.AddReferencePoint()</li>
        <li>DirectShape.AddReferenceCurve()</li>
        <li>DirectShapeType.AddReferencePlane()</li>
        <li>DirectShapeType.AddReferencePoint()</li>
        <li>DirectShapeType.AddReferenceCurve()</li>
    </ul>
    <p>Methods which accepted an Autodesk.Revit.DB.DirectShapeReferenceOptions argument will now associate an external ID with the added reference object, if the options specify one. An exception is thrown if the DirectShape or DirectShapeType already has reference geometry with the specified external ID.</p>
    <p>
        <br />
    </p>
    <h2>Parameter API changes</h2>
    <h3>Element.Parameters</h3>
    <p>The method Element.GetOrderedParameters() is compiled as the current description but the order of the parameters have changed. The parameters are returned in the order in which they appear in the Revit UI within a given group but order of grouped is changed. It is not defined in documentation.</p>
    <h3>Shared Parameters</h3>
    <table border="1" class="wrapped">
        <colgroup>
            <col />
            <col />
        </colgroup>
        <tbody>
            <tr>
                <th scope="col">Deprecated member</th>
                <th scope="col">Replacement member</th>
            </tr>
            <tr>
                <td>LabelUtils.GetLabelFor(BuiltInParameterGroup)</td>
                <td>LabelUtils.GetLabelForGroup(ForgeTypeId)</td>
            </tr>
        </tbody>
    </table>
    <h3>Parameter Definition</h3>
    <table border="1" class="wrapped">
        <colgroup>
            <col />
            <col />
        </colgroup>
        <tbody>
            <tr>
                <th scope="col">Deprecated property</th>
                <th scope="col">Replacement member</th>
            </tr>
            <tr>
                <td>Definition.ParameterGroup</td>
                <td>Definition.GetGroupTypeId()</td>
            </tr>
        </tbody>
    </table>
    <h3>Parameter Binding</h3>
    <table border="1" class="wrapped">
        <colgroup>
            <col />
            <col />
        </colgroup>
        <tbody>
            <tr>
                <th scope="col">Deprecated member</th>
                <th scope="col">Replacement member</th>
            </tr>
            <tr>
                <td>BindingMap.Insert(Definition, Binding, BuiltInParameterGroup)</td>
                <td>BindingMap.Insert(Definition, Binding, ForgeTypeId)</td>
            </tr>
            <tr>
                <td>BindingMap.ReInsert(Definition, Binding, BuiltInParameterGroup)</td>
                <td>BindingMap.ReInsert(Definition, Binding, ForgeTypeId)</td>
            </tr>
        </tbody>
    </table>
    <h3>Parameter Utils</h3>
    <table border="1" class="wrapped">
        <colgroup>
            <col />
            <col />
        </colgroup>
        <tbody>
            <tr>
                <th scope="col">Deprecated member</th>
                <th scope="col">Replacement member</th>
            </tr>
            <tr>
                <td>ParameterUtils.GetParameterGroupTypeId(BuiltInParameterGroup)</td>
                <td>Please use members of the `GroupTypeId` class instead.</td>
            </tr>
            <tr>
                <td>ParameterUtils.GetBuiltInParameterGroup(ForgeTypeId)</td>
                <td>Please use members of the `GroupTypeId` class instead.</td>
            </tr>
        </tbody>
    </table>
    <p>
        <br />
    </p>
    <h2>Obsolete API removal</h2>
    <p>The following API members and classes which had previously been marked Deprecated have been removed in this release. Consult the API documentation from prior releases for information on the replacements to use:</p>
    <h3>Classes</h3>
    <ul>
        <li>Analysis.MassGBXMLExportOptions</li>
        <li>Analysis.MassZone</li>
        <li>Analysis.MassEnergyAnalyticalModel</li>
    </ul>
    <h3>Methods</h3>
    <ul>
        <li>STLExportOptions.SetTessellationSettings(STLExportResolution)</li>
        <li>Analysis.EnergyDataSetting.EnableConceptualEnergyAnalyticalMod()</li>
        <li>Analysis.EnergyDataSetting.SetCreateAnalyticalModel()</li>
        <li>Mechanical.ZoneEquipment.Create(Document, AnalyticalSystemDomain, String)</li>
        <li>GroupNode.GetSymbolId()</li>
        <li>Rebar.IsSolidInView()</li>
        <li>Rebar.SetSolidInView()</li>
        <li>AreaReinforcement.IsSolidInView()</li>
        <li>AreaReinforcement.SetSolidInView()</li>
        <li>PathReinforcement.IsSolidInView()</li>
        <li>PathReinforcement.SetSolidInView()</li>
        <li>RebarInSystem.IsSolidInView()</li>
        <li>RebarInSystem.SetSolidInView()</li>
        <li>FabricSheet.IsSolidInView()</li>
        <li>FabricSheet.SetSolidInView()</li>
        <li>RebarContainer.IsSolidInView()</li>
        <li>RebarContainer.SetSolidInView()</li>
    </ul>
    <h3>Properties</h3>
    <ul>
        <li>EnergyAnalysisSpace.AnalyticalVolume</li>
        <li>EnergyAnalysisSpace.InnerVolume</li>
        <li>GeometryInstance.Symbol</li>
    </ul>
    <h3>Enums</h3>
    <ul>
        <li>STLExportResolution</li>
        <li>Analysis.AnalysisMode.ConceptualMasses</li>
    </ul>
    <h1>
        <br />API Additions
    </h1>
    <p>
        <br />
    </p>
    <h2>Element Iteration API additions</h2>
    <p>The new constructor:</p>
    <ul>
        <li>FilteredElementCollector(Document hostDocument, ElementId viewId, ElementId linkId)</li>
    </ul>
    <p>creates a FilteredElementCollector set to iterate the visible elements in a Revit link instance in a certain view of the host document. Elements returned by iteration of this collector will be from the Revit link instance's document.</p>
    <p>
        <br />
    </p>
    <h2>Filled Region API additions</h2>
    <p>Added functionality that allows users to create either a masking region on a sketch plane in a 3D model family or a view specific masking region from the given boundaries.</p>
    <p>The new methods:</p>
    <ul>
        <li>FilledRegion.CreateMaskingRegion(Document, SketchPlane, IList&lt;CurveLoop&gt;)</li>
        <li>FilledRegion.CreateMaskingRegion(Document, ElementId, IList&lt;CurveLoop&gt;)</li>
    </ul>
    <p>
        <br />
    </p>
    <h2>Analysis API additions</h2>
    <h3>Analytical surfaces in the energy model</h3>
    <p>Several new classes were added in the Autodesk.Revit.DB.Analysis namespace that allows users to retrieve thermal properties and material layers for analytical constructions and window types associated with analytical surfaces in the energy model. All thermal properties on EnergyAnalysisConstruction and EnergyAnalysisMaterial should be read-only.</p>
    <p>The new classes:</p>
    <ul>
        <li>EnergyAnalysisZone - Represents the analytical zone.</li>
        <li>EnergyAnalysisConstruction - Represent an analytical construction as a composite of layered materials.</li>
        <li>EnergyAnalysisWindowType - Represent an analytical construction containing window type data.</li>
        <li>EnergyAnalysisMaterial - Represents description of a material with thermal properties in a composite construction.</li>
    </ul>
    <p>The new values available for energy analysis enumerated types:</p>
    <ul>
        <li>gbXMLSurfaceType.ExposedFloor - New type of surface that can be assigned in the energy analytical model and gbXML output.</li>
        <li>ConstructionType.UndergroundWall - New type of construction that can be assigned to a portion of the energy analytical model.</li>
    </ul>
    <h3>Energy Analysis Surface</h3>
    <p>The new properties:</p>
    <ul>
        <li>EnergyAnalysisSurface.OriginatingElementId </li>
        <li>EnergyAnalysisSurface.OriginatingElementName</li>
    </ul>
    <p>allows users to identify the originating Revit element's id and name.</p>
    <p>The new method:</p>
    <ul>
        <li>EnergyAnalysisSurface.GetConstruction() </li>
    </ul>
    <p>allows users to get the analytic construction this surface is associated with.</p>
    <h3>Energy Analysis Opening</h3>
    <p>The new properties:</p>
    <ul>
        <li>EnergyAnalysisOpening.OriginatingElementId</li>
        <li>EnergyAnalysisOpening.OriginatingElementName</li>
    </ul>
    <p>allows users to identify the originating Revit element's id and name.</p>
    <p>The new methods:</p>
    <ul>
        <li>EnergyAnalysisOpening.GetConstruction() - Allows users to get the analytical construction this opening is associated with. </li>
        <li>EnergyAnalysisOpening.GetWindowType() - Allows users to get the analytical window type this opening is associated with.</li>
    </ul>
    <h3>Energy Analysis Construction</h3>
    <p>The new property in EnergyAnalysisConstruction indicates if this originated from a schematic or analytical construction.</p>
    <ul>
        <li>EnergyAnalysisConstruction.IsSchematic</li>
    </ul>
    <h3>EnergyDataSettings</h3>
    <p>The new property:</p>
    <ul>
        <li>Autodesk.Revit.DB.Analysis.EnergyDataSettings.UseCurrentViewOnly </li>
    </ul>
    <p>returns true only if elements visible in the currently active view are used for generation of Energy Model, false otherwise. This setting is ignored if the currently active view is not a 3D view or AnalysisType is RoomsOrSpaces.</p>
    <p>
        <br />
    </p>
    <p>
        <strong>MEP Duct/Pipe pressure loss calculations</strong>
    </p>
    <p>Users can now access the flow/pressure values and use them to create customized reports and tools. This includes all design and fabrication flow/pressure calculations.</p>
    <p>The new classes:</p>
    <ul>
        <li>Autodesk.Revit.DB.Analysis.MEPAnalyticalModelData</li>
        <li>Autodesk.Revit.DB.Analysis.MEPAnalyticalSegment</li>
        <li>Autodesk.Revit.DB.Analysis.MEPAnalyticalNode</li>
        <li>Autodesk.Revit.DB.Analysis.MEPNetworkSegmentId</li>
        <li>Autodesk.Revit.DB.Analysis.MEPNetworkSegmentData</li>
        <li>Autodesk.Revit.DB.Analysis.MEPNetworkIterator </li>
    </ul>
    <p>
        <br />
    </p>
    <h2>Structural Analytical Model API additions</h2>
    <h3>Analytical to Physical Associations </h3>
    <p>The following new methods in AnalyticalToPhysicalAssociationManager allows users to distinguish if its an analytical or a physical element. </p>
    <ul>
        <li>Autodesk.Revit.DB.Structure.AnalyticalToPhysicalAssociationManager.IsAnalyticalElement()</li>
        <li>Autodesk.Revit.DB.Structure.AnalyticalToPhysicalAssociationManager.IsPhysicalElement()</li>
    </ul>
    <p>The following new methods in AnalyticalToPhysicalAssociationManager allows users to add and retrieve an association between a group of analytical elements and a group of physical elements.</p>
    <ul>
        <li>Autodesk.Revit.DB.Structure.AnalyticalToPhysicalAssociationManager.AddAssociation() </li>
        <li>Autodesk.Revit.DB.Structure.AnalyticalToPhysicalAssociationManager.GetAssociatedElementIds()</li>
    </ul>
    <p>The new property: </p>
    <ul>
        <li>Autodesk.Revit.DB.Structure.AnalyticalToPhysicalAssociationManager.EnableAssistedAssociation</li>
    </ul>
    <p>allows users to indicate if associations between Analytical and Physical Elements should be created automatically.</p>
    <h3>Structural Analytical Model Elements</h3>
    <p>The new method:</p>
    <ul>
        <li>Autodesk.Revit.DB.Structure.AnalyticalPanel.Create(Document, Curve profile, XYZ normal)</li>
    </ul>
    <p>creates and returns new AnalyticalPanel from a curve and an extrusion direction.</p>
    <p>
        <br />
    </p>
    <h2>3D View API additions</h2>
    <p>The new enum:</p>
    <ul>
        <li>Autodesk.Revit.DB.BackClippingParam</li>
    </ul>
    <p>corresponds to the values of the parameters Autodesk.Revit.DB.BuiltInParameter.VIEW_BACK_CLIPPING and VIEWER_BOUND_FAR_CLIPPING.</p>
    <p>
        <br />
    </p>
    <h2>DirectShape API additions</h2>
    <p>These additions enhance the ability to add reference geometry and externally tagged geometry. </p>
    <h3>DirectShapeType</h3>
    <p>Several new methods in Autodesk.Revit.DB.DirectShapeType allow removing or tagging references: </p>
    <ul>
        <li>DirectShapeType.Has/GetExternallyTaggedReference() </li>
        <li>DirectShapeType.RemoveReferenceObject(Autodesk.Revit.DB.ExternalGeometryId externalGeometryId) - Allows users to remove any reference object associated with the provided ExternalGeometryId from the DirectShapeType. Nothing is done if no reference object has the given external ID or if the external ID is an empty string. Note: This overloads the existing method Autodesk.Revit.DB.DirectShapeType.RemoveReferenceObject(string) to remove a reference by name. (Names are non-unique).</li>
        <li>DirectShapeType.IsValidUsage()</li>
    </ul>
    <h3>DirectShapeReferenceOptions</h3>
    <p>Three new methods have been added to Autodesk.Revit.DB.DirectShapeReferenceOptions:</p>
    <ul>
        <li>DirectShapeReferenceOptions.GetExternalGeometryId() </li>
        <li>DirectShapeReferenceOptions.SetExternalGeometryId() </li>
        <li>DirectShapeReferenceOptions.IsValidExternalGeometryId() </li>
    </ul>
    <h3>DirectShape</h3>
    <p>Similar to DirectShapeType, Autodesk.Revit.DB.DirectShape has the following new methods: </p>
    <ul>
        <li>DirectShape.Has/GetExternallyTaggedReference() </li>
        <li>DirectShape.RemoveReferenceObject() </li>
        <li>DirectShape.IsValidUsage()</li>
    </ul>
    <p>
        <br />
    </p>
    <h2>Detailing API additions</h2>
    <h3>Detail element draw order</h3>
    <p>The new method:</p>
    <ul>
        <li>DetailElementOrderUtils.GetDrawOrderForDetails(DBView, ICollection&lt;ElementId&gt;)</li>
    </ul>
    <p>allows you to understand the sorting of the given element ids by their detail draw order in the provided view.</p>
    <p>
        <br />
    </p>
    <h2>Selection API additions</h2>
    <h3>UI Application</h3>
    <p>The new class:</p>
    <ul>
        <li>
            <p>Autodesk.Revit.UI.Events.ThemeChangedEventArgs </p>
        </li>
    </ul>
    <p>represents the event arguments used by the ThemeChanged event.</p>
    <p>The new event:</p>
    <ul>
        <li>Autodesk.Revit.UI.UIApplication.ThemeChanged</li>
    </ul>
    <p>subscribe to the new new event ThemeChanged to be notified after the theme was changed. This event is raised after the theme was changed.</p>
    <p>
        <br />
    </p>
    <h2>3D Shape API additions</h2>
    <p>The new method:</p>
    <ul>
        <li>Autodesk.Revit.DB.Mesh.ComputeSurfaceArea()</li>
    </ul>
    <p>allows users to compute and returns the surface area of the mesh. The surface area is the sum of the areas of the constituent facets of the mesh.</p>
    <p>
        <br />
    </p>
    <h2>Reinforcement API additions</h2>
    <h3>Rebar</h3>
    <p>Added the ability to control the behavior of the free form rebar when pressing space.</p>
    <p>The new members:</p>
    <ul>
        <li>RebarFreeFormAccessor.CycleCounter()</li>
        <li>RebarUpdateCurvesData.CycleCounterChanged()</li>
        <li>RebarUpdateCurvesData.GetCycleCounter()</li>
        <li>RebarUpdateCurvesData.SetCycleCounter()</li>
    </ul>
    <p>Added the ability to set different orientation methods for an Aligned Free Form Rebar.</p>
    <p>The new members:</p>
    <ul>
        <li>RebarFreeFormAccessor.hasValidAlignedServer()</li>
        <li>RebarFreeFormAccessor.AlignedFreeFormSetOrientationOptions()</li>
        <li>
            RebarFreeFormAccessor.AlignedFreeFormSetOrientationOptions – The enum has the following values<ul>
                <li>AlignedToDistributionPath</li>
                <li>ParallelToFace</li>
                <li>PerpendicularToFace</li>
            </ul>
        </li>
    </ul>
    <p>Added the ability to identify the direction for a positive offset value for a Rebar-to-Rebar constraint.</p>
    <p>The new method:</p>
    <ul>
        <li>RebarConstraint.GetPositiveOffsetDirectionForToOtherRebarConstraint()</li>
    </ul>
    <p>
        <br />
    </p>
    <h2>Parameter API additions</h2>
    <p>The new methods in Element supports getting all parameters of an element or specified parameters of an element in one call.</p>
    <ul>
        <li>Element.EvaluateAllParameterValues()</li>
        <li>Element.EvaluateParameterValues()</li>
    </ul>
    <p>The new class:</p>
    <ul>
        <li>EvaluatedParameter</li>
    </ul>
    <p>represents the type and value of a parameter returned from methods that extract multiple parameters and their values at once.  The new members below provide access to the information about the extracted parameter &amp; value:</p>
    <ul>
        <li>EvaluatedParameter.Definition</li>
        <li>EvaluatedParameter.Value</li>
        <li>EvaluatedParameter.StorageType</li>
        <li>EvaluatedParameter.HasValue</li>
    </ul>
    <p>
        <br />
    </p>
    <h2>Slab API additions</h2>
    <p>The new enum:</p>
    <ul>
        <li>Autodesk.Revit.DB.CurvedEdgeConditionParam - Allows you to understand/set the HOST_SSE_CURVED_EDGE_CONDITION_PARAM built-in parameter's value.</li>
    </ul>
    <p>
        <br />
    </p>
    <h2>Groups API additions</h2>
    <h3>Group Load Options</h3>
    <p>The new class: </p>
    <ul>
        <li>Autodesk.Revit.DB.GroupLoadOptions</li>
    </ul>
    <p>provides options for loading the Revit group from the file.</p>
    <p> The new methods:</p>
    <ul>
        <li>GroupLoadOptions.SetDuplicateTypeNamesHandler(IDuplicateTypeNamesHandler) </li>
        <li>GroupLoadOptions.GetDuplicateTypeNamesHandler()</li>
    </ul>
    <p>allows you to set or retrieve a duplicate type names handler. If this value is not set, the default handler is used. It returns null if none is set. </p>
    <p>It has the following properties:</p>
    <ul>
        <li>GroupLoadOptions.ReplaceDuplicatedGroups - If there are groups with the same names in source and destination documents set this property to true to replace existing groups, otherwise the operation will be canceled. The default value is false.</li>
        <li>GroupLoadOptions.IncludeGrids - Returns true if grids should be brought in from the input file, false otherwise.</li>
        <li>GroupLoadOptions.IncludeLevels - Returns true if levels should be brought in from the input file, false otherwise.</li>
        <li>GroupLoadOptions.IncludeAttachedDetails - Returns true if attached detail groups should be included, false otherwise.</li>
    </ul>
    <h3>Group Type</h3>
    <p>The new method in GroupType allows the user to replace the group with the contents of the input file.</p>
    <ul>
        <li>GroupType.LoadFrom(string, GroupLoadOptions)</li>
    </ul>
    <p>
        <br />
    </p>
    <h2>Link Visibility/Graphic Override API additions</h2>
    <p>The new class:</p>
    <ul>
        <li>Autodesk.Revit.DB.RevitLinkGraphicsSettings</li>
    </ul>
    <p>represents settings to override display of Revit link in a view.</p>
    <p>The new methods:</p>
    <ul>
        <li>Revit.DB.View.GetLinkOverrides(ElementId) - Allows users to return settings representing graphic overrides for the input element Id in the view. Accepts ElementId of a RevitLinkType or RevitLinkInstance</li>
        <li>Revit.DB.View.SetLinkOverrides(ElementId, RevitLinkGraphicsSettings) - Allows users to set graphic overrides of a RevitLinkType or RevitLinkInstance in the view.</li>
        <li>Revit.DB.View.RemoveLinkOverrides(ElementId) -  Allows users to delete graphical link overrides in the current view. Accepts ElementId of a RevitLinkType or RevitLinkInstance</li>
    </ul>
    <p>
        <br />It has the following properties:
    </p>
    <ul>
        <li>Revit.DB.RevitLinkGraphicsSettings.LinkedViewId - The id of the linked view associated with RevitLinkGraphicsSettings or the invalid element Id if no view is selected.</li>
        <li>Revit.DB.RevitLinkGraphicsSettings.LinkVisibilityType - The visibility type of RevitLinkGraphicsSettings.</li>
    </ul>
    <p>
        <br />
    </p>
    <h2>Purge unused elements API additions</h2>
    <p>The new methods in Autodesk.Revit.DB.Document allows users to get unused elements. These methods return unused element Ids that are available in the Purge Unused window in Revit.</p>
    <ul>
        <li>Autodesk.Revit.DB.Document.GetUnusedElements() - Returns the list of element Ids that are not used and can be purged from the document.</li>
        <li>Autodesk.Revit.DB.Document.GetAllUnusedElements() - Returns the list of unused element Ids, including those elements that Revit may not allow to delete the last instance of.</li>
    </ul>
    <p>Regarding the difference between the two functions - For certain categories, you must leave at least one type in the document, even if it is not "in use." GetUnusedElements() will reserve one for you if applicable. GetAllUnusedElements() returns the full list and allows you to choose what to keep.</p>
    <p>
        <br />
    </p>
    <h2>Parameter API additions </h2>
    <h3>ParameterDownloadOptions</h3>
    <p>The new class:</p>
    <ul>
        <li>Autodesk.Revit.DB.ParameterDownloadOptions</li>
    </ul>
    <p>is an option class used for downloading parameters from the Parameters Service.</p>
    <p>It has the following properties:</p>
    <ul>
        <li>ParameterDownloadOptions.Categories - Categories for binding.</li>
        <li>ParameterDownloadOptions.IsInstance - Returns true if binding to element instances, false if binding to element types.</li>
        <li>ParameterDownloadOptions.Visible - Returns true if the parameter is visible to the user, false if it is hidden and accessible only via the API.</li>
        <li>ParameterDownloadOptions.GroupTypeId - Properties palette group identifier.</li>
    </ul>
    <h3>ParameterUtils </h3>
    <p>The new methods:</p>
    <ul>
        <li>ParameterUtils.DownloadParameter() - Allows users to create a shared parameter element in the given document according to a parameter definition downloaded from the Parameters Service.</li>
        <li>ParameterUtils.DownloadParameterOptions() - Allows users to retrieve the requested parameter's category, visibility and group bindings from the Forge Schema Service.</li>
        <li>ParameterUtils.DownloadCompanyName() - Allows users to download and record the name of the given parameter schema identifier's owning account in the given document.</li>
    </ul>
    <h2>Electrical Analytical API additions</h2>
    <h3>
        <strong>ElectricalAnalyticalLoadSet</strong>
    </h3>
    <p>The new class:</p>
    <ul>
        <li>Autodesk.Revit.DB.Electrical.ElectricalAnalyticalLoadSet</li>
    </ul>
    <p>It has the following methods:</p>
    <ul>
        <li>ElectricalAnalyticalLoadSet.Create() - Allows users to create an electrical analytical load set.</li>
        <li>ElectricalAnalyticalLoadSet.GetLoadIds() - Allows users to fetch the equipment load ids in the LoadSet.</li>
    </ul>
    <p>It has the following properties:</p>
    <ul>
        <li>ElectricalAnalyticalLoadSet.QuantityOnStandBy - Represents the number of equipment loads that are not operational at any time.</li>
        <li>ElectricalAnalyticalLoadSet.TotalQuantity - Represents the total count of the equipment loads in the LoadSet.</li>
    </ul>
    <h3>AreaBasedLoadData</h3>
    <p>The new methods: </p>
    <ul>
        <li>AreaBasedLoadData.ConnectToUpstreamNode() - Allows users to connect to an upstream electrical analytical node.</li>
        <li>AreaBasedLoadData.DisconnectFromUpstreamNode() - Allows users to disconnect from an upstream electrical analytical node.</li>
        <li>AreaBasedLoadData.CanDisconnectFromUpstreamNode() - Verifies that the area based load can disconnect from the upstream electrical analytical node. If the area based load hasn't an upstream node, it can't disconnect from the upstream node.</li>
        <li>AreaBasedLoadData.CanConnectToUpstreamNode() - Verifies that the area based load can connect to the upstream electrical analytical node. If the area based load already has an upstream node or the upstream node is full of downstream nodes, the area based load can't connect to the upstream node.</li>
        <li>AreaBasedLoadData.GetUpstreamNodeId() - Allows users to get the upstream electrical analytical node id. </li>
    </ul>
    <h3>PointLoadData</h3>
    <p>The new property:</p>
    <ul>
        <li>Autodesk.Revit.DB.Electrical.AnalyticalEquipmentLoadData.LoadSet - Represents the electrical analytical load set of the analytical equipment load.</li>
    </ul>
    <h3>ElectricalAnalyticalNode</h3>
    <p>The new method:</p>
    <ul>
        <li>Autodesk.Revit.DB.Electrical.ElectricalAnalyticalNode.GetAllDownstreamLoadIds() - Allows users to get all the descendant Electrical Analytical Load ids of the node.</li>
    </ul>
    <h3>ElectricalLoadClassification</h3>
    <p>The new property</p>
    <ul>
        <li>Autodesk.Revit.DB.Electrical.ElectricalLoadClassification.Other - Indicates if it is the default load classification, and its name is Other.</li>
    </ul>
    <p>
        <br />
    </p>
    <h2>Structural API additions</h2>
    <h3>Bending details in view</h3>
    <p>Added functionality that allows users to create, move, rotate bending details and to get/set the rebars that they represent. The class RebarBendingDetailType represents the type for the bending detail, allowing users to set its appearance.</p>
    <p>The new classes:</p>
    <ul>
        <li>Autodesk.Revit.DB.Structure.RebarBendingDetailType</li>
        <li>Autodesk.Revit.DB.Structure.RebarBendingDetail</li>
    </ul>
    <p>The new enums:</p>
    <ul>
        <li>Autodesk.Revit.DB.Structure.BendingDetailTypeMultipleValuesIndicatorOptions</li>
    </ul>
    <p>allows users to describe how the parameters with multiple values will be represented. It has the following values:</p>
    <ul>
        <li>FromOneBar - Obtain parameter value from only one bar.</li>
        <li>MinimumMaximum - The values will be obtained from all included bars in the rebar set and it will be shown in a form like minimumValue...maximumValue.</li>
    </ul>
    <ul>
        <li>
            <p>Autodesk.Revit.DB.Structure.BendingDetailLevelOfDetail</p>
        </li>
    </ul>
    <p>allows users to describe the level of detail in which the Bending Detail will be represented. It has the following values:</p>
    <ul>
        <li>ByView - The level detail is taken from the view.</li>
        <li>Coarse - Centerline representation of the Bending Detail.</li>
        <li>Fine - Ribbon representation of Bending Detail.</li>
    </ul>
    <p>The new method:</p>
    <ul>
        <li>Autodesk.Revit.DB.IndependentTag.HasTagBehavior()</li>
    </ul>
    <p>allows users to check if the IndependentTag has a tag behavior.</p>
    <h3>Path Alignment Options for Free Form Rebar API</h3>
    <p>The new Enum Autodesk.Revit.DB.Structure.AlignedFreeFormSetOrientationOptions provides orientation options for Aligned Free Form Rebar set. It has the following values.</p>
    <ul>
        <li>AlignedToDistributionPath - Cutting planes are perpendicular to the distribution path.</li>
        <li>Vertical - Cutting planes are oriented vertically, X or Y vector being Z axis.</li>
        <li>ParallelToFace - Cutting planes are parallel to a selected planar face.</li>
        <li>PerpendicularToFace - Cutting planes are oriented perpendicular to a selected planar face, X or Y vector being the face normal.</li>
    </ul>
    <h3>LoadBase</h3>
    <p>The new methods:</p>
    <ul>
        <li>LoadBase.IsConstrainedOnHost() - Represents if the load is constrained to host or not.</li>
        <li>LoadBase.RemoveHostConstraint() - Allows users to remove constraint from host for this load.</li>
    </ul>
    <h3>LineLoad</h3>
    <p>Three new methods support custom line loads:</p>
    <ul>
        <li>LineLoad.Create()</li>
        <li>LineLoad.IsCurveInsideHostBoundaries() - Allows users to determine if the curve is inside panel's boundaries or if the curve is on the member's curve.</li>
        <li>LineLoad.SetCurve()</li>
    </ul>
    <h3>AreaLoad</h3>
    <p>Several new methods support custom area loads: </p>
    <ul>
        <li>AreaLoad.Create(Document, hostElemId, IList&lt;CurveLoop&gt;, forceVector, AreaLoadType symbol)</li>
        <li>AreaLoad.Create(Document, hostElemId, IList&lt;CurveLoop&gt;, IList&lt;XYZ&gt; forceVectors, IList&lt;int&gt; refPointCurveIndexes, IList&lt;int&gt; refPointCurveEnds, AreaLoadType symbol)</li>
        <li>AreaLoad.AreCurveLoopsValid()</li>
        <li>AreaLoad.IsCurveLoopsInsideHostBoundaries() - Allows users to check if contour loops are inside host boundaries.</li>
    </ul>
    <h3>PointLoad</h3>
    <p>Two new methods support custom point loads:</p>
    <ul>
        <li>PointLoad.Create()</li>
        <li>PointLoad.IsPointInsideHostBoundaries() - Allows users to indicate if the point is inside panel boundaries or is on the member's curve.</li>
    </ul>
    <h3>Loads Display Scaling</h3>
    <p>The new methods:</p>
    <ul>
        <li>Autodesk.Revit.DB.Structure.StructuralSettings.GetLoadForceVectorReprLine()</li>
    </ul>
    <p>returns the representative line of the load force vector.</p>
    <ul>
        <li>
            <p>Autodesk.Revit.DB.Structure.StructuralSettings.SetValuesForLoadsDisplayScaling() </p>
        </li>
    </ul>
    <p>allows users to set values for loads display scaling by providing two load forces and their corresponding length of the representative lines in internal units.</p>
    <p>The new property:</p>
    <ul>
        <li>Autodesk.Revit.DB.Structure.StructuralSettings.UseLoadsDisplayScaling</li>
    </ul>
    <p>represents whether to use loads display scaling. If disabled then loads are displayed according to force scale type parameters.</p>
    <h3>Schedule Custom Field</h3>
    <p>We now provide a new type of field in schedule. For this field type the value for each row is computed based on the (sub)elements that are grouped on that row and can have a graphic representation when the schedule is placed on a sheet.</p>
    <p>The new class:</p>
    <ul>
        <li> Autodesk.Revit.DB.Structure.BendingDetailCustomFieldProperties </li>
    </ul>
    <p>represents the properties of a Bending Detail Custom Field.</p>
    <p>It has many properties. (Please see the RevitAPI.chm for full documentation.) Some notable ones include: </p>
    <ul>
        <li>SegmentLengthDimensionsEnabled - Allows users to identify if any segment length dimensions will be shown or not.</li>
        <li>AngularDimensionsEnabled - Allows users to identify if any angular dimensions will be shown or not.</li>
        <li>BendDiameterDimensionsEnabled - Allows users to identify if any radial or diameter dimensions will be shown or not.</li>
        <li>ParametersDisplayOption - Allows users to identify how the parameters will be represented.</li>
    </ul>
    <p>The new enums in BendingDetailCustomFieldProperties: </p>
    <ul>
        <li>BendingDetailBendDiameterDimensionType - Describes the dimension type for bend diameter. </li>
        <li>BendingDetailSegmentLengthsDisplayOptions - Describes if the segment lengths are represented using dimensions or just as text. </li>
        <li>BendingDetailAngularDimensionsDisplayOptions - Describes the angular dimensions display options. </li>
        <li>BendingDetailAngularDimensionsMeasurementOptions - Describes the angular dimension measurement options. </li>
        <li>BendingDetailDisplayParametersOptions - Describes how the parameters will be represented.</li>
        <li>BendingDetailFor3DShapesOptions - Describes how the Bending Detail will be represented for 3D shapes. </li>
        <li>BendingDetailSegmentsRepresentation - Describes how the Bending Detail will represent the bar segments. </li>
        <li>BendingDetailCustomFieldMultipleValuesIndicatorOptions - Describes how the parameters with multiple values will be represented. </li>
    </ul>
    <p>
        <br />
    </p>
    <h2>FilledRegion API additions</h2>
    <p>Several new methods have been added to Autodesk.Revit.DB.FilledRegionType:</p>
    <ul>
        <li>Autodesk.Revit.DB.FilledRegionType.isValidMasking() - Allows users to validate if the input can be assigned to a FilledRegionType.</li>
        <li>Autodesk.Revit.DB.FilledRegionType.isValidFillPatternId() - Allows users to check if the input elementId is a FillPatternElement.</li>
        <li>Autodesk.Revit.DB.FilledRegionType.isValidForegroundPatternId() - Allows users to check if the input elementId is a valid FillPatternElement for a foreground pattern.</li>
        <li>Autodesk.Revit.DB.FilledRegionType.isValidBackgroundPatternId() - Allows users to check if the input elementId is a valid FillPatternElement for a background pattern.</li>
        <li>Autodesk.Revit.DB.FilledRegionType.isValidSolidFillPatternId() - Allows users to validate the solidFill is a valid FillPatternElement for the FilledRegionType.</li>
    </ul>
    <p>
        <br />
    </p>
    <h2>Fabrication API additions</h2>
    <p>The new class for mapping fabrication services to Revit fluid types and temperatures.</p>
    <ul>
        <li>Autodesk.Revit.DB.FabricationServiceSettings</li>
    </ul>
    <p>represents the settings that specify the fluid type and temperature for fabrication service. The values are used in the fabrication flow and pressure drop calculation. </p>
    <p>It has the following methods:</p>
    <ul>
        <li>FabricationServiceSettings.GetFabricationServiceSettings() - Allows users to get the settings element in the document.</li>
        <li>FabricationServiceSettings.SetFluidTypeAndTemperature() </li>
        <li>FabricationServiceSettings.RemoveFluidSetting() </li>
        <li>FabricationServiceSettings.getFluidTemperature()</li>
        <li>FabricationServiceSettings.getFluidType()</li>
        <li>FabricationServiceSettings.hasValidFluidSetting() - Allows users to validate if the service is associated with fluid type and temperature. Returns false otherwise. </li>
    </ul>
    <p>It has the following properties:</p>
    <ul>
        <li>FabricationServiceSettings.AirFluidType - Represents a special fluid type for fabrication HVAC services.</li>
    </ul>
    <p>
        <br />
    </p>
    <h2>Schedule API additions</h2>
    <h3>ViewSchedule</h3>
    <p>Users now have the ability to resize schedule rows.</p>
    <p>The following new properties have been added to ViewSchedule:</p>
    <ul>
        <li>ViewSchedule.RowHeightOverride - Allows users to define the override that is applied to the row height.</li>
        <li>ViewSchedule.RowHeight - Allows users to define the schedule body rows height. The property is applied only for when the schedule is placed on sheet as a ScheduleSheetInstance.</li>
    </ul>
    <p>The new enum:</p>
    <ul>
        <li>Autodesk.Revit.DB.RowHeightOverrideOptions</li>
    </ul>
    <p>describes the options for overriding schedule body row heights. It has the following values</p>
    <ul>
        <li>None - No override would be applied for the row height.</li>
        <li>All - Override row height for any body rows in the schedule.</li>
        <li>ImageRows - Override row height for body rows containing images in the schedule. (This preserves the current behavior that the deprecated ImageRowHeight controls.)</li>
    </ul>
    <h3>ScheduleableField</h3>
    <p>In order to support the ability to define a custom field in the schedule for any element category, new members were added to SchedulableField class.</p>
    <p>The new methods:</p>
    <ul>
        <li>SchedulableField.SchedulableField() - Allows users to create a new SchedulableField whose type is CustomField and which is identified by the input GUID.</li>
        <li>SchedulableField.GetCustomFieldData() - Allows users to get the data associated with this custom field. If this field isn't a ScheduleFieldType.CustomField, it will return null.      </li>
    </ul>
    <p>The new property:</p>
    <ul>
        <li>SchedulableField.VerticalAlignment - Represents the vertical alignment of the column's data.</li>
    </ul>
    <h3>Scheduling Revision Clouds</h3>
    <p>Users can now schedule revision clouds. They can also schedule the view name and sheet info for revision clouds.</p>
    <p>The new values for enum Autodesk.Revit.DB.ScheduleFieldType:</p>
    <ul>
        <li>Revision<strong> </strong>- Represents the parameter of the revision element that the scheduled revision cloud element belongs to.</li>
        <li>Views - Represents the parameter of the primary view owning an annotation element (e.g. Revision Cloud.)</li>
        <li>Sheets - Represents the parameter of the sheet view owning an annotation element (e.g. Revision Cloud.)</li>
    </ul>
    <h3>HostCount</h3>
    <p>We have also added the ability to identify the HostCount in Autodesk.Revit.DB.ScheduleFieldType:</p>
    <ul>
        <li>HostCount - Counts the number of hosts with different mark.</li>
    </ul>
    <h3>Vertical Alignment of Schedules</h3>
    <p>The new enum:</p>
    <ul>
        <li>Autodesk.Revit.DB.ScheduleVerticalAlignment</li>
    </ul>
    <p>represents the vertical alignment of data in a schedule.</p>
    <h3>Custom Field API additions </h3>
    <p>We now provide a new schedule field type: the custom field. For this field type, the value for each row is computed based on the (sub)elements that are grouped on that row. It can have a graphic representation when the schedule is placed on a sheet. </p>
    <p>The new class Autodesk.Revit.DB.CustomFieldData allows users access to the information about a custom field.</p>
    <p>It has the following properties:</p>
    <ul>
        <li>FieldName  </li>
        <li>FieldTooltip - Represents the tooltip that will be shown in the schedule properties dialog for this custom field.</li>
        <li>DefaultRowHeightOnSheet - Identifies the default row height for this field.</li>
    </ul>
    <p>It has the following methods:</p>
    <ul>
        <li>GetCustomFieldId() - Allows user to get a unique identifier of the custom field.</li>
        <li>Get/SetCustomFieldProperties() </li>
        <li>ValidateCustomFieldProperties() - Allows users to validate the custom field properties.</li>
    </ul>
    <p>The new interface Autodesk.Revit.DB.ICustomFieldProperties represents the base class for the properties of a custom field.</p>
    <p>The method:</p>
    <ul>
        <li>AreEqualTo(ICustomFieldProperties otherProperties)</li>
    </ul>
    <p>allows users to identify if two custom field properties are equal or not. </p>
    <p>The new value in enum Autodesk.Revit.DB.CellType:</p>
    <ul>
        <li>CustomField</li>
    </ul>
    <p>represents whether the data is bound to a Schedule Custom Field.</p>
    <p>The  new method:</p>
    <ul>
        <li>TableSectionData.GetCustomFieldId()</li>
    </ul>
    <p>allows users to get a custom field id from the specified cell.</p>
    <p>
        <br />
    </p>
    <h2>External Service API addition</h2>
    <p>The new property in Autodesk.Revit.DB.ExternalService.ExternalServiceOptions and Autodesk.Revit.DB.ExternalService.ExternalService:</p>
    <ul>
        <li>SupportActivation</li>
    </ul>
    <p>indicates if the service supports activation/deactivation of its servers.</p>
    <p>
        <br />
    </p>
    <h2>View API additions</h2>
    <h3>Revision Clouds in Sheets</h3>
    <p>The new method: </p>
    <ul>
        <li>Autodesk.Revit.DB.ViewSheet.GetAllRevisionCloudIds()</li>
    </ul>
    <p>allows users to get the ids of the revision clouds which appear on the sheet's revision schedules.</p>
    <p>
        <br />
    </p>
    <h2>Graphics API additions</h2>
    <h3>Additional view graphics</h3>
    <p>We now provide the ability to add view graphics on top of existing element graphics, to elements which have model or view specific graphics.</p>
    <p>The new class:</p>
    <ul>
        <li>Autodesk.Revit.DB.ExternallyTaggedNonBReps</li>
    </ul>
    <p>represents a collection of ExternallyTaggedNonBRep instances</p>
    <p>The new methods:</p>
    <ul>
        <li>Autodesk.Revit.DB.ExternallyTaggedNonBReps.CanAddExternallyTaggedNonBRep(ExternallyTaggedNonBRep) - Allows users to validate if the input can be held in this collection.</li>
        <li>Autodesk.Revit.DB.ExternallyTaggedNonBReps.Add(ExternallyTaggedNonBRep) - Allows users to add a copy of the input to the container.</li>
        <li>Autodesk.Revit.DB.ExternallyTaggedNonBRep.SetUsage(ExternallyTaggedNonBRepUsage) - Allows users to control the usage of this ExternallyTaggedNonBRep.</li>
    </ul>
    <p>The new enum:</p>
    <ul>
        <li>Autodesk.Revit.DB.ExternallyTaggedNonBRepUsage</li>
    </ul>
    <p>represents the ways in which an ExternallyTaggedNonBRep can be used in Revit. It has the following values:</p>
    <ul>
        <li>Displayable</li>
        <li>Selectable</li>
        <li>Snappable</li>
        <li>Referenceable</li>
    </ul>
    <p>
        <br />
    </p>
    <h2>UI API additions</h2>
    <h3>UIThemeManager</h3>
    <p>The new properties in Autodesk.Revit.UI.UIThemeManager</p>
    <ul>
        <li>UIThemeManager.CurrentCanvasTheme - Allows users to indicate the current canvas theme.  </li>
        <li>UIThemeManager.FollowSystemColorTheme - Allows users to indicate if the overall theme follows operating system color theme.</li>
        <li>UIThemeManager.FollowSystemColorSetting - Represents Revit's UI theme following system color setting.</li>
    </ul>
    <h3>ThemeChangedEventArgs</h3>
    <p>The new class :</p>
    <ul>
        <li>Autodesk.Revit.UI.Events.ThemeChangedEventArgs</li>
    </ul>
    <p>represents the event arguments used by the ThemeChanged event.</p>
    <h3>Selection</h3>
    <p>The new value for enum Autodesk.Revit.UI.Selection.ObjectSnapTypes</p>
    <ul>
        <li>CoordinationModelPoints - Allows users to snap to coordination model points.</li>
    </ul>
    <p>
        <br />
    </p>
    <h2>Mechanical API additions</h2>
    <p>The new property:</p>
    <ul>
        <li>Autodesk.Revit.DB.Mechanical.DuctSettings.NetworkBasedCalculations</li>
    </ul>
    <p>indicates whether to enable network-based calculations for duct networks.</p>
    <p>
        <br />
    </p>
    <h2>Toposolid API additions</h2>
    <h3>Toposolid and Toposolid Type</h3>
    <p>The new class:</p>
    <ul>
        <li>Autodesk.Revit.DB.Toposolid</li>
    </ul>
    <p>represents a Toposolid within the Autodesk Revit project. This new topography element is a solid element that has an assigned type and basic parameters and is eligible for Boolean operations such as cutting with Mass and In-place component. In the API, the element is closely related with floors and the points are editable using the same SlabShapeEditor interfaces.  In addition, if the element has a Sketch boundary it can be accessed via the standard SketchEditScope capabilities.</p>
    <p>The Toposolid class offers the following new members:</p>
    <ul>
        <li>Toposolid.Create(Document, IList&lt;CurveLoop&gt;, ElementId topoTypeId, ElementId levelId) - Allows users to create a toposolid from an external profile.</li>
        <li>Toposolid.Create(Document, IList&lt;XYZ&gt;, ElementId topoTypeId, ElementId levelId) - Allows users to create a toposolid from a set of points, with the convex boundary generated automatically. </li>
        <li>Toposolid.Create(Document, IList&lt;CurveLoop&gt;, IList&lt;XYZ&gt;, ElementId topoTypeId, ElementId levelId) - Allows users to create a toposolid from a profile and a set of points.</li>
        <li>Toposolid.CreateFromTopographySurface()</li>
        <li>Toposolid.GetSlabShapeEditor()</li>
        <li>Toposolid.CreateSubDivision()</li>
        <li>Toposolid.GetSubDivisionIds()</li>
        <li>Toposolid.Split()</li>
        <li>Toposolid.Simplify()</li>
        <li>Toposolid.SketchId</li>
        <li>Toposolid.HostTopoId</li>
    </ul>
    <p>The new class:</p>
    <ul>
        <li>Autodesk.Revit.DB.ToposolidType</li>
    </ul>
    <p>represents the type of a Toposolid in Autodesk Revit.  This class inherits from HostObjAttributes and so provides read/write access to the CompoundStructure of the ToposolidType.  </p>
    <p>The ToposolidType class offers the following new members:</p>
    <ul>
        <li>ToposolidType.GetContourSetting()</li>
    </ul>
    <p>
        <br />
    </p>
    <h2>Import/Export API additions</h2>
    <p>The new method:</p>
    <ul>
        <li>EvaluatedParameter.AsValueString(Document, FormatOptions) </li>
    </ul>
    <p>allows users to format an evaluated parameter as a string with custom format options. This provides a new overload to the previously added EvaluatedParameter.AsValueString(Document) to provide parity with Parameter.AsValueString() and Parameter.AsValueString(FormatOptions)</p>
    <p>The new property:</p>
    <ul>
        <li>Document.CreationGUID</li>
    </ul>
    <p>represents the document's creation GUID from the document history.</p>
    <p>
        <br />
    </p>
    <h2>Miscellaneous</h2>
    <h3>
        <strong>SunStudyTimeInterval</strong>
    </h3>
    <p>The new values for enum Autodesk.Revit.DB.SunStudyTimeInterval allows user to use seconds for solar study time interval to run the simulation more precisely</p>
    <ul>
        <li>Seconds15 - Interval occurs every 15 seconds</li>
        <li>Seconds30 - Interval occurs every 30 seconds</li>
        <li>Seconds45 - Interval occurs every 45 seconds</li>
        <li>Minute - Interval occurs every minute</li>
    </ul>
</body>

</html>