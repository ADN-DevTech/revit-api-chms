<html xmlns:MSHelp="http://msdn.microsoft.com/mshelp" xmlns:mshelp="http://msdn.microsoft.com/mshelp" xmlns:ddue="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:msxsl="urn:schemas-microsoft-com:xslt"><head><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8" /><META NAME="save" CONTENT="history" /><title>FormattedText Class</title><meta name="Language" content="en-us" /><meta name="System.Keywords" content="FormattedText class" /><meta name="System.Keywords" content="Autodesk.Revit.DB.FormattedText class" /><meta name="System.Keywords" content="FormattedText class, about FormattedText class" /><meta name="Microsoft.Help.F1" content="Autodesk.Revit.DB.FormattedText" /><meta name="Microsoft.Help.Id" content="T:Autodesk.Revit.DB.FormattedText" /><meta name="Description" content="FormattedText is used to create, edit and format text in a or to query the text and format properties of a" /><meta name="Microsoft.Help.ContentType" content="Reference" /><link rel="stylesheet" type="text/css" href="../styles/Presentation.css" /><link rel="stylesheet" type="text/css" href="ms-help://Hx/HxRuntime/HxLink.css" /><script type="text/javascript" src="../scripts/EventUtilities.js"> </script><script type="text/javascript" src="../scripts/SplitScreen.js"> </script><script type="text/javascript" src="../scripts/Dropdown.js"> </script><script type="text/javascript" src="../scripts/script_manifold.js"> </script><script type="text/javascript" src="../scripts/script_feedBack.js"> </script><script type="text/javascript" src="../scripts/CheckboxMenu.js"> </script><script type="text/javascript" src="../scripts/CommonUtilities.js"> </script><meta name="container" content="Autodesk.Revit.DB" /><meta name="file" content="79a92343-2342-8325-1b51-f12c4fb05481" /><meta name="guid" content="79a92343-2342-8325-1b51-f12c4fb05481" /><xml><MSHelp:Attr Name="AssetID" Value="T:Autodesk.Revit.DB.FormattedText" /><MSHelp:TOCTitle Title="FormattedText Class" /><MSHelp:RLTitle Title="FormattedText Class (Autodesk.Revit.DB)" /><MSHelp:Keyword Index="A" Term="T:Autodesk.Revit.DB.FormattedText" /><MSHelp:Keyword Index="A" Term="frlrfAutodeskRevitDBFormattedTextClassTopic" /><MSHelp:Keyword Index="K" Term="FormattedText class" /><MSHelp:Keyword Index="K" Term="Autodesk.Revit.DB.FormattedText class" /><MSHelp:Keyword Index="K" Term="FormattedText class, about FormattedText class" /><MSHelp:Keyword Index="F" Term="Autodesk.Revit.DB.FormattedText" /><MSHelp:Attr Name="HelpPriority" Value="2" /><MSHelp:Attr Name="APIType" Value="Managed" /><MSHelp:Attr Name="APILocation" Value="RevitAPI.dll" /><MSHelp:Attr Name="APIName" Value="Autodesk.Revit.DB.FormattedText" /><MSHelp:Attr Name="DevLang" Value="CSharp" /><MSHelp:Attr Name="DevLang" Value="VB" /><MSHelp:Attr Name="Locale" Value="en-us" /><MSHelp:Attr Name="TopicType" Value="kbSyntax" /><MSHelp:Attr Name="TopicType" Value="apiref" /><MSHelp:Attr Name="Abstract" Value="FormattedText is used to create, edit and format text in a or to query the text and format properties of a" /><MSHelp:Attr Name="AssemblyVersion" Value="22.0.0.0" /></xml><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script></head><body><input type="hidden" id="userDataCache" class="userDataStyle" /><input type="hidden" id="hiddenScrollOffset" /><img id="collapseImage" style="display:none; height:0; width:0;" src="../icons/collapse_all.gif" alt="Collapse image" title="Collapse image" /><img id="expandImage" style="display:none; height:0; width:0;" src="../icons/expand_all.gif" alt="Expand Image" title="Expand Image" /><img id="collapseAllImage" style="display:none; height:0; width:0;" src="../icons/collapse_all.gif" /><img id="expandAllImage" style="display:none; height:0; width:0;" src="../icons/expand_all.gif" /><img id="dropDownImage" style="display:none; height:0; width:0;" src="../icons/dropdown.gif" /><img id="dropDownHoverImage" style="display:none; height:0; width:0;" src="../icons/dropdownHover.gif" /><img id="copyImage" style="display:none; height:0; width:0;" src="../icons/copycode.gif" alt="Copy image" title="Copy image" /><img id="copyHoverImage" style="display:none; height:0; width:0;" src="../icons/copycodeHighlight.gif" alt="CopyHover image" title="CopyHover image" /><div id="header"><table id="topTable" cellspacing="0" cellpadding="0"><tr><td><span onclick="ExpandCollapseAll(toggleAllImage)" style="cursor:default;" onkeypress="ExpandCollapseAll_CheckKey(toggleAllImage, event)" tabindex="0"><img ID="toggleAllImage" class="toggleAll" src="../icons/collapse_all.gif" /> <label id="collapseAllLabel" for="toggleAllImage" style="display: none;">Collapse All</label><label id="expandAllLabel" for="toggleAllImage" style="display: none;">Expand All</label> </span><span>    </span><span id="devlangsDropdown" class="filter" tabindex="0"><img id="devlangsDropdownImage" src="../icons/dropdown.gif" /> <label id="devlangsMenuAllLabel" for="devlangsDropdownImage" style="display: none;"><nobr>Code: All </nobr></label><label id="devlangsMenuMultipleLabel" for="devlangsDropdownImage" style="display: none;"><nobr>Code: Multiple </nobr></label><label id="devlangsMenuCSharpLabel" for="devlangsDropdownImage" style="display: none;"><nobr>Code: C# </nobr></label><label id="devlangsMenuVisualBasicLabel" for="devlangsDropdownImage" style="display: none;"><nobr>Code: Visual Basic </nobr></label><label id="devlangsMenuManagedCPlusPlusLabel" for="devlangsDropdownImage" style="display: none;"><nobr>Code: Visual C++ </nobr></label></span></td></tr></table><div id="devlangsMenu"><input id="CSharpCheckbox" type="checkbox" data="CSharp,cs,'persist'" value="on" onClick="SetLanguage(this)" /><label class="checkboxLabel" for="CSharpCheckbox">C#</label><br /><input id="VisualBasicCheckbox" type="checkbox" data="VisualBasic,vb,'persist'" value="on" onClick="SetLanguage(this)" /><label class="checkboxLabel" for="VisualBasicCheckbox">Visual Basic</label><br /><input id="ManagedCPlusPlusCheckbox" type="checkbox" data="ManagedCPlusPlus,cpp,'persist'" value="on" onClick="SetLanguage(this)" /><label class="checkboxLabel" for="ManagedCPlusPlusCheckbox">Visual C++</label><br /></div><table id="bottomTable" cellpadding="0" cellspacing="0"><tr id="headerTableRow1"><td align="left"><span id="runningHeaderText">Revit 2022 API</span></td></tr><tr id="headerTableRow2"><td align="left"><span id="nsrTitle">FormattedText Class</span></td></tr><tr id="headerTableRow3"><td align="left"><a href="e74cf1df-845b-fcd2-01d3-005054467c53.htm">Members</a> <a href="#exampleToggle" onclick="OpenSection(exampleToggle)">Example</a> <a href="#seeAlsoToggle" onclick="OpenSection(seeAlsoToggle)">See Also</a> <span id="headfeedbackarea" class="feedbackhead"><a href="javascript:SubmitFeedback('revitapifeedback@autodesk.com','Revit 2022 API','','','','%0\dYour%20feedback%20is%20used%20to%20improve%20the%20documentation%20and%20the%20product.%20Your%20e-mail%20address%20will%20not%20be%20used%20for%20any%20other%20purpose%20and%20is%20disposed%20of%20after%20the%20issue%20you%20report%20is%20resolved.%20%20While%20working%20to%20resolve%20the%20issue%20that%20you%20report,%20you%20may%20be%20contacted%20via%20e-mail%20to%20get%20further%20details%20or%20clarification%20on%20the%20feedback%20you%20sent.%20After%20the%20issue%20you%20report%20has%20been%20addressed,%20you%20may%20receive%20an%20e-mail%20to%20let%20you%20know%20that%20your%20feedback%20has%20been%20addressed.%0\A%0\d','Customer%20Feedback');">Send Feedback</a></span></td></tr></table><table id="gradientTable"><tr><td class="nsrBottom" background="../icons/gradient.gif" /></tr></table></div><div id="mainSection"><div id="mainBody"><div id="allHistory" class="saveHistory" onsave="saveAll()" onload="loadAll()" /><span style="color: DarkGray"></span><div class="summary">
   FormattedText is used to create, edit and format text in a <a href="ecc1ce1c-d754-96d0-35db-ca2d1d84c57c.htm">TextNote</a>
   or to query the text and format properties of a <a href="9a06448a-1c82-7fd7-8be7-9113dc1ce86a.htm">TextNode</a></div><p /><b>Namespace:</b> <a href="87546ba7-461b-c646-cbb1-2cb8f5bff8b2.htm">Autodesk.Revit.DB</a><br /><b>Assembly:</b> <span sdata="assembly">RevitAPI</span> (in RevitAPI.dll) Version: 22.0.0.0 (22.1.0.0)<br /><b>Since:</b> 
   2017
<h1 class="heading"><span onclick="ExpandCollapse(syntaxToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(syntaxToggle, event)" tabindex="0"><img id="syntaxToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />Syntax</span></h1><div id="syntaxSection" class="section" name="collapseableSection" style=""><div id="syntaxCodeBlocks" class="code"><span codeLanguage="CSharp"><table><tr><th>C#</th></tr><tr><td><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">class</span> <span class="identifier">FormattedText</span> : <span class="nolink">IDisposable</span></pre></td></tr></table></span><span codeLanguage="VisualBasicDeclaration"><table><tr><th>Visual Basic</th></tr><tr><td><pre xml:space="preserve"><span class="keyword">Public</span> <span class="keyword">Class</span> <span class="identifier">FormattedText</span> _
	<span class="keyword">Implements</span> <span class="nolink">IDisposable</span></pre></td></tr></table></span><span codeLanguage="ManagedCPlusPlus"><table><tr><th>Visual C++</th></tr><tr><td><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">ref class</span> <span class="identifier">FormattedText</span> : <span class="nolink">IDisposable</span></pre></td></tr></table></span></div></div><h1 class="heading"><span onclick="ExpandCollapse(remarksToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(remarksToggle, event)" tabindex="0"><img id="remarksToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />Remarks</span></h1><div id="remarksSection" class="section" name="collapseableSection" style=""><p>
   An instance of FormattedText can be obtained from a <a href="ecc1ce1c-d754-96d0-35db-ca2d1d84c57c.htm">TextNote</a>
   (See <b>TextNote.GetFormattedText()</b>)
   or from a <a href="9a06448a-1c82-7fd7-8be7-9113dc1ce86a.htm">TextNode</a>
   (See <b>TextNode.GetFormattedText()</b>)
   </p><p>
   It is also possible to create a new instance of FormattedText and assign it
   to a <a href="ecc1ce1c-d754-96d0-35db-ca2d1d84c57c.htm">TextNote</a>
   (See <b>TextNote.SetFormattedText()</b>)
   This will result in a <a href="ecc1ce1c-d754-96d0-35db-ca2d1d84c57c.htm">TextNote</a> with text with the specified formatting applied
   </p><p>
   Formatted text can be used to:
   <ul><li>Create formatted text for a new <a href="ecc1ce1c-d754-96d0-35db-ca2d1d84c57c.htm">TextNote</a></li><li>Edit, Find and Replace text in an existing <a href="ecc1ce1c-d754-96d0-35db-ca2d1d84c57c.htm">TextNote</a></li><li>Modify formatting of text in an existing <a href="ecc1ce1c-d754-96d0-35db-ca2d1d84c57c.htm">TextNote</a></li><li>Or query the text and formatting a <a href="ecc1ce1c-d754-96d0-35db-ca2d1d84c57c.htm">TextNote</a> or a <a href="9a06448a-1c82-7fd7-8be7-9113dc1ce86a.htm">TextNode</a></li></ul></p><p>
   Formatted text can be populated with plain text by using its
   constructor <a href="86332d2f-1939-4985-f428-24ee8b19072e.htm">FormattedText(String)</a> that takes a string,
   or by using the <a href="b2efd1c2-7e1f-2def-f72b-a22066a8b415.htm">SetPlainText(String)</a> method.
   </p><p>
   In addition, selected ranges of text can be added, removed, or replaced with the
   <a href="ef85472c-c691-77f8-5823-33da6ea43832.htm">SetPlainText(TextRange, String)</a> method
   by specifying a <a href="8a00baaf-8cb8-d9f0-e0a0-eaa5aa16e55e.htm">TextRange</a>.
   </p><p>
   Use the <a href="79034f02-9ca0-ebe5-8d16-112d674dbdb4.htm">Find(String, Int32, Boolean, Boolean)</a> method to find the location of existing text.
   </p><p>
   Formatted text can have up to 30,000 characters.
   All characters, except the linefeed character ('\n'), are allowed.
   This means that you should not use the 'Environment.NewLine' property, since that includes a linefeed character.
   Use the carriage return character ('\r') to terminate a paragraph.
   And use a vertical tab character ('\v') to create a new line without terminating the paragraph.
   </p><p>
   Formatted text allows for individual characters to be formatted.
   The following formatting can be applied.
   <ul><li> Bold                  </li><li> Italic                </li><li> Underline             </li><li> Superscript/Subscript </li><li> All Caps              </li></ul>
   Use <a href="fd0eab6d-0808-63ff-3cb0-a014f2adbbd7.htm">SetBoldStatus(TextRange, Boolean)</a>)
   , <a href="310407e6-1244-24cb-c033-e9620068e62e.htm">SetItalicStatus(TextRange, Boolean)</a>)
   , <a href="d5f9ca3c-4631-ad4a-5a40-b7103611e254.htm">SetUnderlineStatus(TextRange, Boolean)</a>)
   , <a href="357540c0-f99c-94da-f3f3-585308c6543f.htm">SetSuperscriptStatus(TextRange, Boolean)</a>)
   , <a href="bc2efdbe-7706-0e4d-82ce-39ab7d039c7c.htm">SetSubscriptStatus(TextRange, Boolean)</a>)
   , or <a href="03a3a6c3-9195-25a1-abaa-641f00cbc930.htm">SetAllCapsStatus(TextRange, Boolean)</a>)
   to set the character formatting on a range of text.
   </p><p>
   Use <a href="654707e3-5575-a8a5-8eaf-e83425f5c50d.htm">GetBoldStatus(TextRange)</a>)
   , <a href="a4df0e88-31d5-4e75-fb17-d68ad22bf89d.htm">GetItalicStatus(TextRange)</a>)
   , <a href="0ece8fda-443b-7247-9b1c-4eb493850344.htm">GetUnderlineStatus(TextRange)</a>)
   , <a href="3ad2a7db-b1c9-ba0e-661e-bb4117e3a538.htm">GetSuperscriptStatus(TextRange)</a>)
   , <a href="50803bb1-2ba6-63c5-0ddf-a0bf0f40c58c.htm">GetSubscriptStatus(TextRange)</a>)
   , or <a href="0e9f9439-eb01-6844-992a-2128ffddedef.htm">GetAllCapsStatus(TextRange)</a>)
   to get the character formatting of a range of text.
   </p><p>
   Text can be broken up in paragraphs.  Paragraphs are terminated by a carriage return character ('\r').
   </p><p>
   Each paragraph can be indented several levels deep.
   For each additional level the indentation increments by one tab size.
   The total indentation is the product of a tab size and the indent level.
   Use <a href="a2e6561d-da40-b701-967f-aadbe6b153f5.htm">SetIndentLevel(TextRange, Int32)</a> to set the level of indenting
   up to a maximum indent level that can be obtained from
   <a href="3f77a7ca-54e8-28b5-e1e6-cee57afd13e6.htm">GetMaximumIndentLevel<span class="languageSpecificText"><span class="cs">()</span><span class="cpp">()</span><span class="nu">()</span><span class="fs">()</span></span></a>
   Use <a href="2bb008be-f3b5-f0cd-bc1b-6879101ef84a.htm">GetIndentLevel(TextRange)</a> to find the indent level of a given range of text.
   </p><p>
   Note that the tab size is determined by the object that will contain the FormattedText.
   </p><p>
   In the case of a <a href="ecc1ce1c-d754-96d0-35db-ca2d1d84c57c.htm">TextNote</a> the tab size is a property of the <a href="2991b6af-daf6-463d-3796-8b83fdbd344f.htm">TextNoteType</a>
   returned from <b>TextNote.TextNoteType</b>.
   The tab size can be found by calling the <a href="2e852bc4-46c6-5598-cc45-0eaf38cf8973.htm">Parameter<span class="languageSpecificText"><span class="cs">[</span><span class="vb">(</span><span class="cpp">[</span><span class="nu">(</span><span class="fs"> </span></span>Guid<span class="languageSpecificText"><span class="cs">]</span><span class="vb">)</span><span class="cpp">]</span><span class="nu">)</span><span class="fs"> </span></span></a>
   with <a href="fb011c91-be7e-f737-28c7-3f1e1917a0e0.htm">TEXT_TAB_SIZE</a> on the <a href="2991b6af-daf6-463d-3796-8b83fdbd344f.htm">TextNoteType</a> obtained from the <a href="ecc1ce1c-d754-96d0-35db-ca2d1d84c57c.htm">TextNote</a></p><p>
   In the case of a <a href="9a06448a-1c82-7fd7-8be7-9113dc1ce86a.htm">TextNode</a> the tab size can be obtained from its <b>TabSize</b> property
   </p><p>
   Formatted text can also be used to create numbered or bulleted paragraphs with the
   <a href="c0bb9933-9825-a28a-a09c-8b319f089b36.htm">SetListType(TextRange, ListType)</a> method.
   </p><p>
   The following <a href="7163554f-3446-22eb-afa4-5490d5df29c8.htm">ListType</a> options are available:
   <ul><li><a href="7163554f-3446-22eb-afa4-5490d5df29c8.htm">Bullet</a></li><li><a href="7163554f-3446-22eb-afa4-5490d5df29c8.htm">ArabicNumbers</a></li><li><a href="7163554f-3446-22eb-afa4-5490d5df29c8.htm">LowerCaseLetters</a></li><li><a href="7163554f-3446-22eb-afa4-5490d5df29c8.htm">UpperCaseLetters</a></li></ul>
   Paragraphs with a <a href="7163554f-3446-22eb-afa4-5490d5df29c8.htm">ListType</a> other than <a href="7163554f-3446-22eb-afa4-5490d5df29c8.htm">None</a> are considered
   to be 'list' paragraphs.
   Consecutive list paragraphs with the same indentation level are treated as part of the same list.
   A list ends when a list paragraph is followed by
   <ul><li>a paragraph that has <a href="7163554f-3446-22eb-afa4-5490d5df29c8.htm">None</a></li><li>or a list paragraph that has a lower indentation level, i.e. is indented less.
   (See <a href="2bb008be-f3b5-f0cd-bc1b-6879101ef84a.htm">GetIndentLevel(TextRange)</a>)</li></ul>
   Note that a list will continue uninterrupted after list paragraphs that have higher indentation level.
   These paragraphs form a 'sub-list' of the list they interrupt.
   Sub-lists can have their own sub-sub-lists.
   The nesting level is only limited by the maximum indent level.
   Using <a href="a2e6561d-da40-b701-967f-aadbe6b153f5.htm">SetIndentLevel(TextRange, Int32)</a> it is therefore possible to create multi-level lists.
   </p><p>
   FormattedText will keep lists consistent.
   That means that list paragraphs will automatically get sequential numbers or letters.
   It also means that if the list type of one of the paragraphs in a list
   is changed then that change is propagated to all the paragraphs in that list.
   Note that this will not affect the list type of any nested sub-lists.
   </p><p>
   Use a vertical tab character ('\v') to insert a line without a bullet or number.
   Since this does not end the paragraph this will allow the list to continue to the next paragraph.
   </p></div><h1 class="heading"><span onclick="ExpandCollapse(exampleToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(exampleToggle, event)" tabindex="0"><img id="exampleToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />Examples</span></h1><div id="exampleSection" class="section" name="collapseableSection" style=""><span id="cbc_1" x-lang="CSharp" codeLanguage="CSharp"><div class="highlight-title"><span class="highlight-copycode" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" tabindex="0" onmouseover="CopyCodeChangeIcon(this)" onmouseout="CopyCodeChangeIcon(this)" onclick="javascript:CopyColorizedCode(this.parentNode);"><img style="margin-right: 5px;" src="../icons/CopyCode.gif" />Copy</span>C#</div><div class="code"><pre xml:space="preserve"><span class="highlight-keyword">public</span> <span class="highlight-keyword">void</span> FormatText(TextNote textNote)
{
    <span class="highlight-comment">// TextNote created with "New sample text"</span>
    FormattedText formatText = textNote.GetFormattedText();

    <span class="highlight-comment">// italicize "New"</span>
    TextRange range = <span class="highlight-keyword">new</span> TextRange(<span class="highlight-number">0</span>, <span class="highlight-number">3</span>);
    formatText.SetItalicStatus(range, <span class="highlight-keyword">true</span>);

    <span class="highlight-comment">// make "sample" bold</span>
    range = formatText.Find(<span class="highlight-literal">"sample"</span>, <span class="highlight-number">0</span>, <span class="highlight-keyword">false</span>, <span class="highlight-keyword">true</span>);
    <span class="highlight-keyword">if</span> (range.Length &gt; <span class="highlight-number">0</span>)
        formatText.SetBoldStatus(range, <span class="highlight-keyword">true</span>);

    <span class="highlight-comment">// make "text" underlined</span>
    range = formatText.Find(<span class="highlight-literal">"text"</span>, <span class="highlight-number">0</span>, <span class="highlight-keyword">false</span>, <span class="highlight-keyword">true</span>);
    <span class="highlight-keyword">if</span> (range.Length &gt; <span class="highlight-number">0</span>)
        formatText.SetUnderlineStatus(range, <span class="highlight-keyword">true</span>);

    <span class="highlight-comment">// make all text uppercase</span>
    formatText.SetAllCapsStatus(<span class="highlight-keyword">true</span>);

    textNote.SetFormattedText(formatText);
}</pre></div></span><span id="cbc_2" x-lang="VisualBasic" codeLanguage="VisualBasic"><div class="highlight-title"><span class="highlight-copycode" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" tabindex="0" onmouseover="CopyCodeChangeIcon(this)" onmouseout="CopyCodeChangeIcon(this)" onclick="javascript:CopyColorizedCode(this.parentNode);"><img style="margin-right: 5px;" src="../icons/CopyCode.gif" />Copy</span>VB.NET</div><div class="code"><pre xml:space="preserve"><span class="highlight-keyword">Public</span> <span class="highlight-keyword">Sub</span> FormatText(textNote <span class="highlight-keyword">As</span> TextNote)
    <span class="highlight-comment">' TextNote created with "New sample text"</span>
    <span class="highlight-keyword">Dim</span> formatText__1 <span class="highlight-keyword">As</span> FormattedText = textNote.GetFormattedText()

    <span class="highlight-comment">' italicize "New"</span>
    <span class="highlight-keyword">Dim</span> range <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> TextRange(<span class="highlight-number">0</span>, <span class="highlight-number">3</span>)
    formatText__1.SetItalicStatus(range, <span class="highlight-keyword">True</span>)

    <span class="highlight-comment">' make "sample" bold</span>
    range = formatText__1.Find(<span class="highlight-literal">"sample"</span>, <span class="highlight-number">0</span>, <span class="highlight-keyword">False</span>, <span class="highlight-keyword">True</span>)
    <span class="highlight-keyword">If</span> range.Length &gt; <span class="highlight-number">0</span> <span class="highlight-keyword">Then</span>
        formatText__1.SetBoldStatus(range, <span class="highlight-keyword">True</span>)
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

    <span class="highlight-comment">' make "text" underlined</span>
    range = formatText__1.Find(<span class="highlight-literal">"text"</span>, <span class="highlight-number">0</span>, <span class="highlight-keyword">False</span>, <span class="highlight-keyword">True</span>)
    <span class="highlight-keyword">If</span> range.Length &gt; <span class="highlight-number">0</span> <span class="highlight-keyword">Then</span>
        formatText__1.SetUnderlineStatus(range, <span class="highlight-keyword">True</span>)
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

    <span class="highlight-comment">' make all text uppercase</span>
    formatText__1.SetAllCapsStatus(<span class="highlight-keyword">True</span>)

    textNote.SetFormattedText(formatText__1)
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span></pre></div></span></div><h1 class="heading"><span onclick="ExpandCollapse(familyToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(familyToggle, event)" tabindex="0"><img id="familyToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />Inheritance Hierarchy</span></h1><div id="familySection" class="section" name="collapseableSection" style=""><span class="nolink">System<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>Object</span><br />  <span class="selflink">Autodesk.Revit.DB<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>FormattedText</span><br /></div><h1 class="heading"><span onclick="ExpandCollapse(seeAlsoToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(seeAlsoToggle, event)" tabindex="0"><img id="seeAlsoToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />See Also</span></h1><div id="seeAlsoSection" class="section" name="collapseableSection" style=""><div class="seeAlsoStyle"><a href="e74cf1df-845b-fcd2-01d3-005054467c53.htm">FormattedText Members</a></div><div class="seeAlsoStyle"><a href="87546ba7-461b-c646-cbb1-2cb8f5bff8b2.htm">Autodesk.Revit.DB Namespace</a></div></div></div><div id="footer"><div class="footerLine"><img width="100%" height="3px" src="../icons/footer.gif" alt="Footer image" title="Footer image" /></div><A NAME="feedback"></A><span id="fb" class="feedbackcss"></span><p />Send comments on this topic to
        <a id="HT_MailLink" href="mailto:revitapifeedback%40autodesk.com?Subject=Revit 2022 API">Autodesk</a><script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        var HT_mailLinkText = HT_mailLink.innerHTML;
        HT_mailLink.href += ": " + document.title;
        HT_mailLink.innerHTML = HT_mailLinkText;
        </script></div></div></body></html>