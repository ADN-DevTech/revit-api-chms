<html xmlns:MSHelp="http://msdn.microsoft.com/mshelp" xmlns:mshelp="http://msdn.microsoft.com/mshelp" xmlns:ddue="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:msxsl="urn:schemas-microsoft-com:xslt"><head><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8" /><META NAME="save" CONTENT="history" /><title>Paint Method (ElementId, Face, ElementId)</title><meta name="Language" content="en-us" /><meta name="Microsoft.Help.Id" content="M:Autodesk.Revit.DB.Document.Paint(Autodesk.Revit.DB.ElementId,Autodesk.Revit.DB.Face,Autodesk.Revit.DB.ElementId)" /><meta name="Description" content="Paint the element's face with specified material." /><meta name="Microsoft.Help.ContentType" content="Reference" /><link rel="stylesheet" type="text/css" href="../styles/Presentation.css" /><link rel="stylesheet" type="text/css" href="ms-help://Hx/HxRuntime/HxLink.css" /><script type="text/javascript" src="../scripts/EventUtilities.js"> </script><script type="text/javascript" src="../scripts/SplitScreen.js"> </script><script type="text/javascript" src="../scripts/Dropdown.js"> </script><script type="text/javascript" src="../scripts/script_manifold.js"> </script><script type="text/javascript" src="../scripts/script_feedBack.js"> </script><script type="text/javascript" src="../scripts/CheckboxMenu.js"> </script><script type="text/javascript" src="../scripts/CommonUtilities.js"> </script><meta name="container" content="Autodesk.Revit.DB" /><meta name="file" content="9268395e-a9cb-ff79-20ab-1ed261220513" /><meta name="guid" content="9268395e-a9cb-ff79-20ab-1ed261220513" /><xml><MSHelp:Attr Name="AssetID" Value="M:Autodesk.Revit.DB.Document.Paint(Autodesk.Revit.DB.ElementId,Autodesk.Revit.DB.Face,Autodesk.Revit.DB.ElementId)" /><MSHelp:TOCTitle Title="Paint Method (ElementId, Face, ElementId)" /><MSHelp:RLTitle Title="Document.Paint Method (ElementId, Face, ElementId) (Autodesk.Revit.DB)" /><MSHelp:Keyword Index="A" Term="M:Autodesk.Revit.DB.Document.Paint(Autodesk.Revit.DB.ElementId,Autodesk.Revit.DB.Face,Autodesk.Revit.DB.ElementId)" /><MSHelp:Attr Name="APIType" Value="Managed" /><MSHelp:Attr Name="APILocation" Value="RevitAPI.dll" /><MSHelp:Attr Name="APIName" Value="Autodesk.Revit.DB.Document.Paint" /><MSHelp:Attr Name="DevLang" Value="CSharp" /><MSHelp:Attr Name="DevLang" Value="VB" /><MSHelp:Attr Name="Locale" Value="en-us" /><MSHelp:Attr Name="TopicType" Value="kbSyntax" /><MSHelp:Attr Name="TopicType" Value="apiref" /><MSHelp:Attr Name="Abstract" Value="Paint the element's face with specified material." /><MSHelp:Attr Name="AssemblyVersion" Value="22.0.0.0" /></xml><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script></head><body><input type="hidden" id="userDataCache" class="userDataStyle" /><input type="hidden" id="hiddenScrollOffset" /><img id="collapseImage" style="display:none; height:0; width:0;" src="../icons/collapse_all.gif" alt="Collapse image" title="Collapse image" /><img id="expandImage" style="display:none; height:0; width:0;" src="../icons/expand_all.gif" alt="Expand Image" title="Expand Image" /><img id="collapseAllImage" style="display:none; height:0; width:0;" src="../icons/collapse_all.gif" /><img id="expandAllImage" style="display:none; height:0; width:0;" src="../icons/expand_all.gif" /><img id="dropDownImage" style="display:none; height:0; width:0;" src="../icons/dropdown.gif" /><img id="dropDownHoverImage" style="display:none; height:0; width:0;" src="../icons/dropdownHover.gif" /><img id="copyImage" style="display:none; height:0; width:0;" src="../icons/copycode.gif" alt="Copy image" title="Copy image" /><img id="copyHoverImage" style="display:none; height:0; width:0;" src="../icons/copycodeHighlight.gif" alt="CopyHover image" title="CopyHover image" /><div id="header"><table id="topTable" cellspacing="0" cellpadding="0"><tr><td><span onclick="ExpandCollapseAll(toggleAllImage)" style="cursor:default;" onkeypress="ExpandCollapseAll_CheckKey(toggleAllImage, event)" tabindex="0"><img ID="toggleAllImage" class="toggleAll" src="../icons/collapse_all.gif" /> <label id="collapseAllLabel" for="toggleAllImage" style="display: none;">Collapse All</label><label id="expandAllLabel" for="toggleAllImage" style="display: none;">Expand All</label> </span><span>    </span><span id="devlangsDropdown" class="filter" tabindex="0"><img id="devlangsDropdownImage" src="../icons/dropdown.gif" /> <label id="devlangsMenuAllLabel" for="devlangsDropdownImage" style="display: none;"><nobr>Code: All </nobr></label><label id="devlangsMenuMultipleLabel" for="devlangsDropdownImage" style="display: none;"><nobr>Code: Multiple </nobr></label><label id="devlangsMenuCSharpLabel" for="devlangsDropdownImage" style="display: none;"><nobr>Code: C# </nobr></label><label id="devlangsMenuVisualBasicLabel" for="devlangsDropdownImage" style="display: none;"><nobr>Code: Visual Basic </nobr></label><label id="devlangsMenuManagedCPlusPlusLabel" for="devlangsDropdownImage" style="display: none;"><nobr>Code: Visual C++ </nobr></label></span></td></tr></table><div id="devlangsMenu"><input id="CSharpCheckbox" type="checkbox" data="CSharp,cs,'persist'" value="on" onClick="SetLanguage(this)" /><label class="checkboxLabel" for="CSharpCheckbox">C#</label><br /><input id="VisualBasicCheckbox" type="checkbox" data="VisualBasic,vb,'persist'" value="on" onClick="SetLanguage(this)" /><label class="checkboxLabel" for="VisualBasicCheckbox">Visual Basic</label><br /><input id="ManagedCPlusPlusCheckbox" type="checkbox" data="ManagedCPlusPlus,cpp,'persist'" value="on" onClick="SetLanguage(this)" /><label class="checkboxLabel" for="ManagedCPlusPlusCheckbox">Visual C++</label><br /></div><table id="bottomTable" cellpadding="0" cellspacing="0"><tr id="headerTableRow1"><td align="left"><span id="runningHeaderText">Revit 2022 API</span></td></tr><tr id="headerTableRow2"><td align="left"><span id="nsrTitle">Document<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>Paint Method (ElementId, Face, ElementId)</span></td></tr><tr id="headerTableRow3"><td align="left"><a href="db03274b-a107-aa32-9034-f3e0df4bb1ec.htm">Document Class</a> <a href="#exampleToggle" onclick="OpenSection(exampleToggle)">Example</a> <a href="#seeAlsoToggle" onclick="OpenSection(seeAlsoToggle)">See Also</a> <span id="headfeedbackarea" class="feedbackhead"><a href="javascript:SubmitFeedback('revitapifeedback@autodesk.com','Revit 2022 API','','','','%0\dYour%20feedback%20is%20used%20to%20improve%20the%20documentation%20and%20the%20product.%20Your%20e-mail%20address%20will%20not%20be%20used%20for%20any%20other%20purpose%20and%20is%20disposed%20of%20after%20the%20issue%20you%20report%20is%20resolved.%20%20While%20working%20to%20resolve%20the%20issue%20that%20you%20report,%20you%20may%20be%20contacted%20via%20e-mail%20to%20get%20further%20details%20or%20clarification%20on%20the%20feedback%20you%20sent.%20After%20the%20issue%20you%20report%20has%20been%20addressed,%20you%20may%20receive%20an%20e-mail%20to%20let%20you%20know%20that%20your%20feedback%20has%20been%20addressed.%0\A%0\d','Customer%20Feedback');">Send Feedback</a></span></td></tr></table><table id="gradientTable"><tr><td class="nsrBottom" background="../icons/gradient.gif" /></tr></table></div><div id="mainSection"><div id="mainBody"><div id="allHistory" class="saveHistory" onsave="saveAll()" onload="loadAll()" /><span style="color: DarkGray"></span><div class="summary">
   Paint the element's face with specified material.
</div><p /><b>Namespace:</b> <a href="87546ba7-461b-c646-cbb1-2cb8f5bff8b2.htm">Autodesk.Revit.DB</a><br /><b>Assembly:</b> <span sdata="assembly">RevitAPI</span> (in RevitAPI.dll) Version: 22.0.0.0 (22.1.0.0)<br /><b>Since:</b> 
   2014
<h1 class="heading"><span onclick="ExpandCollapse(syntaxToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(syntaxToggle, event)" tabindex="0"><img id="syntaxToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />Syntax</span></h1><div id="syntaxSection" class="section" name="collapseableSection" style=""><div id="syntaxCodeBlocks" class="code"><span codeLanguage="CSharp"><table><tr><th>C#</th></tr><tr><td><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">void</span> <span class="identifier">Paint</span>(
	<a href="44f3f7b1-3229-3404-93c9-dc5e70337dd6.htm">ElementId</a> <span class="parameter">elementId</span>,
	<a href="e32b3b1f-66fc-57cb-6e1c-aa81d1bf3e63.htm">Face</a> <span class="parameter">face</span>,
	<a href="44f3f7b1-3229-3404-93c9-dc5e70337dd6.htm">ElementId</a> <span class="parameter">materialId</span>
)</pre></td></tr></table></span><span codeLanguage="VisualBasicDeclaration"><table><tr><th>Visual Basic</th></tr><tr><td><pre xml:space="preserve"><span class="keyword">Public</span> <span class="keyword">Sub</span> <span class="identifier">Paint</span> ( _
	<span class="parameter">elementId</span> <span class="keyword">As</span> <a href="44f3f7b1-3229-3404-93c9-dc5e70337dd6.htm">ElementId</a>, _
	<span class="parameter">face</span> <span class="keyword">As</span> <a href="e32b3b1f-66fc-57cb-6e1c-aa81d1bf3e63.htm">Face</a>, _
	<span class="parameter">materialId</span> <span class="keyword">As</span> <a href="44f3f7b1-3229-3404-93c9-dc5e70337dd6.htm">ElementId</a> _
)</pre></td></tr></table></span><span codeLanguage="ManagedCPlusPlus"><table><tr><th>Visual C++</th></tr><tr><td><pre xml:space="preserve"><span class="keyword">public</span>:
<span class="keyword">void</span> <span class="identifier">Paint</span>(
	<a href="44f3f7b1-3229-3404-93c9-dc5e70337dd6.htm">ElementId</a>^ <span class="parameter">elementId</span>, 
	<a href="e32b3b1f-66fc-57cb-6e1c-aa81d1bf3e63.htm">Face</a>^ <span class="parameter">face</span>, 
	<a href="44f3f7b1-3229-3404-93c9-dc5e70337dd6.htm">ElementId</a>^ <span class="parameter">materialId</span>
)</pre></td></tr></table></span></div><div id="parameters"><h4 class="subHeading">Parameters</h4><dl paramName="elementId"><dt><span class="parameter">elementId</span></dt><dd>Type: <a href="44f3f7b1-3229-3404-93c9-dc5e70337dd6.htm">Autodesk.Revit.DB<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>ElementId</a><br />
   The element that the face belongs to.
</dd></dl><dl paramName="face"><dt><span class="parameter">face</span></dt><dd>Type: <a href="e32b3b1f-66fc-57cb-6e1c-aa81d1bf3e63.htm">Autodesk.Revit.DB<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>Face</a><br />
   The painted element's face.
</dd></dl><dl paramName="materialId"><dt><span class="parameter">materialId</span></dt><dd>Type: <a href="44f3f7b1-3229-3404-93c9-dc5e70337dd6.htm">Autodesk.Revit.DB<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>ElementId</a><br />
   The material to be painted on the face
</dd></dl></div></div><h1 class="heading"><span onclick="ExpandCollapse(exampleToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(exampleToggle, event)" tabindex="0"><img id="exampleToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />Examples</span></h1><div id="exampleSection" class="section" name="collapseableSection" style=""><span id="cbc_1" x-lang="CSharp" codeLanguage="CSharp"><div class="highlight-title"><span class="highlight-copycode" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" tabindex="0" onmouseover="CopyCodeChangeIcon(this)" onmouseout="CopyCodeChangeIcon(this)" onclick="javascript:CopyColorizedCode(this.parentNode);"><img style="margin-right: 5px;" src="../icons/CopyCode.gif" />Copy</span>C#</div><div class="code"><pre xml:space="preserve"><span class="highlight-comment">// Paint any unpainted faces of a given wall</span>
<span class="highlight-keyword">public</span> <span class="highlight-keyword">void</span> PaintWallFaces(Wall wall, ElementId matId)
{
    Document doc = wall.Document;
    GeometryElement geometryElement = wall.get_Geometry(<span class="highlight-keyword">new</span> Options());
    <span class="highlight-keyword">foreach</span> (GeometryObject geometryObject <span class="highlight-keyword">in</span> geometryElement)
    {
        <span class="highlight-keyword">if</span> (geometryObject <span class="highlight-keyword">is</span> Solid)
        {
            Solid solid = geometryObject <span class="highlight-keyword">as</span> Solid;
            <span class="highlight-keyword">foreach</span> (Face face <span class="highlight-keyword">in</span> solid.Faces)
            {
                <span class="highlight-keyword">if</span> (doc.IsPainted(wall.Id, face) == <span class="highlight-keyword">false</span>)
                {
                    doc.Paint(wall.Id, face, matId);
                }
            }
        }
    }
}</pre></div></span><span id="cbc_2" x-lang="CSharp" codeLanguage="CSharp"><div class="highlight-title"><span class="highlight-copycode" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" tabindex="0" onmouseover="CopyCodeChangeIcon(this)" onmouseout="CopyCodeChangeIcon(this)" onclick="javascript:CopyColorizedCode(this.parentNode);"><img style="margin-right: 5px;" src="../icons/CopyCode.gif" />Copy</span>C#</div><div class="code"><pre xml:space="preserve"><span class="highlight-keyword">public</span> <span class="highlight-keyword">void</span> ApplyPaintByMaterial(Document document, Wall wall, Material material)
{
   <span class="highlight-comment">// Before acquiring the geometry, make sure the detail level is set to 'Fine'</span>
   Options geoOptions = <span class="highlight-keyword">new</span> Options();
   geoOptions.DetailLevel = ViewDetailLevel.Fine;

   <span class="highlight-comment">// Obtain geometry for the given Wall element</span>
   GeometryElement geoElem = wall.get_Geometry(geoOptions);

   <span class="highlight-comment">// Find a face on the wall</span>
   Face wallFace = <span class="highlight-keyword">null</span>;
   IEnumerator&lt;GeometryObject&gt; geoObjectItor = geoElem.GetEnumerator();
   <span class="highlight-keyword">while</span> (geoObjectItor.MoveNext())
   {
      <span class="highlight-comment">// need to find a solid first</span>
      Solid theSolid = geoObjectItor.Current <span class="highlight-keyword">as</span> Solid;
      <span class="highlight-keyword">if</span> (<span class="highlight-keyword">null</span> != theSolid)
      {
         <span class="highlight-comment">// Examine faces of the solid to find one with at least</span>
         <span class="highlight-comment">// one region. Then take the geometric face of that region.</span>
         <span class="highlight-keyword">foreach</span> (Face face <span class="highlight-keyword">in</span> theSolid.Faces)
         {
            <span class="highlight-keyword">if</span> (face.HasRegions)
            {
               wallFace = face.GetRegions()[<span class="highlight-number">0</span>];
               <span class="highlight-keyword">break</span>;
            }
         }
      }
   }

   <span class="highlight-keyword">if</span> (<span class="highlight-keyword">null</span> == wallFace)
   {
      TaskDialog.Show(<span class="highlight-literal">"Failure"</span>, <span class="highlight-literal">"Could not find a face to paint on the given wall."</span>);
      <span class="highlight-keyword">return</span>;
   }

   <span class="highlight-comment">// Paint material to the wall face (modification must be inside a transaction)</span>

   <span class="highlight-keyword">using</span> (Transaction transaction = <span class="highlight-keyword">new</span> Transaction(document, <span class="highlight-literal">"Painting a wall"</span>))
   {
      transaction.Start();
      document.Paint(wall.Id, wallFace, material.Id);
      transaction.Commit();
   }

   <span class="highlight-comment">// For illustration purposes only, check if the painted material indeed got applied</span>

   <span class="highlight-keyword">bool</span> isPainted = document.IsPainted(wall.Id, wallFace);
   <span class="highlight-keyword">if</span> (isPainted)
   {
      ElementId paintedMatId = document.GetPaintedMaterial(wall.Id, wallFace);
      <span class="highlight-keyword">if</span> (paintedMatId == material.Id)
      {
         TaskDialog.Show(<span class="highlight-literal">"Painting material"</span>, <span class="highlight-literal">"Wall painted successfully."</span>);
      }
   }
}</pre></div></span><span id="cbc_3" x-lang="VisualBasic" codeLanguage="VisualBasic"><div class="highlight-title"><span class="highlight-copycode" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" tabindex="0" onmouseover="CopyCodeChangeIcon(this)" onmouseout="CopyCodeChangeIcon(this)" onclick="javascript:CopyColorizedCode(this.parentNode);"><img style="margin-right: 5px;" src="../icons/CopyCode.gif" />Copy</span>VB.NET</div><div class="code"><pre xml:space="preserve"><span class="highlight-comment">' Paint any unpainted faces of a given wall</span>
<span class="highlight-keyword">Public</span> <span class="highlight-keyword">Sub</span> PaintWallFaces(wall <span class="highlight-keyword">As</span> Wall, matId <span class="highlight-keyword">As</span> ElementId)
   <span class="highlight-keyword">Dim</span> doc <span class="highlight-keyword">As</span> Document = wall.Document
   <span class="highlight-keyword">Dim</span> geometryElement <span class="highlight-keyword">As</span> GeometryElement = wall.Geometry(<span class="highlight-keyword">New</span> Options())
   <span class="highlight-keyword">For</span> <span class="highlight-keyword">Each</span> geometryObject <span class="highlight-keyword">As</span> GeometryObject <span class="highlight-keyword">In</span> geometryElement
      <span class="highlight-keyword">If</span> <span class="highlight-keyword">TypeOf</span> geometryObject <span class="highlight-keyword">Is</span> Solid <span class="highlight-keyword">Then</span>
         <span class="highlight-keyword">Dim</span> solid <span class="highlight-keyword">As</span> Solid = <span class="highlight-keyword">TryCast</span>(geometryObject, Solid)
         <span class="highlight-keyword">For</span> <span class="highlight-keyword">Each</span> face <span class="highlight-keyword">As</span> Face <span class="highlight-keyword">In</span> solid.Faces
            <span class="highlight-keyword">If</span> doc.IsPainted(wall.Id, face) = <span class="highlight-keyword">False</span> <span class="highlight-keyword">Then</span>
               doc.Paint(wall.Id, face, matId)
            <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
         <span class="highlight-keyword">Next</span>
      <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
   <span class="highlight-keyword">Next</span>
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span></pre></div></span><span id="cbc_4" x-lang="VisualBasic" codeLanguage="VisualBasic"><div class="highlight-title"><span class="highlight-copycode" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" tabindex="0" onmouseover="CopyCodeChangeIcon(this)" onmouseout="CopyCodeChangeIcon(this)" onclick="javascript:CopyColorizedCode(this.parentNode);"><img style="margin-right: 5px;" src="../icons/CopyCode.gif" />Copy</span>VB.NET</div><div class="code"><pre xml:space="preserve"><span class="highlight-keyword">Public</span> <span class="highlight-keyword">Sub</span> ApplyPaintByMaterial(document <span class="highlight-keyword">As</span> Document, wall <span class="highlight-keyword">As</span> Wall, material <span class="highlight-keyword">As</span> Material)
    <span class="highlight-comment">' Before acquiring the geometry, make sure the detail level is set to 'Fine'</span>
    <span class="highlight-keyword">Dim</span> geoOptions <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> Options()
    geoOptions.DetailLevel = ViewDetailLevel.Fine

    <span class="highlight-comment">' Obtain geometry for the given Wall element</span>
    <span class="highlight-keyword">Dim</span> geoElem <span class="highlight-keyword">As</span> GeometryElement = wall.Geometry(geoOptions)

    <span class="highlight-comment">' Find a face on the wall</span>
    <span class="highlight-keyword">Dim</span> wallFace <span class="highlight-keyword">As</span> Face = <span class="highlight-keyword">Nothing</span>
    <span class="highlight-keyword">Dim</span> geoObjectItor <span class="highlight-keyword">As</span> IEnumerator(<span class="highlight-keyword">Of</span> GeometryObject) = geoElem.GetEnumerator()
    <span class="highlight-keyword">While</span> geoObjectItor.MoveNext()
        <span class="highlight-comment">' need to find a solid first</span>
        <span class="highlight-keyword">Dim</span> theSolid <span class="highlight-keyword">As</span> Solid = <span class="highlight-keyword">TryCast</span>(geoObjectItor.Current, Solid)
        <span class="highlight-keyword">If</span> theSolid <span class="highlight-keyword">IsNot</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
            <span class="highlight-comment">' Examine faces of the solid to find one with at least</span>
            <span class="highlight-comment">' one region. Then take the geometric face of that region.</span>
            <span class="highlight-keyword">For</span> <span class="highlight-keyword">Each</span> face <span class="highlight-keyword">As</span> Face <span class="highlight-keyword">In</span> theSolid.Faces
                <span class="highlight-keyword">If</span> face.HasRegions <span class="highlight-keyword">Then</span>
                    wallFace = face.GetRegions()(<span class="highlight-number">0</span>)
                    <span class="highlight-keyword">Exit</span> <span class="highlight-keyword">For</span>
                <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
            <span class="highlight-keyword">Next</span>
        <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">While</span>

    <span class="highlight-keyword">If</span> wallFace <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
        TaskDialog.Show(<span class="highlight-literal">"Failure"</span>, <span class="highlight-literal">"Could not find a face to paint on the given wall."</span>)
        <span class="highlight-keyword">Return</span>
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

    <span class="highlight-comment">' Paint material to the wall face (modification must be inside a transaction)</span>


    <span class="highlight-keyword">Using</span> transaction <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> Transaction(document, <span class="highlight-literal">"Painting a wall"</span>)
        transaction.Start()
        document.Paint(wall.Id, wallFace, material.Id)
        transaction.Commit()
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Using</span>

    <span class="highlight-comment">' For illustration purposes only, check if the painted material indeed got applied</span>


    <span class="highlight-keyword">Dim</span> isPainted <span class="highlight-keyword">As</span> <span class="highlight-keyword">Boolean</span> = document.IsPainted(wall.Id, wallFace)
    <span class="highlight-keyword">If</span> isPainted <span class="highlight-keyword">Then</span>
        <span class="highlight-keyword">Dim</span> paintedMatId <span class="highlight-keyword">As</span> ElementId = document.GetPaintedMaterial(wall.Id, wallFace)
        <span class="highlight-keyword">If</span> paintedMatId = material.Id <span class="highlight-keyword">Then</span>
            TaskDialog.Show(<span class="highlight-literal">"Painting material"</span>, <span class="highlight-literal">"Wall painted successfully."</span>)
        <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span></pre></div></span></div><h1 class="heading"><span onclick="ExpandCollapse(exceptionsToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(exceptionsToggle, event)" tabindex="0"><img id="exceptionsToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />Exceptions</span></h1><div id="exceptionsSection" class="section" name="collapseableSection" style=""><div class="tableSection"><table width="100%" cellspacing="2" cellpadding="5" frame="lhs"><tr><th class="exceptionNameColumn">Exception</th><th class="exceptionConditionColumn">Condition</th></tr><tr><td><a href="2e6e4206-97a8-dd4b-df5d-4269f4bb6088.htm">Autodesk.Revit.Exceptions<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>ArgumentException</a></td><td>
   The element elementId does not exist in the document
   -or-
   The element materialId does not exist in the document
   -or-
   The face doesn't belong to the element
   -or-
   The materialId doesn't specify a material element.
   -or-
   The element's face cannot be painted.
</td></tr><tr><td><a href="631e1424-60f4-929b-4e52-dda9dcd26316.htm">Autodesk.Revit.Exceptions<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>ArgumentNullException</a></td><td>
   A non-optional argument was null
</td></tr><tr><td><a href="53205486-5917-7c33-8e67-e362106ddc97.htm">Autodesk.Revit.Exceptions<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>ModificationForbiddenException</a></td><td>
   The document is in failure mode: an operation has failed,
   and Revit requires the user to either cancel the operation
   or fix the problem (usually by deleting certain elements).
   -or-
   The document is being loaded, or is in the midst of another
   sensitive process.
</td></tr><tr><td><a href="8f025460-c283-ea99-aa8a-5a36e11528f4.htm">Autodesk.Revit.Exceptions<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>ModificationOutsideTransactionException</a></td><td>
   The document has no open transaction.
</td></tr></table></div></div><h1 class="heading"><span onclick="ExpandCollapse(seeAlsoToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(seeAlsoToggle, event)" tabindex="0"><img id="seeAlsoToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />See Also</span></h1><div id="seeAlsoSection" class="section" name="collapseableSection" style=""><div class="seeAlsoStyle"><a href="db03274b-a107-aa32-9034-f3e0df4bb1ec.htm">Document Class</a></div><div class="seeAlsoStyle"><a href="f6a99488-ae33-46f8-849d-4c68869f68cd.htm">Paint Overload</a></div><div class="seeAlsoStyle"><a href="87546ba7-461b-c646-cbb1-2cb8f5bff8b2.htm">Autodesk.Revit.DB Namespace</a></div></div></div><div id="footer"><div class="footerLine"><img width="100%" height="3px" src="../icons/footer.gif" alt="Footer image" title="Footer image" /></div><A NAME="feedback"></A><span id="fb" class="feedbackcss"></span><p />Send comments on this topic to
        <a id="HT_MailLink" href="mailto:revitapifeedback%40autodesk.com?Subject=Revit 2022 API">Autodesk</a><script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        var HT_mailLinkText = HT_mailLink.innerHTML;
        HT_mailLink.href += ": " + document.title;
        HT_mailLink.innerHTML = HT_mailLinkText;
        </script></div></div></body></html>